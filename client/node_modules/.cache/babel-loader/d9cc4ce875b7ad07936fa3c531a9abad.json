{"ast":null,"code":"'use strict';\n\nvar __ = require('underscore');\n\nvar util = require('util'); // Our library\n\n\nvar linuxBuilder = require('./linux');\n\nvar macBuilder = require('./mac');\n\nvar winBuilder = require('./win');\n/**\n * A factory creates argument builders for different platform\n * @constructor\n */\n\n\nfunction factory() {}\n/**\n * Check out linux platform\n */\n\n\nfactory.isLinux = function (p) {\n  var platforms = ['aix', 'android', 'linux'];\n  return platforms.indexOf(p) >= 0;\n};\n/**\n * Check out macos platform\n */\n\n\nfactory.isMacOS = function (p) {\n  var platforms = ['darwin', 'freebsd'];\n  return platforms.indexOf(p) >= 0;\n};\n/**\n * Check out window platform\n */\n\n\nfactory.isWindow = function (p) {\n  return p && p.match(/^win/) !== null;\n};\n/**\n * Check whether given platform is supported\n * @param {string} p - Name of the platform\n * @return {bool} - True or False\n */\n\n\nfactory.isPlatformSupport = function (p) {\n  return __.some([this.isWindow(p), this.isLinux(p), this.isMacOS(p)]);\n};\n/**\n * Return a path to the ping executable in the system\n * @param {string} platform - Name of the platform\n * @param {bool} v6 - Ping via ipv6 or not\n * @return {string} - Executable path for system command ping\n * @throw if given platform is not supported\n */\n\n\nfactory.getExecutablePath = function (platform, v6) {\n  if (!this.isPlatformSupport(platform)) {\n    throw new Error(util.format('Platform |%s| is not support', platform));\n  }\n\n  var ret = null;\n\n  if (platform === 'aix') {\n    ret = '/usr/sbin/ping';\n  } else if (factory.isLinux(platform)) {\n    ret = v6 ? 'ping6' : 'ping';\n  } else if (factory.isWindow(platform)) {\n    ret = process.env.SystemRoot + '/system32/ping.exe';\n  } else if (factory.isMacOS(platform)) {\n    ret = v6 ? '/sbin/ping6' : '/sbin/ping';\n  }\n\n  return ret;\n};\n/**\n * Create a builder\n * @param {string} platform - Name of the platform\n * @return {object} - Argument builder\n * @throw if given platform is not supported\n */\n\n\nfactory.createBuilder = function (platform) {\n  if (!this.isPlatformSupport(platform)) {\n    throw new Error(util.format('Platform |%s| is not support', platform));\n  }\n\n  var ret = null;\n\n  if (factory.isLinux(platform)) {\n    ret = linuxBuilder;\n  } else if (factory.isWindow(platform)) {\n    ret = winBuilder;\n  } else if (factory.isMacOS(platform)) {\n    ret = macBuilder;\n  }\n\n  return ret;\n};\n\nmodule.exports = factory;","map":{"version":3,"sources":["/home/maira/Desktop/system-ping-project/client/node_modules/ping/lib/builder/factory.js"],"names":["__","require","util","linuxBuilder","macBuilder","winBuilder","factory","isLinux","p","platforms","indexOf","isMacOS","isWindow","match","isPlatformSupport","some","getExecutablePath","platform","v6","Error","format","ret","process","env","SystemRoot","createBuilder","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar __ = require('underscore');\nvar util = require('util');\n\n// Our library\nvar linuxBuilder = require('./linux');\nvar macBuilder = require('./mac');\nvar winBuilder = require('./win');\n\n/**\n * A factory creates argument builders for different platform\n * @constructor\n */\nfunction factory() {}\n\n/**\n * Check out linux platform\n */\nfactory.isLinux = function (p) {\n    var platforms = [\n        'aix',\n        'android',\n        'linux',\n    ];\n\n    return platforms.indexOf(p) >= 0;\n};\n\n/**\n * Check out macos platform\n */\nfactory.isMacOS = function (p) {\n    var platforms = [\n        'darwin',\n        'freebsd',\n    ];\n\n    return platforms.indexOf(p) >= 0;\n};\n\n/**\n * Check out window platform\n */\nfactory.isWindow = function (p) {\n    return p && p.match(/^win/) !== null;\n};\n\n/**\n * Check whether given platform is supported\n * @param {string} p - Name of the platform\n * @return {bool} - True or False\n */\nfactory.isPlatformSupport = function (p) {\n    return __.some([\n        this.isWindow(p),\n        this.isLinux(p),\n        this.isMacOS(p),\n    ]);\n};\n\n/**\n * Return a path to the ping executable in the system\n * @param {string} platform - Name of the platform\n * @param {bool} v6 - Ping via ipv6 or not\n * @return {string} - Executable path for system command ping\n * @throw if given platform is not supported\n */\nfactory.getExecutablePath = function (platform, v6) {\n    if (!this.isPlatformSupport(platform)) {\n        throw new Error(util.format('Platform |%s| is not support', platform));\n    }\n\n    var ret = null;\n\n    if (platform === 'aix') {\n        ret = '/usr/sbin/ping';\n    } else if (factory.isLinux(platform)) {\n        ret = v6 ? 'ping6' : 'ping';\n    } else if (factory.isWindow(platform)) {\n        ret = process.env.SystemRoot + '/system32/ping.exe';\n    } else if (factory.isMacOS(platform)) {\n        ret = v6 ? '/sbin/ping6' : '/sbin/ping';\n    }\n\n    return ret;\n};\n\n/**\n * Create a builder\n * @param {string} platform - Name of the platform\n * @return {object} - Argument builder\n * @throw if given platform is not supported\n */\nfactory.createBuilder = function (platform) {\n    if (!this.isPlatformSupport(platform)) {\n        throw new Error(util.format('Platform |%s| is not support', platform));\n    }\n\n    var ret = null;\n\n    if (factory.isLinux(platform)) {\n        ret = linuxBuilder;\n    } else if (factory.isWindow(platform)) {\n        ret = winBuilder;\n    } else if (factory.isMacOS(platform)) {\n        ret = macBuilder;\n    }\n\n    return ret;\n};\n\nmodule.exports = factory;\n"]},"metadata":{},"sourceType":"script"}