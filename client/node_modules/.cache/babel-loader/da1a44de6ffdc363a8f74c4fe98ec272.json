{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _RedisCommandsQueue_instances, _a, _RedisCommandsQueue_flushQueue, _RedisCommandsQueue_emitPubSubMessage, _RedisCommandsQueue_maxLength, _RedisCommandsQueue_waitingToBeSent, _RedisCommandsQueue_waitingForReply, _RedisCommandsQueue_pubSubState, _RedisCommandsQueue_PUB_SUB_MESSAGES, _RedisCommandsQueue_parser, _RedisCommandsQueue_chainInExecution, _RedisCommandsQueue_initiatePubSubState, _RedisCommandsQueue_pushPubSubCommand, _RedisCommandsQueue_setReturnBuffers, _RedisCommandsQueue_shiftWaitingForReply;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PubSubUnsubscribeCommands = exports.PubSubSubscribeCommands = void 0;\n\nconst LinkedList = require(\"yallist\");\n\nconst errors_1 = require(\"../errors\"); // We need to use 'require', because it's not possible with Typescript to import\n// classes that are exported as 'module.exports = class`, without esModuleInterop\n// set to true.\n\n\nconst RedisParser = require('redis-parser');\n\nvar PubSubSubscribeCommands;\n\n(function (PubSubSubscribeCommands) {\n  PubSubSubscribeCommands[\"SUBSCRIBE\"] = \"SUBSCRIBE\";\n  PubSubSubscribeCommands[\"PSUBSCRIBE\"] = \"PSUBSCRIBE\";\n})(PubSubSubscribeCommands = exports.PubSubSubscribeCommands || (exports.PubSubSubscribeCommands = {}));\n\nvar PubSubUnsubscribeCommands;\n\n(function (PubSubUnsubscribeCommands) {\n  PubSubUnsubscribeCommands[\"UNSUBSCRIBE\"] = \"UNSUBSCRIBE\";\n  PubSubUnsubscribeCommands[\"PUNSUBSCRIBE\"] = \"PUNSUBSCRIBE\";\n})(PubSubUnsubscribeCommands = exports.PubSubUnsubscribeCommands || (exports.PubSubUnsubscribeCommands = {}));\n\nclass RedisCommandsQueue {\n  constructor(maxLength) {\n    _RedisCommandsQueue_instances.add(this);\n\n    _RedisCommandsQueue_maxLength.set(this, void 0);\n\n    _RedisCommandsQueue_waitingToBeSent.set(this, new LinkedList());\n\n    _RedisCommandsQueue_waitingForReply.set(this, new LinkedList());\n\n    _RedisCommandsQueue_pubSubState.set(this, void 0);\n\n    _RedisCommandsQueue_parser.set(this, new RedisParser({\n      returnReply: reply => {\n        if (__classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\") && Array.isArray(reply)) {\n          if (__classPrivateFieldGet(RedisCommandsQueue, _a, \"f\", _RedisCommandsQueue_PUB_SUB_MESSAGES).message.equals(reply[0])) {\n            return __classPrivateFieldGet(RedisCommandsQueue, _a, \"m\", _RedisCommandsQueue_emitPubSubMessage).call(RedisCommandsQueue, __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\").listeners.channels, reply[2], reply[1]);\n          } else if (__classPrivateFieldGet(RedisCommandsQueue, _a, \"f\", _RedisCommandsQueue_PUB_SUB_MESSAGES).pMessage.equals(reply[0])) {\n            return __classPrivateFieldGet(RedisCommandsQueue, _a, \"m\", _RedisCommandsQueue_emitPubSubMessage).call(RedisCommandsQueue, __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\").listeners.patterns, reply[3], reply[2], reply[1]);\n          } else if (__classPrivateFieldGet(RedisCommandsQueue, _a, \"f\", _RedisCommandsQueue_PUB_SUB_MESSAGES).subscribe.equals(reply[0]) || __classPrivateFieldGet(RedisCommandsQueue, _a, \"f\", _RedisCommandsQueue_PUB_SUB_MESSAGES).pSubscribe.equals(reply[0]) || __classPrivateFieldGet(RedisCommandsQueue, _a, \"f\", _RedisCommandsQueue_PUB_SUB_MESSAGES).unsubscribe.equals(reply[0]) || __classPrivateFieldGet(RedisCommandsQueue, _a, \"f\", _RedisCommandsQueue_PUB_SUB_MESSAGES).pUnsubscribe.equals(reply[0])) {\n            if (--__classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, \"f\").head.value.channelsCounter === 0) {\n              __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_shiftWaitingForReply).call(this).resolve();\n            }\n\n            return;\n          }\n        }\n\n        __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_shiftWaitingForReply).call(this).resolve(reply);\n      },\n      returnError: err => __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_shiftWaitingForReply).call(this).reject(err)\n    }));\n\n    _RedisCommandsQueue_chainInExecution.set(this, void 0);\n\n    __classPrivateFieldSet(this, _RedisCommandsQueue_maxLength, maxLength, \"f\");\n  }\n\n  addCommand(args, options) {\n    var _b;\n\n    if (__classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\") && !(options === null || options === void 0 ? void 0 : options.ignorePubSubMode)) {\n      return Promise.reject(new Error('Cannot send commands in PubSub mode'));\n    } else if (__classPrivateFieldGet(this, _RedisCommandsQueue_maxLength, \"f\") && __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, \"f\").length + __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, \"f\").length >= __classPrivateFieldGet(this, _RedisCommandsQueue_maxLength, \"f\")) {\n      return Promise.reject(new Error('The queue is full'));\n    } else if ((_b = options === null || options === void 0 ? void 0 : options.signal) === null || _b === void 0 ? void 0 : _b.aborted) {\n      return Promise.reject(new errors_1.AbortError());\n    }\n\n    return new Promise((resolve, reject) => {\n      const node = new LinkedList.Node({\n        args,\n        chainId: options === null || options === void 0 ? void 0 : options.chainId,\n        returnBuffers: options === null || options === void 0 ? void 0 : options.returnBuffers,\n        resolve,\n        reject\n      });\n\n      if (options === null || options === void 0 ? void 0 : options.signal) {\n        const listener = () => {\n          __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, \"f\").removeNode(node);\n\n          node.value.reject(new errors_1.AbortError());\n        };\n\n        node.value.abort = {\n          signal: options.signal,\n          listener\n        }; // AbortSignal type is incorrent\n\n        options.signal.addEventListener('abort', listener, {\n          once: true\n        });\n      }\n\n      if (options === null || options === void 0 ? void 0 : options.asap) {\n        __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, \"f\").unshiftNode(node);\n      } else {\n        __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, \"f\").pushNode(node);\n      }\n    });\n  }\n\n  subscribe(command, channels, listener, returnBuffers) {\n    const pubSubState = __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_initiatePubSubState).call(this),\n          channelsToSubscribe = [],\n          listenersMap = command === PubSubSubscribeCommands.SUBSCRIBE ? pubSubState.listeners.channels : pubSubState.listeners.patterns;\n\n    for (const channel of Array.isArray(channels) ? channels : [channels]) {\n      const channelString = typeof channel === 'string' ? channel : channel.toString();\n      let listeners = listenersMap.get(channelString);\n\n      if (!listeners) {\n        listeners = {\n          buffers: new Set(),\n          strings: new Set()\n        };\n        listenersMap.set(channelString, listeners);\n        channelsToSubscribe.push(channel);\n      } // https://github.com/microsoft/TypeScript/issues/23132\n\n\n      (returnBuffers ? listeners.buffers : listeners.strings).add(listener);\n    }\n\n    if (!channelsToSubscribe.length) {\n      return Promise.resolve();\n    }\n\n    return __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_pushPubSubCommand).call(this, command, channelsToSubscribe);\n  }\n\n  unsubscribe(command, channels, listener, returnBuffers) {\n    if (!__classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\")) {\n      return Promise.resolve();\n    }\n\n    const listeners = command === PubSubUnsubscribeCommands.UNSUBSCRIBE ? __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\").listeners.channels : __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\").listeners.patterns;\n\n    if (!channels) {\n      const size = listeners.size;\n      listeners.clear();\n      return __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_pushPubSubCommand).call(this, command, size);\n    }\n\n    const channelsToUnsubscribe = [];\n\n    for (const channel of Array.isArray(channels) ? channels : [channels]) {\n      const sets = listeners.get(channel);\n      if (!sets) continue;\n      let shouldUnsubscribe;\n\n      if (listener) {\n        // https://github.com/microsoft/TypeScript/issues/23132\n        (returnBuffers ? sets.buffers : sets.strings).delete(listener);\n        shouldUnsubscribe = !sets.buffers.size && !sets.strings.size;\n      } else {\n        shouldUnsubscribe = true;\n      }\n\n      if (shouldUnsubscribe) {\n        channelsToUnsubscribe.push(channel);\n        listeners.delete(channel);\n      }\n    }\n\n    if (!channelsToUnsubscribe.length) {\n      return Promise.resolve();\n    }\n\n    return __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_pushPubSubCommand).call(this, command, channelsToUnsubscribe);\n  }\n\n  resubscribe() {\n    if (!__classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\")) {\n      return;\n    }\n\n    __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\").subscribed = 0;\n\n    const promises = [],\n          {\n      channels,\n      patterns\n    } = __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\").listeners;\n\n    if (channels.size) {\n      promises.push(__classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_pushPubSubCommand).call(this, PubSubSubscribeCommands.SUBSCRIBE, [...channels.keys()]));\n    }\n\n    if (patterns.size) {\n      promises.push(__classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_pushPubSubCommand).call(this, PubSubSubscribeCommands.PSUBSCRIBE, [...patterns.keys()]));\n    }\n\n    if (promises.length) {\n      return Promise.all(promises);\n    }\n  }\n\n  getCommandToSend() {\n    const toSend = __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, \"f\").shift();\n\n    if (toSend) {\n      __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, \"f\").push({\n        resolve: toSend.resolve,\n        reject: toSend.reject,\n        channelsCounter: toSend.channelsCounter,\n        returnBuffers: toSend.returnBuffers\n      });\n    }\n\n    __classPrivateFieldSet(this, _RedisCommandsQueue_chainInExecution, toSend === null || toSend === void 0 ? void 0 : toSend.chainId, \"f\");\n\n    return toSend === null || toSend === void 0 ? void 0 : toSend.args;\n  }\n\n  parseResponse(data) {\n    __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_setReturnBuffers).call(this);\n\n    __classPrivateFieldGet(this, _RedisCommandsQueue_parser, \"f\").execute(data);\n  }\n\n  flushWaitingForReply(err) {\n    var _b;\n\n    __classPrivateFieldGet(RedisCommandsQueue, _a, \"m\", _RedisCommandsQueue_flushQueue).call(RedisCommandsQueue, __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, \"f\"), err);\n\n    if (!__classPrivateFieldGet(this, _RedisCommandsQueue_chainInExecution, \"f\")) return;\n\n    while (((_b = __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, \"f\").head) === null || _b === void 0 ? void 0 : _b.value.chainId) === __classPrivateFieldGet(this, _RedisCommandsQueue_chainInExecution, \"f\")) {\n      __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, \"f\").shift();\n    }\n\n    __classPrivateFieldSet(this, _RedisCommandsQueue_chainInExecution, undefined, \"f\");\n  }\n\n  flushAll(err) {\n    __classPrivateFieldGet(RedisCommandsQueue, _a, \"m\", _RedisCommandsQueue_flushQueue).call(RedisCommandsQueue, __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, \"f\"), err);\n\n    __classPrivateFieldGet(RedisCommandsQueue, _a, \"m\", _RedisCommandsQueue_flushQueue).call(RedisCommandsQueue, __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, \"f\"), err);\n  }\n\n}\n\nexports.default = RedisCommandsQueue;\n_a = RedisCommandsQueue, _RedisCommandsQueue_maxLength = new WeakMap(), _RedisCommandsQueue_waitingToBeSent = new WeakMap(), _RedisCommandsQueue_waitingForReply = new WeakMap(), _RedisCommandsQueue_pubSubState = new WeakMap(), _RedisCommandsQueue_parser = new WeakMap(), _RedisCommandsQueue_chainInExecution = new WeakMap(), _RedisCommandsQueue_instances = new WeakSet(), _RedisCommandsQueue_flushQueue = function _RedisCommandsQueue_flushQueue(queue, err) {\n  while (queue.length) {\n    queue.shift().reject(err);\n  }\n}, _RedisCommandsQueue_emitPubSubMessage = function _RedisCommandsQueue_emitPubSubMessage(listenersMap, message, channel, pattern) {\n  const keyString = (pattern !== null && pattern !== void 0 ? pattern : channel).toString(),\n        listeners = listenersMap.get(keyString);\n  if (!listeners) return;\n\n  for (const listener of listeners.buffers) {\n    listener(message, channel);\n  }\n\n  if (!listeners.strings.size) return;\n  const channelString = pattern ? channel.toString() : keyString,\n        messageString = channelString === '__redis__:invalidate' ? // https://github.com/redis/redis/pull/7469\n  // https://github.com/redis/redis/issues/7463\n  message === null ? null : message.map(x => x.toString()) : message.toString();\n\n  for (const listener of listeners.strings) {\n    listener(messageString, channelString);\n  }\n}, _RedisCommandsQueue_initiatePubSubState = function _RedisCommandsQueue_initiatePubSubState() {\n  var _b;\n\n  return __classPrivateFieldSet(this, _RedisCommandsQueue_pubSubState, (_b = __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\")) !== null && _b !== void 0 ? _b : {\n    subscribed: 0,\n    subscribing: 0,\n    unsubscribing: 0,\n    listeners: {\n      channels: new Map(),\n      patterns: new Map()\n    }\n  }, \"f\");\n}, _RedisCommandsQueue_pushPubSubCommand = function _RedisCommandsQueue_pushPubSubCommand(command, channels) {\n  return new Promise((resolve, reject) => {\n    const pubSubState = __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_initiatePubSubState).call(this),\n          isSubscribe = command === PubSubSubscribeCommands.SUBSCRIBE || command === PubSubSubscribeCommands.PSUBSCRIBE,\n          inProgressKey = isSubscribe ? 'subscribing' : 'unsubscribing',\n          commandArgs = [command];\n\n    let channelsCounter;\n\n    if (typeof channels === 'number') {\n      // unsubscribe only\n      channelsCounter = channels;\n    } else {\n      commandArgs.push(...channels);\n      channelsCounter = channels.length;\n    }\n\n    pubSubState[inProgressKey] += channelsCounter;\n\n    __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, \"f\").push({\n      args: commandArgs,\n      channelsCounter,\n      returnBuffers: true,\n      resolve: () => {\n        pubSubState[inProgressKey] -= channelsCounter;\n\n        if (isSubscribe) {\n          pubSubState.subscribed += channelsCounter;\n        } else {\n          pubSubState.subscribed -= channelsCounter;\n\n          if (!pubSubState.subscribed && !pubSubState.subscribing && !pubSubState.subscribed) {\n            __classPrivateFieldSet(this, _RedisCommandsQueue_pubSubState, undefined, \"f\");\n          }\n        }\n\n        resolve();\n      },\n      reject: err => {\n        pubSubState[inProgressKey] -= channelsCounter * (isSubscribe ? 1 : -1);\n        reject(err);\n      }\n    });\n  });\n}, _RedisCommandsQueue_setReturnBuffers = function _RedisCommandsQueue_setReturnBuffers() {\n  var _b, _c;\n\n  __classPrivateFieldGet(this, _RedisCommandsQueue_parser, \"f\").setReturnBuffers(!!((_b = __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, \"f\").head) === null || _b === void 0 ? void 0 : _b.value.returnBuffers) || !!((_c = __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\")) === null || _c === void 0 ? void 0 : _c.subscribed));\n}, _RedisCommandsQueue_shiftWaitingForReply = function _RedisCommandsQueue_shiftWaitingForReply() {\n  if (!__classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, \"f\").length) {\n    throw new Error('Got an unexpected reply from Redis');\n  }\n\n  const waitingForReply = __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, \"f\").shift();\n\n  __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_setReturnBuffers).call(this);\n\n  return waitingForReply;\n};\n_RedisCommandsQueue_PUB_SUB_MESSAGES = {\n  value: {\n    message: Buffer.from('message'),\n    pMessage: Buffer.from('pmessage'),\n    subscribe: Buffer.from('subscribe'),\n    pSubscribe: Buffer.from('psubscribe'),\n    unsubscribe: Buffer.from('unsunscribe'),\n    pUnsubscribe: Buffer.from('punsubscribe')\n  }\n};","map":{"version":3,"sources":["/home/maira/Desktop/Developer Projects/system-ping-project/node_modules/@node-redis/client/dist/lib/client/commands-queue.js"],"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_RedisCommandsQueue_instances","_a","_RedisCommandsQueue_flushQueue","_RedisCommandsQueue_emitPubSubMessage","_RedisCommandsQueue_maxLength","_RedisCommandsQueue_waitingToBeSent","_RedisCommandsQueue_waitingForReply","_RedisCommandsQueue_pubSubState","_RedisCommandsQueue_PUB_SUB_MESSAGES","_RedisCommandsQueue_parser","_RedisCommandsQueue_chainInExecution","_RedisCommandsQueue_initiatePubSubState","_RedisCommandsQueue_pushPubSubCommand","_RedisCommandsQueue_setReturnBuffers","_RedisCommandsQueue_shiftWaitingForReply","Object","defineProperty","exports","PubSubUnsubscribeCommands","PubSubSubscribeCommands","LinkedList","require","errors_1","RedisParser","RedisCommandsQueue","constructor","maxLength","add","returnReply","reply","Array","isArray","message","equals","listeners","channels","pMessage","patterns","subscribe","pSubscribe","unsubscribe","pUnsubscribe","head","channelsCounter","resolve","returnError","err","reject","addCommand","args","options","_b","ignorePubSubMode","Promise","Error","length","signal","aborted","AbortError","node","Node","chainId","returnBuffers","listener","removeNode","abort","addEventListener","once","asap","unshiftNode","pushNode","command","pubSubState","channelsToSubscribe","listenersMap","SUBSCRIBE","channel","channelString","toString","buffers","Set","strings","push","UNSUBSCRIBE","size","clear","channelsToUnsubscribe","sets","shouldUnsubscribe","delete","resubscribe","subscribed","promises","keys","PSUBSCRIBE","all","getCommandToSend","toSend","shift","parseResponse","data","execute","flushWaitingForReply","undefined","flushAll","default","WeakMap","WeakSet","queue","pattern","keyString","messageString","map","x","subscribing","unsubscribing","Map","isSubscribe","inProgressKey","commandArgs","_c","setReturnBuffers","waitingForReply","Buffer","from"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _RedisCommandsQueue_instances, _a, _RedisCommandsQueue_flushQueue, _RedisCommandsQueue_emitPubSubMessage, _RedisCommandsQueue_maxLength, _RedisCommandsQueue_waitingToBeSent, _RedisCommandsQueue_waitingForReply, _RedisCommandsQueue_pubSubState, _RedisCommandsQueue_PUB_SUB_MESSAGES, _RedisCommandsQueue_parser, _RedisCommandsQueue_chainInExecution, _RedisCommandsQueue_initiatePubSubState, _RedisCommandsQueue_pushPubSubCommand, _RedisCommandsQueue_setReturnBuffers, _RedisCommandsQueue_shiftWaitingForReply;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PubSubUnsubscribeCommands = exports.PubSubSubscribeCommands = void 0;\nconst LinkedList = require(\"yallist\");\nconst errors_1 = require(\"../errors\");\n// We need to use 'require', because it's not possible with Typescript to import\n// classes that are exported as 'module.exports = class`, without esModuleInterop\n// set to true.\nconst RedisParser = require('redis-parser');\nvar PubSubSubscribeCommands;\n(function (PubSubSubscribeCommands) {\n    PubSubSubscribeCommands[\"SUBSCRIBE\"] = \"SUBSCRIBE\";\n    PubSubSubscribeCommands[\"PSUBSCRIBE\"] = \"PSUBSCRIBE\";\n})(PubSubSubscribeCommands = exports.PubSubSubscribeCommands || (exports.PubSubSubscribeCommands = {}));\nvar PubSubUnsubscribeCommands;\n(function (PubSubUnsubscribeCommands) {\n    PubSubUnsubscribeCommands[\"UNSUBSCRIBE\"] = \"UNSUBSCRIBE\";\n    PubSubUnsubscribeCommands[\"PUNSUBSCRIBE\"] = \"PUNSUBSCRIBE\";\n})(PubSubUnsubscribeCommands = exports.PubSubUnsubscribeCommands || (exports.PubSubUnsubscribeCommands = {}));\nclass RedisCommandsQueue {\n    constructor(maxLength) {\n        _RedisCommandsQueue_instances.add(this);\n        _RedisCommandsQueue_maxLength.set(this, void 0);\n        _RedisCommandsQueue_waitingToBeSent.set(this, new LinkedList());\n        _RedisCommandsQueue_waitingForReply.set(this, new LinkedList());\n        _RedisCommandsQueue_pubSubState.set(this, void 0);\n        _RedisCommandsQueue_parser.set(this, new RedisParser({\n            returnReply: (reply) => {\n                if (__classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\") && Array.isArray(reply)) {\n                    if (__classPrivateFieldGet(RedisCommandsQueue, _a, \"f\", _RedisCommandsQueue_PUB_SUB_MESSAGES).message.equals(reply[0])) {\n                        return __classPrivateFieldGet(RedisCommandsQueue, _a, \"m\", _RedisCommandsQueue_emitPubSubMessage).call(RedisCommandsQueue, __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\").listeners.channels, reply[2], reply[1]);\n                    }\n                    else if (__classPrivateFieldGet(RedisCommandsQueue, _a, \"f\", _RedisCommandsQueue_PUB_SUB_MESSAGES).pMessage.equals(reply[0])) {\n                        return __classPrivateFieldGet(RedisCommandsQueue, _a, \"m\", _RedisCommandsQueue_emitPubSubMessage).call(RedisCommandsQueue, __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\").listeners.patterns, reply[3], reply[2], reply[1]);\n                    }\n                    else if (__classPrivateFieldGet(RedisCommandsQueue, _a, \"f\", _RedisCommandsQueue_PUB_SUB_MESSAGES).subscribe.equals(reply[0]) ||\n                        __classPrivateFieldGet(RedisCommandsQueue, _a, \"f\", _RedisCommandsQueue_PUB_SUB_MESSAGES).pSubscribe.equals(reply[0]) ||\n                        __classPrivateFieldGet(RedisCommandsQueue, _a, \"f\", _RedisCommandsQueue_PUB_SUB_MESSAGES).unsubscribe.equals(reply[0]) ||\n                        __classPrivateFieldGet(RedisCommandsQueue, _a, \"f\", _RedisCommandsQueue_PUB_SUB_MESSAGES).pUnsubscribe.equals(reply[0])) {\n                        if (--__classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, \"f\").head.value.channelsCounter === 0) {\n                            __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_shiftWaitingForReply).call(this).resolve();\n                        }\n                        return;\n                    }\n                }\n                __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_shiftWaitingForReply).call(this).resolve(reply);\n            },\n            returnError: (err) => __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_shiftWaitingForReply).call(this).reject(err)\n        }));\n        _RedisCommandsQueue_chainInExecution.set(this, void 0);\n        __classPrivateFieldSet(this, _RedisCommandsQueue_maxLength, maxLength, \"f\");\n    }\n    addCommand(args, options) {\n        var _b;\n        if (__classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\") && !(options === null || options === void 0 ? void 0 : options.ignorePubSubMode)) {\n            return Promise.reject(new Error('Cannot send commands in PubSub mode'));\n        }\n        else if (__classPrivateFieldGet(this, _RedisCommandsQueue_maxLength, \"f\") && __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, \"f\").length + __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, \"f\").length >= __classPrivateFieldGet(this, _RedisCommandsQueue_maxLength, \"f\")) {\n            return Promise.reject(new Error('The queue is full'));\n        }\n        else if ((_b = options === null || options === void 0 ? void 0 : options.signal) === null || _b === void 0 ? void 0 : _b.aborted) {\n            return Promise.reject(new errors_1.AbortError());\n        }\n        return new Promise((resolve, reject) => {\n            const node = new LinkedList.Node({\n                args,\n                chainId: options === null || options === void 0 ? void 0 : options.chainId,\n                returnBuffers: options === null || options === void 0 ? void 0 : options.returnBuffers,\n                resolve,\n                reject\n            });\n            if (options === null || options === void 0 ? void 0 : options.signal) {\n                const listener = () => {\n                    __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, \"f\").removeNode(node);\n                    node.value.reject(new errors_1.AbortError());\n                };\n                node.value.abort = {\n                    signal: options.signal,\n                    listener\n                };\n                // AbortSignal type is incorrent\n                options.signal.addEventListener('abort', listener, {\n                    once: true\n                });\n            }\n            if (options === null || options === void 0 ? void 0 : options.asap) {\n                __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, \"f\").unshiftNode(node);\n            }\n            else {\n                __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, \"f\").pushNode(node);\n            }\n        });\n    }\n    subscribe(command, channels, listener, returnBuffers) {\n        const pubSubState = __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_initiatePubSubState).call(this), channelsToSubscribe = [], listenersMap = command === PubSubSubscribeCommands.SUBSCRIBE ? pubSubState.listeners.channels : pubSubState.listeners.patterns;\n        for (const channel of (Array.isArray(channels) ? channels : [channels])) {\n            const channelString = typeof channel === 'string' ? channel : channel.toString();\n            let listeners = listenersMap.get(channelString);\n            if (!listeners) {\n                listeners = {\n                    buffers: new Set(),\n                    strings: new Set()\n                };\n                listenersMap.set(channelString, listeners);\n                channelsToSubscribe.push(channel);\n            }\n            // https://github.com/microsoft/TypeScript/issues/23132\n            (returnBuffers ? listeners.buffers : listeners.strings).add(listener);\n        }\n        if (!channelsToSubscribe.length) {\n            return Promise.resolve();\n        }\n        return __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_pushPubSubCommand).call(this, command, channelsToSubscribe);\n    }\n    unsubscribe(command, channels, listener, returnBuffers) {\n        if (!__classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\")) {\n            return Promise.resolve();\n        }\n        const listeners = command === PubSubUnsubscribeCommands.UNSUBSCRIBE ?\n            __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\").listeners.channels :\n            __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\").listeners.patterns;\n        if (!channels) {\n            const size = listeners.size;\n            listeners.clear();\n            return __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_pushPubSubCommand).call(this, command, size);\n        }\n        const channelsToUnsubscribe = [];\n        for (const channel of (Array.isArray(channels) ? channels : [channels])) {\n            const sets = listeners.get(channel);\n            if (!sets)\n                continue;\n            let shouldUnsubscribe;\n            if (listener) {\n                // https://github.com/microsoft/TypeScript/issues/23132\n                (returnBuffers ? sets.buffers : sets.strings).delete(listener);\n                shouldUnsubscribe = !sets.buffers.size && !sets.strings.size;\n            }\n            else {\n                shouldUnsubscribe = true;\n            }\n            if (shouldUnsubscribe) {\n                channelsToUnsubscribe.push(channel);\n                listeners.delete(channel);\n            }\n        }\n        if (!channelsToUnsubscribe.length) {\n            return Promise.resolve();\n        }\n        return __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_pushPubSubCommand).call(this, command, channelsToUnsubscribe);\n    }\n    resubscribe() {\n        if (!__classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\")) {\n            return;\n        }\n        __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\").subscribed = 0;\n        const promises = [], { channels, patterns } = __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\").listeners;\n        if (channels.size) {\n            promises.push(__classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_pushPubSubCommand).call(this, PubSubSubscribeCommands.SUBSCRIBE, [...channels.keys()]));\n        }\n        if (patterns.size) {\n            promises.push(__classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_pushPubSubCommand).call(this, PubSubSubscribeCommands.PSUBSCRIBE, [...patterns.keys()]));\n        }\n        if (promises.length) {\n            return Promise.all(promises);\n        }\n    }\n    getCommandToSend() {\n        const toSend = __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, \"f\").shift();\n        if (toSend) {\n            __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, \"f\").push({\n                resolve: toSend.resolve,\n                reject: toSend.reject,\n                channelsCounter: toSend.channelsCounter,\n                returnBuffers: toSend.returnBuffers\n            });\n        }\n        __classPrivateFieldSet(this, _RedisCommandsQueue_chainInExecution, toSend === null || toSend === void 0 ? void 0 : toSend.chainId, \"f\");\n        return toSend === null || toSend === void 0 ? void 0 : toSend.args;\n    }\n    parseResponse(data) {\n        __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_setReturnBuffers).call(this);\n        __classPrivateFieldGet(this, _RedisCommandsQueue_parser, \"f\").execute(data);\n    }\n    flushWaitingForReply(err) {\n        var _b;\n        __classPrivateFieldGet(RedisCommandsQueue, _a, \"m\", _RedisCommandsQueue_flushQueue).call(RedisCommandsQueue, __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, \"f\"), err);\n        if (!__classPrivateFieldGet(this, _RedisCommandsQueue_chainInExecution, \"f\"))\n            return;\n        while (((_b = __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, \"f\").head) === null || _b === void 0 ? void 0 : _b.value.chainId) === __classPrivateFieldGet(this, _RedisCommandsQueue_chainInExecution, \"f\")) {\n            __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, \"f\").shift();\n        }\n        __classPrivateFieldSet(this, _RedisCommandsQueue_chainInExecution, undefined, \"f\");\n    }\n    flushAll(err) {\n        __classPrivateFieldGet(RedisCommandsQueue, _a, \"m\", _RedisCommandsQueue_flushQueue).call(RedisCommandsQueue, __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, \"f\"), err);\n        __classPrivateFieldGet(RedisCommandsQueue, _a, \"m\", _RedisCommandsQueue_flushQueue).call(RedisCommandsQueue, __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, \"f\"), err);\n    }\n}\nexports.default = RedisCommandsQueue;\n_a = RedisCommandsQueue, _RedisCommandsQueue_maxLength = new WeakMap(), _RedisCommandsQueue_waitingToBeSent = new WeakMap(), _RedisCommandsQueue_waitingForReply = new WeakMap(), _RedisCommandsQueue_pubSubState = new WeakMap(), _RedisCommandsQueue_parser = new WeakMap(), _RedisCommandsQueue_chainInExecution = new WeakMap(), _RedisCommandsQueue_instances = new WeakSet(), _RedisCommandsQueue_flushQueue = function _RedisCommandsQueue_flushQueue(queue, err) {\n    while (queue.length) {\n        queue.shift().reject(err);\n    }\n}, _RedisCommandsQueue_emitPubSubMessage = function _RedisCommandsQueue_emitPubSubMessage(listenersMap, message, channel, pattern) {\n    const keyString = (pattern !== null && pattern !== void 0 ? pattern : channel).toString(), listeners = listenersMap.get(keyString);\n    if (!listeners)\n        return;\n    for (const listener of listeners.buffers) {\n        listener(message, channel);\n    }\n    if (!listeners.strings.size)\n        return;\n    const channelString = pattern ? channel.toString() : keyString, messageString = channelString === '__redis__:invalidate' ?\n        // https://github.com/redis/redis/pull/7469\n        // https://github.com/redis/redis/issues/7463\n        (message === null ? null : message.map(x => x.toString())) :\n        message.toString();\n    for (const listener of listeners.strings) {\n        listener(messageString, channelString);\n    }\n}, _RedisCommandsQueue_initiatePubSubState = function _RedisCommandsQueue_initiatePubSubState() {\n    var _b;\n    return __classPrivateFieldSet(this, _RedisCommandsQueue_pubSubState, (_b = __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\")) !== null && _b !== void 0 ? _b : {\n        subscribed: 0,\n        subscribing: 0,\n        unsubscribing: 0,\n        listeners: {\n            channels: new Map(),\n            patterns: new Map()\n        }\n    }, \"f\");\n}, _RedisCommandsQueue_pushPubSubCommand = function _RedisCommandsQueue_pushPubSubCommand(command, channels) {\n    return new Promise((resolve, reject) => {\n        const pubSubState = __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_initiatePubSubState).call(this), isSubscribe = command === PubSubSubscribeCommands.SUBSCRIBE || command === PubSubSubscribeCommands.PSUBSCRIBE, inProgressKey = isSubscribe ? 'subscribing' : 'unsubscribing', commandArgs = [command];\n        let channelsCounter;\n        if (typeof channels === 'number') { // unsubscribe only\n            channelsCounter = channels;\n        }\n        else {\n            commandArgs.push(...channels);\n            channelsCounter = channels.length;\n        }\n        pubSubState[inProgressKey] += channelsCounter;\n        __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, \"f\").push({\n            args: commandArgs,\n            channelsCounter,\n            returnBuffers: true,\n            resolve: () => {\n                pubSubState[inProgressKey] -= channelsCounter;\n                if (isSubscribe) {\n                    pubSubState.subscribed += channelsCounter;\n                }\n                else {\n                    pubSubState.subscribed -= channelsCounter;\n                    if (!pubSubState.subscribed && !pubSubState.subscribing && !pubSubState.subscribed) {\n                        __classPrivateFieldSet(this, _RedisCommandsQueue_pubSubState, undefined, \"f\");\n                    }\n                }\n                resolve();\n            },\n            reject: err => {\n                pubSubState[inProgressKey] -= channelsCounter * (isSubscribe ? 1 : -1);\n                reject(err);\n            }\n        });\n    });\n}, _RedisCommandsQueue_setReturnBuffers = function _RedisCommandsQueue_setReturnBuffers() {\n    var _b, _c;\n    __classPrivateFieldGet(this, _RedisCommandsQueue_parser, \"f\").setReturnBuffers(!!((_b = __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, \"f\").head) === null || _b === void 0 ? void 0 : _b.value.returnBuffers) ||\n        !!((_c = __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, \"f\")) === null || _c === void 0 ? void 0 : _c.subscribed));\n}, _RedisCommandsQueue_shiftWaitingForReply = function _RedisCommandsQueue_shiftWaitingForReply() {\n    if (!__classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, \"f\").length) {\n        throw new Error('Got an unexpected reply from Redis');\n    }\n    const waitingForReply = __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, \"f\").shift();\n    __classPrivateFieldGet(this, _RedisCommandsQueue_instances, \"m\", _RedisCommandsQueue_setReturnBuffers).call(this);\n    return waitingForReply;\n};\n_RedisCommandsQueue_PUB_SUB_MESSAGES = { value: {\n        message: Buffer.from('message'),\n        pMessage: Buffer.from('pmessage'),\n        subscribe: Buffer.from('subscribe'),\n        pSubscribe: Buffer.from('psubscribe'),\n        unsubscribe: Buffer.from('unsunscribe'),\n        pUnsubscribe: Buffer.from('punsubscribe')\n    } };\n"]},"metadata":{},"sourceType":"script"}