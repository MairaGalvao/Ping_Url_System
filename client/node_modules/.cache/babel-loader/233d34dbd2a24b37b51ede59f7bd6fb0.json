{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar base = require('./base');\n\nvar MacParser = require('./mac');\n/**\n * @constructor\n *\n * @param {string} addr - Hostname or ip addres\n * @param {PingConfig} config - Config object in probe()\n */\n\n\nfunction LinuxParser(addr, config) {\n  base.call(this, addr, config);\n}\n\nutil.inherits(LinuxParser, base);\n/**\n * Process output's body\n * @param {string} line - A line from system ping\n */\n\nLinuxParser.prototype._processHeader = function (line) {\n  // Get host and numeric_host\n  var tokens = line.split(' ');\n  var isProbablyIPv4 = tokens[1].indexOf('(') === -1;\n\n  if (isProbablyIPv4) {\n    this._response.host = tokens[1];\n    this._response.numeric_host = tokens[2].slice(1, -1);\n  } else {\n    // Normalise into either a 2 or 3 element array\n    var foundAddresses = tokens.slice(1, -3).join('').match(/([^\\s()]+)/g);\n    this._response.host = foundAddresses.shift();\n    this._response.numeric_host = foundAddresses.pop();\n  }\n\n  this._changeState(this.STATES.BODY);\n};\n/**\n * Process output's body\n * @param {string} line - A line from system ping\n */\n\n\nLinuxParser.prototype._processBody = function (line) {\n  // Reuse mac parser implementation\n  MacParser.prototype._processBody.call(this, line);\n};\n/**\n * Process output's footer\n * @param {string} line - A line from system ping\n */\n\n\nLinuxParser.prototype._processFooter = function (line) {\n  // Reuse mac parser implementation\n  MacParser.prototype._processFooter.call(this, line);\n};\n\nmodule.exports = LinuxParser;","map":{"version":3,"sources":["/home/maira/Desktop/system-ping-project/client/node_modules/ping/lib/parser/linux.js"],"names":["util","require","base","MacParser","LinuxParser","addr","config","call","inherits","prototype","_processHeader","line","tokens","split","isProbablyIPv4","indexOf","_response","host","numeric_host","slice","foundAddresses","join","match","shift","pop","_changeState","STATES","BODY","_processBody","_processFooter","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,OAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,WAAT,CAAqBC,IAArB,EAA2BC,MAA3B,EAAmC;AAC/BJ,EAAAA,IAAI,CAACK,IAAL,CAAU,IAAV,EAAgBF,IAAhB,EAAsBC,MAAtB;AACH;;AAEDN,IAAI,CAACQ,QAAL,CAAcJ,WAAd,EAA2BF,IAA3B;AAEA;AACA;AACA;AACA;;AACAE,WAAW,CAACK,SAAZ,CAAsBC,cAAtB,GAAuC,UAAUC,IAAV,EAAgB;AACnD;AACA,MAAIC,MAAM,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAb;AACA,MAAIC,cAAc,GAAGF,MAAM,CAAC,CAAD,CAAN,CAAUG,OAAV,CAAkB,GAAlB,MAA2B,CAAC,CAAjD;;AAEA,MAAID,cAAJ,EAAoB;AAChB,SAAKE,SAAL,CAAeC,IAAf,GAAsBL,MAAM,CAAC,CAAD,CAA5B;AACA,SAAKI,SAAL,CAAeE,YAAf,GAA8BN,MAAM,CAAC,CAAD,CAAN,CAAUO,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,CAA9B;AACH,GAHD,MAGO;AACH;AACA,QAAIC,cAAc,GAAGR,MAAM,CAACO,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,EAAoBE,IAApB,CAAyB,EAAzB,EAA6BC,KAA7B,CAAmC,aAAnC,CAArB;AACA,SAAKN,SAAL,CAAeC,IAAf,GAAsBG,cAAc,CAACG,KAAf,EAAtB;AACA,SAAKP,SAAL,CAAeE,YAAf,GAA8BE,cAAc,CAACI,GAAf,EAA9B;AACH;;AAED,OAAKC,YAAL,CAAkB,KAAKC,MAAL,CAAYC,IAA9B;AACH,CAhBD;AAkBA;AACA;AACA;AACA;;;AACAvB,WAAW,CAACK,SAAZ,CAAsBmB,YAAtB,GAAqC,UAAUjB,IAAV,EAAgB;AACjD;AACAR,EAAAA,SAAS,CAACM,SAAV,CAAoBmB,YAApB,CAAiCrB,IAAjC,CAAsC,IAAtC,EAA4CI,IAA5C;AACH,CAHD;AAKA;AACA;AACA;AACA;;;AACAP,WAAW,CAACK,SAAZ,CAAsBoB,cAAtB,GAAuC,UAAUlB,IAAV,EAAgB;AACnD;AACAR,EAAAA,SAAS,CAACM,SAAV,CAAoBoB,cAApB,CAAmCtB,IAAnC,CAAwC,IAAxC,EAA8CI,IAA9C;AACH,CAHD;;AAKAmB,MAAM,CAACC,OAAP,GAAiB3B,WAAjB","sourcesContent":["'use strict';\n\nvar util = require('util');\nvar base = require('./base');\nvar MacParser = require('./mac');\n\n/**\n * @constructor\n *\n * @param {string} addr - Hostname or ip addres\n * @param {PingConfig} config - Config object in probe()\n */\nfunction LinuxParser(addr, config) {\n    base.call(this, addr, config);\n}\n\nutil.inherits(LinuxParser, base);\n\n/**\n * Process output's body\n * @param {string} line - A line from system ping\n */\nLinuxParser.prototype._processHeader = function (line) {\n    // Get host and numeric_host\n    var tokens = line.split(' ');\n    var isProbablyIPv4 = tokens[1].indexOf('(') === -1;\n\n    if (isProbablyIPv4) {\n        this._response.host = tokens[1];\n        this._response.numeric_host = tokens[2].slice(1, -1);\n    } else {\n        // Normalise into either a 2 or 3 element array\n        var foundAddresses = tokens.slice(1, -3).join('').match(/([^\\s()]+)/g);\n        this._response.host = foundAddresses.shift();\n        this._response.numeric_host = foundAddresses.pop();\n    }\n\n    this._changeState(this.STATES.BODY);\n};\n\n/**\n * Process output's body\n * @param {string} line - A line from system ping\n */\nLinuxParser.prototype._processBody = function (line) {\n    // Reuse mac parser implementation\n    MacParser.prototype._processBody.call(this, line);\n};\n\n/**\n * Process output's footer\n * @param {string} line - A line from system ping\n */\nLinuxParser.prototype._processFooter = function (line) {\n    // Reuse mac parser implementation\n    MacParser.prototype._processFooter.call(this, line);\n};\n\nmodule.exports = LinuxParser;\n"]},"metadata":{},"sourceType":"script"}