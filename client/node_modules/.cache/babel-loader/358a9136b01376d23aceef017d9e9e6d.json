{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformReply = exports.RedisClusterNodeLinkStates = exports.transformArguments = void 0;\n\nfunction transformArguments() {\n  return ['CLUSTER', 'NODES'];\n}\n\nexports.transformArguments = transformArguments;\nvar RedisClusterNodeLinkStates;\n\n(function (RedisClusterNodeLinkStates) {\n  RedisClusterNodeLinkStates[\"CONNECTED\"] = \"connected\";\n  RedisClusterNodeLinkStates[\"DISCONNECTED\"] = \"disconnected\";\n})(RedisClusterNodeLinkStates = exports.RedisClusterNodeLinkStates || (exports.RedisClusterNodeLinkStates = {}));\n\nfunction transformReply(reply) {\n  const lines = reply.split('\\n');\n  lines.pop(); // last line is empty\n\n  const mastersMap = new Map(),\n        replicasMap = new Map();\n\n  for (const line of lines) {\n    const [id, address, flags, masterId, pingSent, pongRecv, configEpoch, linkState, ...slots] = line.split(' '),\n          node = {\n      id,\n      address,\n      ...transformNodeAddress(address),\n      flags: flags.split(','),\n      pingSent: Number(pingSent),\n      pongRecv: Number(pongRecv),\n      configEpoch: Number(configEpoch),\n      linkState: linkState\n    };\n\n    if (masterId === '-') {\n      let replicas = replicasMap.get(id);\n\n      if (!replicas) {\n        replicas = [];\n        replicasMap.set(id, replicas);\n      }\n\n      mastersMap.set(id, { ...node,\n        slots: slots.map(slot => {\n          // TODO: importing & exporting (https://redis.io/commands/cluster-nodes#special-slot-entries)\n          const [fromString, toString] = slot.split('-', 2),\n                from = Number(fromString);\n          return {\n            from,\n            to: toString ? Number(toString) : from\n          };\n        }),\n        replicas\n      });\n    } else {\n      const replicas = replicasMap.get(masterId);\n\n      if (!replicas) {\n        replicasMap.set(masterId, [node]);\n      } else {\n        replicas.push(node);\n      }\n    }\n  }\n\n  return [...mastersMap.values()];\n}\n\nexports.transformReply = transformReply;\n\nfunction transformNodeAddress(address) {\n  const indexOfColon = address.indexOf(':'),\n        indexOfAt = address.indexOf('@', indexOfColon),\n        host = address.substring(0, indexOfColon);\n\n  if (indexOfAt === -1) {\n    return {\n      host,\n      port: Number(address.substring(indexOfColon + 1)),\n      cport: null\n    };\n  }\n\n  return {\n    host: address.substring(0, indexOfColon),\n    port: Number(address.substring(indexOfColon + 1, indexOfAt)),\n    cport: Number(address.substring(indexOfAt + 1))\n  };\n}","map":{"version":3,"sources":["/home/maira/Desktop/Developer Projects/system-ping-project/node_modules/@node-redis/client/dist/lib/commands/CLUSTER_NODES.js"],"names":["Object","defineProperty","exports","value","transformReply","RedisClusterNodeLinkStates","transformArguments","reply","lines","split","pop","mastersMap","Map","replicasMap","line","id","address","flags","masterId","pingSent","pongRecv","configEpoch","linkState","slots","node","transformNodeAddress","Number","replicas","get","set","map","slot","fromString","toString","from","to","push","values","indexOfColon","indexOf","indexOfAt","host","substring","port","cport"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyBF,OAAO,CAACG,0BAAR,GAAqCH,OAAO,CAACI,kBAAR,GAA6B,KAAK,CAAhG;;AACA,SAASA,kBAAT,GAA8B;AAC1B,SAAO,CAAC,SAAD,EAAY,OAAZ,CAAP;AACH;;AACDJ,OAAO,CAACI,kBAAR,GAA6BA,kBAA7B;AACA,IAAID,0BAAJ;;AACA,CAAC,UAAUA,0BAAV,EAAsC;AACnCA,EAAAA,0BAA0B,CAAC,WAAD,CAA1B,GAA0C,WAA1C;AACAA,EAAAA,0BAA0B,CAAC,cAAD,CAA1B,GAA6C,cAA7C;AACH,CAHD,EAGGA,0BAA0B,GAAGH,OAAO,CAACG,0BAAR,KAAuCH,OAAO,CAACG,0BAAR,GAAqC,EAA5E,CAHhC;;AAIA,SAASD,cAAT,CAAwBG,KAAxB,EAA+B;AAC3B,QAAMC,KAAK,GAAGD,KAAK,CAACE,KAAN,CAAY,IAAZ,CAAd;AACAD,EAAAA,KAAK,CAACE,GAAN,GAF2B,CAEd;;AACb,QAAMC,UAAU,GAAG,IAAIC,GAAJ,EAAnB;AAAA,QAA8BC,WAAW,GAAG,IAAID,GAAJ,EAA5C;;AACA,OAAK,MAAME,IAAX,IAAmBN,KAAnB,EAA0B;AACtB,UAAM,CAACO,EAAD,EAAKC,OAAL,EAAcC,KAAd,EAAqBC,QAArB,EAA+BC,QAA/B,EAAyCC,QAAzC,EAAmDC,WAAnD,EAAgEC,SAAhE,EAA2E,GAAGC,KAA9E,IAAuFT,IAAI,CAACL,KAAL,CAAW,GAAX,CAA7F;AAAA,UAA8Ge,IAAI,GAAG;AACjHT,MAAAA,EADiH;AAEjHC,MAAAA,OAFiH;AAGjH,SAAGS,oBAAoB,CAACT,OAAD,CAH0F;AAIjHC,MAAAA,KAAK,EAAEA,KAAK,CAACR,KAAN,CAAY,GAAZ,CAJ0G;AAKjHU,MAAAA,QAAQ,EAAEO,MAAM,CAACP,QAAD,CALiG;AAMjHC,MAAAA,QAAQ,EAAEM,MAAM,CAACN,QAAD,CANiG;AAOjHC,MAAAA,WAAW,EAAEK,MAAM,CAACL,WAAD,CAP8F;AAQjHC,MAAAA,SAAS,EAAEA;AARsG,KAArH;;AAUA,QAAIJ,QAAQ,KAAK,GAAjB,EAAsB;AAClB,UAAIS,QAAQ,GAAGd,WAAW,CAACe,GAAZ,CAAgBb,EAAhB,CAAf;;AACA,UAAI,CAACY,QAAL,EAAe;AACXA,QAAAA,QAAQ,GAAG,EAAX;AACAd,QAAAA,WAAW,CAACgB,GAAZ,CAAgBd,EAAhB,EAAoBY,QAApB;AACH;;AACDhB,MAAAA,UAAU,CAACkB,GAAX,CAAed,EAAf,EAAmB,EACf,GAAGS,IADY;AAEfD,QAAAA,KAAK,EAAEA,KAAK,CAACO,GAAN,CAAUC,IAAI,IAAI;AACrB;AACA,gBAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBF,IAAI,CAACtB,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAA/B;AAAA,gBAAmDyB,IAAI,GAAGR,MAAM,CAACM,UAAD,CAAhE;AACA,iBAAO;AACHE,YAAAA,IADG;AAEHC,YAAAA,EAAE,EAAEF,QAAQ,GAAGP,MAAM,CAACO,QAAD,CAAT,GAAsBC;AAF/B,WAAP;AAIH,SAPM,CAFQ;AAUfP,QAAAA;AAVe,OAAnB;AAYH,KAlBD,MAmBK;AACD,YAAMA,QAAQ,GAAGd,WAAW,CAACe,GAAZ,CAAgBV,QAAhB,CAAjB;;AACA,UAAI,CAACS,QAAL,EAAe;AACXd,QAAAA,WAAW,CAACgB,GAAZ,CAAgBX,QAAhB,EAA0B,CAACM,IAAD,CAA1B;AACH,OAFD,MAGK;AACDG,QAAAA,QAAQ,CAACS,IAAT,CAAcZ,IAAd;AACH;AACJ;AACJ;;AACD,SAAO,CAAC,GAAGb,UAAU,CAAC0B,MAAX,EAAJ,CAAP;AACH;;AACDnC,OAAO,CAACE,cAAR,GAAyBA,cAAzB;;AACA,SAASqB,oBAAT,CAA8BT,OAA9B,EAAuC;AACnC,QAAMsB,YAAY,GAAGtB,OAAO,CAACuB,OAAR,CAAgB,GAAhB,CAArB;AAAA,QAA2CC,SAAS,GAAGxB,OAAO,CAACuB,OAAR,CAAgB,GAAhB,EAAqBD,YAArB,CAAvD;AAAA,QAA2FG,IAAI,GAAGzB,OAAO,CAAC0B,SAAR,CAAkB,CAAlB,EAAqBJ,YAArB,CAAlG;;AACA,MAAIE,SAAS,KAAK,CAAC,CAAnB,EAAsB;AAClB,WAAO;AACHC,MAAAA,IADG;AAEHE,MAAAA,IAAI,EAAEjB,MAAM,CAACV,OAAO,CAAC0B,SAAR,CAAkBJ,YAAY,GAAG,CAAjC,CAAD,CAFT;AAGHM,MAAAA,KAAK,EAAE;AAHJ,KAAP;AAKH;;AACD,SAAO;AACHH,IAAAA,IAAI,EAAEzB,OAAO,CAAC0B,SAAR,CAAkB,CAAlB,EAAqBJ,YAArB,CADH;AAEHK,IAAAA,IAAI,EAAEjB,MAAM,CAACV,OAAO,CAAC0B,SAAR,CAAkBJ,YAAY,GAAG,CAAjC,EAAoCE,SAApC,CAAD,CAFT;AAGHI,IAAAA,KAAK,EAAElB,MAAM,CAACV,OAAO,CAAC0B,SAAR,CAAkBF,SAAS,GAAG,CAA9B,CAAD;AAHV,GAAP;AAKH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transformReply = exports.RedisClusterNodeLinkStates = exports.transformArguments = void 0;\nfunction transformArguments() {\n    return ['CLUSTER', 'NODES'];\n}\nexports.transformArguments = transformArguments;\nvar RedisClusterNodeLinkStates;\n(function (RedisClusterNodeLinkStates) {\n    RedisClusterNodeLinkStates[\"CONNECTED\"] = \"connected\";\n    RedisClusterNodeLinkStates[\"DISCONNECTED\"] = \"disconnected\";\n})(RedisClusterNodeLinkStates = exports.RedisClusterNodeLinkStates || (exports.RedisClusterNodeLinkStates = {}));\nfunction transformReply(reply) {\n    const lines = reply.split('\\n');\n    lines.pop(); // last line is empty\n    const mastersMap = new Map(), replicasMap = new Map();\n    for (const line of lines) {\n        const [id, address, flags, masterId, pingSent, pongRecv, configEpoch, linkState, ...slots] = line.split(' '), node = {\n            id,\n            address,\n            ...transformNodeAddress(address),\n            flags: flags.split(','),\n            pingSent: Number(pingSent),\n            pongRecv: Number(pongRecv),\n            configEpoch: Number(configEpoch),\n            linkState: linkState\n        };\n        if (masterId === '-') {\n            let replicas = replicasMap.get(id);\n            if (!replicas) {\n                replicas = [];\n                replicasMap.set(id, replicas);\n            }\n            mastersMap.set(id, {\n                ...node,\n                slots: slots.map(slot => {\n                    // TODO: importing & exporting (https://redis.io/commands/cluster-nodes#special-slot-entries)\n                    const [fromString, toString] = slot.split('-', 2), from = Number(fromString);\n                    return {\n                        from,\n                        to: toString ? Number(toString) : from\n                    };\n                }),\n                replicas\n            });\n        }\n        else {\n            const replicas = replicasMap.get(masterId);\n            if (!replicas) {\n                replicasMap.set(masterId, [node]);\n            }\n            else {\n                replicas.push(node);\n            }\n        }\n    }\n    return [...mastersMap.values()];\n}\nexports.transformReply = transformReply;\nfunction transformNodeAddress(address) {\n    const indexOfColon = address.indexOf(':'), indexOfAt = address.indexOf('@', indexOfColon), host = address.substring(0, indexOfColon);\n    if (indexOfAt === -1) {\n        return {\n            host,\n            port: Number(address.substring(indexOfColon + 1)),\n            cport: null\n        };\n    }\n    return {\n        host: address.substring(0, indexOfColon),\n        port: Number(address.substring(indexOfColon + 1, indexOfAt)),\n        cport: Number(address.substring(indexOfAt + 1))\n    };\n}\n"]},"metadata":{},"sourceType":"script"}