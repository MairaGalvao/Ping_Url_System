{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar __ = require('underscore');\n\nvar base = require('./base');\n/**\n * @constructor\n *\n * @param {string} addr - Hostname or ip addres\n * @param {PingConfig} config - Config object in probe()\n */\n\n\nfunction MacParser(addr, config) {\n  base.call(this, addr, config);\n}\n\nutil.inherits(MacParser, base);\n/**\n * Process output's header\n * @param {string} line - A line from system ping\n */\n\nMacParser.prototype._processHeader = function (line) {\n  // Get host and numeric_host\n  var tokens = line.split(' ');\n  this._response.host = tokens[1];\n  this._response.numeric_host = tokens[2].slice(1, -2);\n\n  this._changeState(this.STATES.BODY);\n};\n/**\n * Process output's body\n * @param {string} line - A line from system ping\n */\n\n\nMacParser.prototype._processBody = function (line) {\n  // XXX: Assume there is at least 3 '=' can be found\n  var count = (line.match(/=/g) || []).length;\n\n  if (count >= 3) {\n    var regExp = /([0-9.]+)[ ]*ms/;\n    var match = regExp.exec(line);\n\n    this._times.push(parseFloat(match[1], 10));\n  } // Change state if it see a '---'\n\n\n  if (line.indexOf('---') >= 0) {\n    this._changeState(this.STATES.FOOTER);\n  }\n};\n/**\n * Process output's footer\n * @param {string} line - A line from system ping\n */\n\n\nMacParser.prototype._processFooter = function (line) {\n  var packetLoss = line.match(/ ([\\d.]+)%/);\n\n  if (packetLoss) {\n    this._response.packetLoss = parseFloat(packetLoss[1], 10);\n  } // XXX: Assume number of keywords '/' more than 3\n\n\n  var count = (line.match(/[/]/g) || []).length;\n\n  if (count >= 3) {\n    var regExp = /([0-9.]+)/g; // XXX: Assume min avg max stddev\n\n    var m1 = regExp.exec(line);\n    var m2 = regExp.exec(line);\n    var m3 = regExp.exec(line);\n    var m4 = regExp.exec(line);\n\n    if (__.all([m1, m2, m3, m4])) {\n      this._response.min = parseFloat(m1[1], 10);\n      this._response.avg = parseFloat(m2[1], 10);\n      this._response.max = parseFloat(m3[1], 10);\n      this._response.stddev = parseFloat(m4[1], 10);\n\n      this._changeState(this.STATES.END);\n    }\n\n    this._changeState(this.STATES.END);\n  }\n};\n\nmodule.exports = MacParser;","map":{"version":3,"sources":["/home/maira/Desktop/system-ping-project/client/node_modules/ping/lib/parser/mac.js"],"names":["util","require","__","base","MacParser","addr","config","call","inherits","prototype","_processHeader","line","tokens","split","_response","host","numeric_host","slice","_changeState","STATES","BODY","_processBody","count","match","length","regExp","exec","_times","push","parseFloat","indexOf","FOOTER","_processFooter","packetLoss","m1","m2","m3","m4","all","min","avg","max","stddev","END","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar util = require('util');\nvar __ = require('underscore');\n\nvar base = require('./base');\n\n/**\n * @constructor\n *\n * @param {string} addr - Hostname or ip addres\n * @param {PingConfig} config - Config object in probe()\n */\nfunction MacParser(addr, config) {\n    base.call(this, addr, config);\n}\n\nutil.inherits(MacParser, base);\n\n/**\n * Process output's header\n * @param {string} line - A line from system ping\n */\nMacParser.prototype._processHeader = function (line) {\n    // Get host and numeric_host\n    var tokens = line.split(' ');\n\n    this._response.host = tokens[1];\n    this._response.numeric_host = tokens[2].slice(1, -2);\n\n    this._changeState(this.STATES.BODY);\n};\n\n/**\n * Process output's body\n * @param {string} line - A line from system ping\n */\nMacParser.prototype._processBody = function (line) {\n    // XXX: Assume there is at least 3 '=' can be found\n    var count = (line.match(/=/g) || []).length;\n    if (count >= 3) {\n        var regExp = /([0-9.]+)[ ]*ms/;\n        var match = regExp.exec(line);\n        this._times.push(parseFloat(match[1], 10));\n    }\n\n    // Change state if it see a '---'\n    if (line.indexOf('---') >= 0) {\n        this._changeState(this.STATES.FOOTER);\n    }\n};\n\n/**\n * Process output's footer\n * @param {string} line - A line from system ping\n */\nMacParser.prototype._processFooter = function (line) {\n    var packetLoss = line.match(/ ([\\d.]+)%/);\n    if (packetLoss) {\n        this._response.packetLoss = parseFloat(packetLoss[1], 10);\n    }\n\n    // XXX: Assume number of keywords '/' more than 3\n    var count = (line.match(/[/]/g) || []).length;\n    if (count >= 3) {\n        var regExp = /([0-9.]+)/g;\n        // XXX: Assume min avg max stddev\n        var m1 = regExp.exec(line);\n        var m2 = regExp.exec(line);\n        var m3 = regExp.exec(line);\n        var m4 = regExp.exec(line);\n\n        if (__.all([m1, m2, m3, m4])) {\n            this._response.min = parseFloat(m1[1], 10);\n            this._response.avg = parseFloat(m2[1], 10);\n            this._response.max = parseFloat(m3[1], 10);\n            this._response.stddev = parseFloat(m4[1], 10);\n            this._changeState(this.STATES.END);\n        }\n\n        this._changeState(this.STATES.END);\n    }\n};\n\nmodule.exports = MacParser;\n"]},"metadata":{},"sourceType":"script"}