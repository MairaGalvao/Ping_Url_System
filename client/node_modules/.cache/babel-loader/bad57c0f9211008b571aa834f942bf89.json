{"ast":null,"code":"'use strict';\n/* eslint no-unused-vars: 0 */\n\nvar __ = require('underscore');\n/**\n * Parsed response\n * @typedef {object} PingResponse\n * @param {string} inputHost - The input IP address or HOST\n * @param {string} host - The input IP address or HOST\n * @param {string} numeric_host - Target IP address\n * @param {boolean} alive - True for existed host\n * @param {string} output - Raw stdout from system ping\n * @param {number} time - Time (float) in ms for first successful ping response\n * @param {string} min - Minimum time for collection records\n * @param {string} max - Maximum time for collection records\n * @param {string} avg - Average time for collection records\n * @param {number} packetLoss - Packet Losses in percent (number)\n * @param {string} stddev - Standard deviation time for collected records\n */\n\n/**\n * @constructor\n *\n * @param {string} addr - Hostname or ip addres\n * @param {PingConfig} config - Config object in probe()\n */\n\n\nfunction parser(addr, config) {\n  // Initial state is 0\n  this._state = 0; // Initial cache value\n\n  this._response = {\n    inputHost: addr,\n    host: 'unknown',\n    alive: false,\n    output: 'unknown',\n    time: 'unknown',\n    times: [],\n    min: 'unknown',\n    max: 'unknown',\n    avg: 'unknown',\n    stddev: 'unknown',\n    packetLoss: 'unknown'\n  }; // Initial times storage for ping time\n\n  this._times = []; // Initial lines storage for ping output\n\n  this._lines = []; // strip string regexp\n\n  this._stripRegex = /[ ]*\\r?\\n?$/g; // Ping Config\n\n  this._pingConfig = config || {};\n}\n/**\n * Enum for parser states\n * @readonly\n * @enum {number}\n */\n\n\nparser.prototype.STATES = {\n  INIT: 0,\n  HEADER: 1,\n  BODY: 2,\n  FOOTER: 3,\n  END: 4\n};\n/**\n * Change state of this parser\n * @param {number} state - parser.STATES\n * @return {this} - This instance\n */\n\nparser.prototype._changeState = function (state) {\n  var states = __.values(this.STATES);\n\n  if (states.indexOf(state) < 0) {\n    throw new Error('Unknown state');\n  }\n\n  this._state = state;\n  return this;\n};\n/**\n * Process output's header\n * @param {string} line - A line from system ping\n */\n\n\nparser.prototype._processHeader = function (line) {\n  throw new Error('Subclass should implement this method');\n};\n/**\n * Process output's body\n * @param {string} line - A line from system ping\n */\n\n\nparser.prototype._processBody = function (line) {\n  throw new Error('Subclass should implement this method');\n};\n/**\n * Process output's footer\n * @param {string} line - A line from system ping\n */\n\n\nparser.prototype._processFooter = function (line) {\n  throw new Error('Subclass should implement this method');\n};\n/**\n * Process a line from system ping\n * @param {string} line - A line from system ping\n * @return {this} - This instance\n */\n\n\nparser.prototype.eat = function (line) {\n  var headerStates = [this.STATES.INIT, this.STATES.HEADER]; // Store lines\n\n  this._lines.push(line); // Strip all space \\r\\n at the end\n\n\n  var _line = line.replace(this._stripRegex, '');\n\n  if (_line.length === 0) {// Do nothing if this is an empty line\n  } else if (headerStates.indexOf(this._state) >= 0) {\n    this._processHeader(_line);\n  } else if (this._state === this.STATES.BODY) {\n    this._processBody(_line);\n  } else if (this._state === this.STATES.FOOTER) {\n    this._processFooter(_line);\n  } else if (this._state === this.STATES.END) {// Do nothing\n  } else {\n    throw new Error('Unknown state');\n  }\n\n  return this;\n};\n/**\n * Get results after parsing certain lines from system ping\n * @return {PingResponse} - Response from parsing ping output\n */\n\n\nparser.prototype.getResult = function () {\n  var ret = __.extend({}, this._response); // Concat output\n\n\n  ret.output = this._lines.join('\\n'); // Determine alive\n\n  ret.alive = this._times.length > 0; // Update time at first successful line\n\n  if (ret.alive) {\n    this._response.time = this._times[0];\n    ret.time = this._response.time;\n    this._response.times = this._times;\n    ret.times = this._response.times;\n  } // Get stddev\n\n\n  if (ret.stddev === 'unknown' && ret.alive) {\n    var numberOfSamples = this._times.length;\n\n    var sumOfAllSquareDifferences = __.reduce(this._times, function (memory, time) {\n      var differenceFromMean = time - ret.avg;\n      var squaredDifference = differenceFromMean * differenceFromMean;\n      return memory + squaredDifference;\n    }, 0);\n\n    var variances = sumOfAllSquareDifferences / numberOfSamples;\n    ret.stddev = Math.round(Math.sqrt(variances) * 1000) / 1000;\n  } // Fix min, avg, max, stddev up to 3 decimal points\n\n\n  __.each(['min', 'avg', 'max', 'stddev', 'packetLoss'], function (key) {\n    var v = ret[key];\n\n    if (__.isNumber(v)) {\n      ret[key] = v.toFixed(3);\n    }\n  });\n\n  return ret;\n};\n\nmodule.exports = parser;","map":{"version":3,"sources":["/home/maira/Desktop/system-ping-project/client/node_modules/ping/lib/parser/base.js"],"names":["__","require","parser","addr","config","_state","_response","inputHost","host","alive","output","time","times","min","max","avg","stddev","packetLoss","_times","_lines","_stripRegex","_pingConfig","prototype","STATES","INIT","HEADER","BODY","FOOTER","END","_changeState","state","states","values","indexOf","Error","_processHeader","line","_processBody","_processFooter","eat","headerStates","push","_line","replace","length","getResult","ret","extend","join","numberOfSamples","sumOfAllSquareDifferences","reduce","memory","differenceFromMean","squaredDifference","variances","Math","round","sqrt","each","key","v","isNumber","toFixed","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* eslint no-unused-vars: 0 */\n\nvar __ = require('underscore');\n\n/**\n * Parsed response\n * @typedef {object} PingResponse\n * @param {string} inputHost - The input IP address or HOST\n * @param {string} host - The input IP address or HOST\n * @param {string} numeric_host - Target IP address\n * @param {boolean} alive - True for existed host\n * @param {string} output - Raw stdout from system ping\n * @param {number} time - Time (float) in ms for first successful ping response\n * @param {string} min - Minimum time for collection records\n * @param {string} max - Maximum time for collection records\n * @param {string} avg - Average time for collection records\n * @param {number} packetLoss - Packet Losses in percent (number)\n * @param {string} stddev - Standard deviation time for collected records\n */\n\n/**\n * @constructor\n *\n * @param {string} addr - Hostname or ip addres\n * @param {PingConfig} config - Config object in probe()\n */\nfunction parser(addr, config) {\n    // Initial state is 0\n    this._state = 0;\n\n    // Initial cache value\n    this._response = {\n        inputHost: addr,\n        host: 'unknown',\n        alive: false,\n        output: 'unknown',\n        time: 'unknown',\n        times: [],\n        min: 'unknown',\n        max: 'unknown',\n        avg: 'unknown',\n        stddev: 'unknown',\n        packetLoss: 'unknown',\n    };\n\n    // Initial times storage for ping time\n    this._times = [];\n\n    // Initial lines storage for ping output\n    this._lines = [];\n\n    // strip string regexp\n    this._stripRegex = /[ ]*\\r?\\n?$/g;\n\n    // Ping Config\n    this._pingConfig = config || {};\n}\n\n/**\n * Enum for parser states\n * @readonly\n * @enum {number}\n */\nparser.prototype.STATES = {\n    INIT: 0,\n    HEADER: 1,\n    BODY: 2,\n    FOOTER: 3,\n    END: 4,\n};\n\n/**\n * Change state of this parser\n * @param {number} state - parser.STATES\n * @return {this} - This instance\n */\nparser.prototype._changeState = function (state) {\n    var states = __.values(this.STATES);\n    if (states.indexOf(state) < 0) {\n        throw new Error('Unknown state');\n    }\n\n    this._state = state;\n\n    return this;\n};\n\n/**\n * Process output's header\n * @param {string} line - A line from system ping\n */\nparser.prototype._processHeader = function (line) {\n    throw new Error('Subclass should implement this method');\n};\n\n/**\n * Process output's body\n * @param {string} line - A line from system ping\n */\nparser.prototype._processBody = function (line) {\n    throw new Error('Subclass should implement this method');\n};\n\n/**\n * Process output's footer\n * @param {string} line - A line from system ping\n */\nparser.prototype._processFooter = function (line) {\n    throw new Error('Subclass should implement this method');\n};\n\n/**\n * Process a line from system ping\n * @param {string} line - A line from system ping\n * @return {this} - This instance\n */\nparser.prototype.eat = function (line) {\n    var headerStates = [\n        this.STATES.INIT,\n        this.STATES.HEADER,\n    ];\n\n    // Store lines\n    this._lines.push(line);\n\n    // Strip all space \\r\\n at the end\n    var _line = line.replace(this._stripRegex, '');\n\n    if (_line.length === 0) {\n        // Do nothing if this is an empty line\n    } else if (headerStates.indexOf(this._state) >= 0) {\n        this._processHeader(_line);\n    } else if (this._state === this.STATES.BODY) {\n        this._processBody(_line);\n    } else if (this._state === this.STATES.FOOTER) {\n        this._processFooter(_line);\n    } else if (this._state === this.STATES.END) {\n        // Do nothing\n    } else {\n        throw new Error('Unknown state');\n    }\n\n    return this;\n};\n\n/**\n * Get results after parsing certain lines from system ping\n * @return {PingResponse} - Response from parsing ping output\n */\nparser.prototype.getResult = function () {\n    var ret = __.extend({}, this._response);\n\n    // Concat output\n    ret.output = this._lines.join('\\n');\n\n    // Determine alive\n    ret.alive = this._times.length > 0;\n\n    // Update time at first successful line\n    if (ret.alive) {\n        this._response.time = this._times[0];\n        ret.time = this._response.time;\n        this._response.times = this._times;\n        ret.times = this._response.times;\n    }\n\n    // Get stddev\n    if (\n        ret.stddev === 'unknown' && ret.alive\n    ) {\n        var numberOfSamples = this._times.length;\n\n        var sumOfAllSquareDifferences = __.reduce(\n            this._times,\n            function (memory, time) {\n                var differenceFromMean = time - ret.avg;\n                var squaredDifference =\n                    differenceFromMean * differenceFromMean;\n                return memory + squaredDifference;\n            },\n            0\n        );\n        var variances = sumOfAllSquareDifferences / numberOfSamples;\n\n        ret.stddev = Math.round(\n            Math.sqrt(variances) * 1000\n        ) / 1000;\n    }\n\n    // Fix min, avg, max, stddev up to 3 decimal points\n    __.each(['min', 'avg', 'max', 'stddev', 'packetLoss'], function (key) {\n        var v = ret[key];\n        if (__.isNumber(v)) {\n            ret[key] = v.toFixed(3);\n        }\n    });\n\n    return ret;\n};\n\nmodule.exports = parser;\n"]},"metadata":{},"sourceType":"script"}