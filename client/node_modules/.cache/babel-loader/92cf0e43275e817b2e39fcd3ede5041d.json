{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar builderFactory = require('../builder/factory');\n\nvar WinParser = require('./win');\n\nvar MacParser = require('./mac');\n\nvar LinuxParser = require('./linux');\n/**\n * A factory creates a parser for parsing output from system ping\n * @constructor\n */\n\n\nfunction factory() {}\n/**\n * Create a parser for a given platform\n * @param {string} addr - Hostname or ip addres\n * @param {string} platform - Name of the platform\n * @param {PingConfig} [config] - Config object in probe()\n * @return {object} - Parser\n * @throw if given platform is not supported\n */\n\n\nfactory.createParser = function (addr, platform, config) {\n  // Avoid function reassignment\n  var _config = config || {};\n\n  if (!builderFactory.isPlatformSupport(platform)) {\n    throw new Error(util.format('Platform |%s| is not support', platform));\n  }\n\n  var ret = null;\n\n  if (builderFactory.isWindow(platform)) {\n    ret = new WinParser(addr, _config);\n  } else if (builderFactory.isMacOS(platform)) {\n    ret = new MacParser(addr, _config);\n  } else if (builderFactory.isLinux(platform)) {\n    ret = new LinuxParser(addr, _config);\n  }\n\n  return ret;\n};\n\nmodule.exports = factory;","map":{"version":3,"sources":["/home/maira/Desktop/system-ping-project/client/node_modules/ping/lib/parser/factory.js"],"names":["util","require","builderFactory","WinParser","MacParser","LinuxParser","factory","createParser","addr","platform","config","_config","isPlatformSupport","Error","format","ret","isWindow","isMacOS","isLinux","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIC,cAAc,GAAGD,OAAO,CAAC,oBAAD,CAA5B;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,OAAD,CAAvB;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,OAAD,CAAvB;;AACA,IAAII,WAAW,GAAGJ,OAAO,CAAC,SAAD,CAAzB;AAEA;AACA;AACA;AACA;;;AACA,SAASK,OAAT,GAAmB,CAAE;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAA,OAAO,CAACC,YAAR,GAAuB,UAAUC,IAAV,EAAgBC,QAAhB,EAA0BC,MAA1B,EAAkC;AACrD;AACA,MAAIC,OAAO,GAAGD,MAAM,IAAI,EAAxB;;AAEA,MAAI,CAACR,cAAc,CAACU,iBAAf,CAAiCH,QAAjC,CAAL,EAAiD;AAC7C,UAAM,IAAII,KAAJ,CAAUb,IAAI,CAACc,MAAL,CAAY,8BAAZ,EAA4CL,QAA5C,CAAV,CAAN;AACH;;AAED,MAAIM,GAAG,GAAG,IAAV;;AACA,MAAIb,cAAc,CAACc,QAAf,CAAwBP,QAAxB,CAAJ,EAAuC;AACnCM,IAAAA,GAAG,GAAG,IAAIZ,SAAJ,CAAcK,IAAd,EAAoBG,OAApB,CAAN;AACH,GAFD,MAEO,IAAIT,cAAc,CAACe,OAAf,CAAuBR,QAAvB,CAAJ,EAAsC;AACzCM,IAAAA,GAAG,GAAG,IAAIX,SAAJ,CAAcI,IAAd,EAAoBG,OAApB,CAAN;AACH,GAFM,MAEA,IAAIT,cAAc,CAACgB,OAAf,CAAuBT,QAAvB,CAAJ,EAAsC;AACzCM,IAAAA,GAAG,GAAG,IAAIV,WAAJ,CAAgBG,IAAhB,EAAsBG,OAAtB,CAAN;AACH;;AAED,SAAOI,GAAP;AACH,CAlBD;;AAoBAI,MAAM,CAACC,OAAP,GAAiBd,OAAjB","sourcesContent":["'use strict';\n\nvar util = require('util');\n\nvar builderFactory = require('../builder/factory');\nvar WinParser = require('./win');\nvar MacParser = require('./mac');\nvar LinuxParser = require('./linux');\n\n/**\n * A factory creates a parser for parsing output from system ping\n * @constructor\n */\nfunction factory() {}\n\n/**\n * Create a parser for a given platform\n * @param {string} addr - Hostname or ip addres\n * @param {string} platform - Name of the platform\n * @param {PingConfig} [config] - Config object in probe()\n * @return {object} - Parser\n * @throw if given platform is not supported\n */\nfactory.createParser = function (addr, platform, config) {\n    // Avoid function reassignment\n    var _config = config || {};\n\n    if (!builderFactory.isPlatformSupport(platform)) {\n        throw new Error(util.format('Platform |%s| is not support', platform));\n    }\n\n    var ret = null;\n    if (builderFactory.isWindow(platform)) {\n        ret = new WinParser(addr, _config);\n    } else if (builderFactory.isMacOS(platform)) {\n        ret = new MacParser(addr, _config);\n    } else if (builderFactory.isLinux(platform)) {\n        ret = new LinuxParser(addr, _config);\n    }\n\n    return ret;\n};\n\nmodule.exports = factory;\n"]},"metadata":{},"sourceType":"script"}