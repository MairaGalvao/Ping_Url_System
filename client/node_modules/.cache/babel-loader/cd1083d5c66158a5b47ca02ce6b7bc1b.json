{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformReply = exports.pushAggregatehOptions = exports.transformArguments = exports.AggregateGroupByReducers = exports.AggregateSteps = void 0;\n\nconst generic_transformers_1 = require(\"@node-redis/client/dist/lib/commands/generic-transformers\");\n\nconst _1 = require(\".\");\n\nvar AggregateSteps;\n\n(function (AggregateSteps) {\n  AggregateSteps[\"GROUPBY\"] = \"GROUPBY\";\n  AggregateSteps[\"SORTBY\"] = \"SORTBY\";\n  AggregateSteps[\"APPLY\"] = \"APPLY\";\n  AggregateSteps[\"LIMIT\"] = \"LIMIT\";\n  AggregateSteps[\"FILTER\"] = \"FILTER\";\n})(AggregateSteps = exports.AggregateSteps || (exports.AggregateSteps = {}));\n\nvar AggregateGroupByReducers;\n\n(function (AggregateGroupByReducers) {\n  AggregateGroupByReducers[\"COUNT\"] = \"COUNT\";\n  AggregateGroupByReducers[\"COUNT_DISTINCT\"] = \"COUNT_DISTINCT\";\n  AggregateGroupByReducers[\"COUNT_DISTINCTISH\"] = \"COUNT_DISTINCTISH\";\n  AggregateGroupByReducers[\"SUM\"] = \"SUM\";\n  AggregateGroupByReducers[\"MIN\"] = \"MIN\";\n  AggregateGroupByReducers[\"MAX\"] = \"MAX\";\n  AggregateGroupByReducers[\"AVG\"] = \"AVG\";\n  AggregateGroupByReducers[\"STDDEV\"] = \"STDDEV\";\n  AggregateGroupByReducers[\"QUANTILE\"] = \"QUANTILE\";\n  AggregateGroupByReducers[\"TOLIST\"] = \"TOLIST\";\n  AggregateGroupByReducers[\"TO_LIST\"] = \"TOLIST\";\n  AggregateGroupByReducers[\"FIRST_VALUE\"] = \"FIRST_VALUE\";\n  AggregateGroupByReducers[\"RANDOM_SAMPLE\"] = \"RANDOM_SAMPLE\";\n})(AggregateGroupByReducers = exports.AggregateGroupByReducers || (exports.AggregateGroupByReducers = {}));\n\nfunction transformArguments(index, query, options) {\n  const args = ['FT.AGGREGATE', index, query];\n  pushAggregatehOptions(args, options);\n  return args;\n}\n\nexports.transformArguments = transformArguments;\n\nfunction pushAggregatehOptions(args, options) {\n  if (options === null || options === void 0 ? void 0 : options.VERBATIM) {\n    args.push('VERBATIM');\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.LOAD) {\n    args.push('LOAD');\n    (0, _1.pushArgumentsWithLength)(args, () => {\n      if (Array.isArray(options.LOAD)) {\n        for (const load of options.LOAD) {\n          pushLoadField(args, load);\n        }\n      } else {\n        pushLoadField(args, options.LOAD);\n      }\n    });\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.STEPS) {\n    for (const step of options.STEPS) {\n      switch (step.type) {\n        case AggregateSteps.GROUPBY:\n          args.push('GROUPBY');\n\n          if (!step.properties) {\n            args.push('0');\n          } else {\n            (0, generic_transformers_1.pushVerdictArgument)(args, step.properties);\n          }\n\n          if (Array.isArray(step.REDUCE)) {\n            for (const reducer of step.REDUCE) {\n              pushGroupByReducer(args, reducer);\n            }\n          } else {\n            pushGroupByReducer(args, step.REDUCE);\n          }\n\n          break;\n\n        case AggregateSteps.SORTBY:\n          (0, _1.pushSortByArguments)(args, 'SORTBY', step.BY);\n\n          if (step.MAX) {\n            args.push('MAX', step.MAX.toString());\n          }\n\n          break;\n\n        case AggregateSteps.APPLY:\n          args.push('APPLY', step.expression, 'AS', step.AS);\n          break;\n\n        case AggregateSteps.LIMIT:\n          args.push('LIMIT', step.from.toString(), step.size.toString());\n          break;\n\n        case AggregateSteps.FILTER:\n          args.push('FILTER', step.expression);\n          break;\n      }\n    }\n  }\n\n  return args;\n}\n\nexports.pushAggregatehOptions = pushAggregatehOptions;\n\nfunction pushLoadField(args, toLoad) {\n  if (typeof toLoad === 'string') {\n    args.push(toLoad);\n  } else {\n    args.push(toLoad.identifier);\n\n    if (toLoad.AS) {\n      args.push('AS', toLoad.AS);\n    }\n  }\n}\n\nfunction pushGroupByReducer(args, reducer) {\n  args.push('REDUCE', reducer.type);\n\n  switch (reducer.type) {\n    case AggregateGroupByReducers.COUNT:\n      args.push('0');\n      break;\n\n    case AggregateGroupByReducers.COUNT_DISTINCT:\n    case AggregateGroupByReducers.COUNT_DISTINCTISH:\n    case AggregateGroupByReducers.SUM:\n    case AggregateGroupByReducers.MIN:\n    case AggregateGroupByReducers.MAX:\n    case AggregateGroupByReducers.AVG:\n    case AggregateGroupByReducers.STDDEV:\n    case AggregateGroupByReducers.TOLIST:\n      args.push('1', reducer.property);\n      break;\n\n    case AggregateGroupByReducers.QUANTILE:\n      args.push('2', reducer.property, reducer.quantile.toString());\n      break;\n\n    case AggregateGroupByReducers.FIRST_VALUE:\n      {\n        (0, _1.pushArgumentsWithLength)(args, () => {\n          args.push(reducer.property);\n\n          if (reducer.BY) {\n            args.push('BY');\n\n            if (typeof reducer.BY === 'string') {\n              args.push(reducer.BY);\n            } else {\n              args.push(reducer.BY.property);\n\n              if (reducer.BY.direction) {\n                args.push(reducer.BY.direction);\n              }\n            }\n          }\n        });\n        break;\n      }\n\n    case AggregateGroupByReducers.RANDOM_SAMPLE:\n      args.push('2', reducer.property, reducer.sampleSize.toString());\n      break;\n  }\n\n  if (reducer.AS) {\n    args.push('AS', reducer.AS);\n  }\n}\n\nfunction transformReply(rawReply) {\n  const results = [];\n\n  for (let i = 1; i < rawReply.length; i++) {\n    results.push((0, generic_transformers_1.transformTuplesReply)(rawReply[i]));\n  }\n\n  return {\n    total: rawReply[0],\n    results\n  };\n}\n\nexports.transformReply = transformReply;","map":{"version":3,"sources":["/home/maira/Desktop/Developer Projects/system-ping-project/node_modules/@node-redis/search/dist/commands/AGGREGATE.js"],"names":["Object","defineProperty","exports","value","transformReply","pushAggregatehOptions","transformArguments","AggregateGroupByReducers","AggregateSteps","generic_transformers_1","require","_1","index","query","options","args","VERBATIM","push","LOAD","pushArgumentsWithLength","Array","isArray","load","pushLoadField","STEPS","step","type","GROUPBY","properties","pushVerdictArgument","REDUCE","reducer","pushGroupByReducer","SORTBY","pushSortByArguments","BY","MAX","toString","APPLY","expression","AS","LIMIT","from","size","FILTER","toLoad","identifier","COUNT","COUNT_DISTINCT","COUNT_DISTINCTISH","SUM","MIN","AVG","STDDEV","TOLIST","property","QUANTILE","quantile","FIRST_VALUE","direction","RANDOM_SAMPLE","sampleSize","rawReply","results","i","length","transformTuplesReply","total"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyBF,OAAO,CAACG,qBAAR,GAAgCH,OAAO,CAACI,kBAAR,GAA6BJ,OAAO,CAACK,wBAAR,GAAmCL,OAAO,CAACM,cAAR,GAAyB,KAAK,CAAvJ;;AACA,MAAMC,sBAAsB,GAAGC,OAAO,CAAC,2DAAD,CAAtC;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,GAAD,CAAlB;;AACA,IAAIF,cAAJ;;AACA,CAAC,UAAUA,cAAV,EAA0B;AACvBA,EAAAA,cAAc,CAAC,SAAD,CAAd,GAA4B,SAA5B;AACAA,EAAAA,cAAc,CAAC,QAAD,CAAd,GAA2B,QAA3B;AACAA,EAAAA,cAAc,CAAC,OAAD,CAAd,GAA0B,OAA1B;AACAA,EAAAA,cAAc,CAAC,OAAD,CAAd,GAA0B,OAA1B;AACAA,EAAAA,cAAc,CAAC,QAAD,CAAd,GAA2B,QAA3B;AACH,CAND,EAMGA,cAAc,GAAGN,OAAO,CAACM,cAAR,KAA2BN,OAAO,CAACM,cAAR,GAAyB,EAApD,CANpB;;AAOA,IAAID,wBAAJ;;AACA,CAAC,UAAUA,wBAAV,EAAoC;AACjCA,EAAAA,wBAAwB,CAAC,OAAD,CAAxB,GAAoC,OAApC;AACAA,EAAAA,wBAAwB,CAAC,gBAAD,CAAxB,GAA6C,gBAA7C;AACAA,EAAAA,wBAAwB,CAAC,mBAAD,CAAxB,GAAgD,mBAAhD;AACAA,EAAAA,wBAAwB,CAAC,KAAD,CAAxB,GAAkC,KAAlC;AACAA,EAAAA,wBAAwB,CAAC,KAAD,CAAxB,GAAkC,KAAlC;AACAA,EAAAA,wBAAwB,CAAC,KAAD,CAAxB,GAAkC,KAAlC;AACAA,EAAAA,wBAAwB,CAAC,KAAD,CAAxB,GAAkC,KAAlC;AACAA,EAAAA,wBAAwB,CAAC,QAAD,CAAxB,GAAqC,QAArC;AACAA,EAAAA,wBAAwB,CAAC,UAAD,CAAxB,GAAuC,UAAvC;AACAA,EAAAA,wBAAwB,CAAC,QAAD,CAAxB,GAAqC,QAArC;AACAA,EAAAA,wBAAwB,CAAC,SAAD,CAAxB,GAAsC,QAAtC;AACAA,EAAAA,wBAAwB,CAAC,aAAD,CAAxB,GAA0C,aAA1C;AACAA,EAAAA,wBAAwB,CAAC,eAAD,CAAxB,GAA4C,eAA5C;AACH,CAdD,EAcGA,wBAAwB,GAAGL,OAAO,CAACK,wBAAR,KAAqCL,OAAO,CAACK,wBAAR,GAAmC,EAAxE,CAd9B;;AAeA,SAASD,kBAAT,CAA4BM,KAA5B,EAAmCC,KAAnC,EAA0CC,OAA1C,EAAmD;AAC/C,QAAMC,IAAI,GAAG,CAAC,cAAD,EAAiBH,KAAjB,EAAwBC,KAAxB,CAAb;AACAR,EAAAA,qBAAqB,CAACU,IAAD,EAAOD,OAAP,CAArB;AACA,SAAOC,IAAP;AACH;;AACDb,OAAO,CAACI,kBAAR,GAA6BA,kBAA7B;;AACA,SAASD,qBAAT,CAA+BU,IAA/B,EAAqCD,OAArC,EAA8C;AAC1C,MAAIA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACE,QAA9D,EAAwE;AACpED,IAAAA,IAAI,CAACE,IAAL,CAAU,UAAV;AACH;;AACD,MAAIH,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACI,IAA9D,EAAoE;AAChEH,IAAAA,IAAI,CAACE,IAAL,CAAU,MAAV;AACA,KAAC,GAAGN,EAAE,CAACQ,uBAAP,EAAgCJ,IAAhC,EAAsC,MAAM;AACxC,UAAIK,KAAK,CAACC,OAAN,CAAcP,OAAO,CAACI,IAAtB,CAAJ,EAAiC;AAC7B,aAAK,MAAMI,IAAX,IAAmBR,OAAO,CAACI,IAA3B,EAAiC;AAC7BK,UAAAA,aAAa,CAACR,IAAD,EAAOO,IAAP,CAAb;AACH;AACJ,OAJD,MAKK;AACDC,QAAAA,aAAa,CAACR,IAAD,EAAOD,OAAO,CAACI,IAAf,CAAb;AACH;AACJ,KATD;AAUH;;AACD,MAAIJ,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACU,KAA9D,EAAqE;AACjE,SAAK,MAAMC,IAAX,IAAmBX,OAAO,CAACU,KAA3B,EAAkC;AAC9B,cAAQC,IAAI,CAACC,IAAb;AACI,aAAKlB,cAAc,CAACmB,OAApB;AACIZ,UAAAA,IAAI,CAACE,IAAL,CAAU,SAAV;;AACA,cAAI,CAACQ,IAAI,CAACG,UAAV,EAAsB;AAClBb,YAAAA,IAAI,CAACE,IAAL,CAAU,GAAV;AACH,WAFD,MAGK;AACD,aAAC,GAAGR,sBAAsB,CAACoB,mBAA3B,EAAgDd,IAAhD,EAAsDU,IAAI,CAACG,UAA3D;AACH;;AACD,cAAIR,KAAK,CAACC,OAAN,CAAcI,IAAI,CAACK,MAAnB,CAAJ,EAAgC;AAC5B,iBAAK,MAAMC,OAAX,IAAsBN,IAAI,CAACK,MAA3B,EAAmC;AAC/BE,cAAAA,kBAAkB,CAACjB,IAAD,EAAOgB,OAAP,CAAlB;AACH;AACJ,WAJD,MAKK;AACDC,YAAAA,kBAAkB,CAACjB,IAAD,EAAOU,IAAI,CAACK,MAAZ,CAAlB;AACH;;AACD;;AACJ,aAAKtB,cAAc,CAACyB,MAApB;AACI,WAAC,GAAGtB,EAAE,CAACuB,mBAAP,EAA4BnB,IAA5B,EAAkC,QAAlC,EAA4CU,IAAI,CAACU,EAAjD;;AACA,cAAIV,IAAI,CAACW,GAAT,EAAc;AACVrB,YAAAA,IAAI,CAACE,IAAL,CAAU,KAAV,EAAiBQ,IAAI,CAACW,GAAL,CAASC,QAAT,EAAjB;AACH;;AACD;;AACJ,aAAK7B,cAAc,CAAC8B,KAApB;AACIvB,UAAAA,IAAI,CAACE,IAAL,CAAU,OAAV,EAAmBQ,IAAI,CAACc,UAAxB,EAAoC,IAApC,EAA0Cd,IAAI,CAACe,EAA/C;AACA;;AACJ,aAAKhC,cAAc,CAACiC,KAApB;AACI1B,UAAAA,IAAI,CAACE,IAAL,CAAU,OAAV,EAAmBQ,IAAI,CAACiB,IAAL,CAAUL,QAAV,EAAnB,EAAyCZ,IAAI,CAACkB,IAAL,CAAUN,QAAV,EAAzC;AACA;;AACJ,aAAK7B,cAAc,CAACoC,MAApB;AACI7B,UAAAA,IAAI,CAACE,IAAL,CAAU,QAAV,EAAoBQ,IAAI,CAACc,UAAzB;AACA;AAhCR;AAkCH;AACJ;;AACD,SAAOxB,IAAP;AACH;;AACDb,OAAO,CAACG,qBAAR,GAAgCA,qBAAhC;;AACA,SAASkB,aAAT,CAAuBR,IAAvB,EAA6B8B,MAA7B,EAAqC;AACjC,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC5B9B,IAAAA,IAAI,CAACE,IAAL,CAAU4B,MAAV;AACH,GAFD,MAGK;AACD9B,IAAAA,IAAI,CAACE,IAAL,CAAU4B,MAAM,CAACC,UAAjB;;AACA,QAAID,MAAM,CAACL,EAAX,EAAe;AACXzB,MAAAA,IAAI,CAACE,IAAL,CAAU,IAAV,EAAgB4B,MAAM,CAACL,EAAvB;AACH;AACJ;AACJ;;AACD,SAASR,kBAAT,CAA4BjB,IAA5B,EAAkCgB,OAAlC,EAA2C;AACvChB,EAAAA,IAAI,CAACE,IAAL,CAAU,QAAV,EAAoBc,OAAO,CAACL,IAA5B;;AACA,UAAQK,OAAO,CAACL,IAAhB;AACI,SAAKnB,wBAAwB,CAACwC,KAA9B;AACIhC,MAAAA,IAAI,CAACE,IAAL,CAAU,GAAV;AACA;;AACJ,SAAKV,wBAAwB,CAACyC,cAA9B;AACA,SAAKzC,wBAAwB,CAAC0C,iBAA9B;AACA,SAAK1C,wBAAwB,CAAC2C,GAA9B;AACA,SAAK3C,wBAAwB,CAAC4C,GAA9B;AACA,SAAK5C,wBAAwB,CAAC6B,GAA9B;AACA,SAAK7B,wBAAwB,CAAC6C,GAA9B;AACA,SAAK7C,wBAAwB,CAAC8C,MAA9B;AACA,SAAK9C,wBAAwB,CAAC+C,MAA9B;AACIvC,MAAAA,IAAI,CAACE,IAAL,CAAU,GAAV,EAAec,OAAO,CAACwB,QAAvB;AACA;;AACJ,SAAKhD,wBAAwB,CAACiD,QAA9B;AACIzC,MAAAA,IAAI,CAACE,IAAL,CAAU,GAAV,EAAec,OAAO,CAACwB,QAAvB,EAAiCxB,OAAO,CAAC0B,QAAR,CAAiBpB,QAAjB,EAAjC;AACA;;AACJ,SAAK9B,wBAAwB,CAACmD,WAA9B;AAA2C;AACvC,SAAC,GAAG/C,EAAE,CAACQ,uBAAP,EAAgCJ,IAAhC,EAAsC,MAAM;AACxCA,UAAAA,IAAI,CAACE,IAAL,CAAUc,OAAO,CAACwB,QAAlB;;AACA,cAAIxB,OAAO,CAACI,EAAZ,EAAgB;AACZpB,YAAAA,IAAI,CAACE,IAAL,CAAU,IAAV;;AACA,gBAAI,OAAOc,OAAO,CAACI,EAAf,KAAsB,QAA1B,EAAoC;AAChCpB,cAAAA,IAAI,CAACE,IAAL,CAAUc,OAAO,CAACI,EAAlB;AACH,aAFD,MAGK;AACDpB,cAAAA,IAAI,CAACE,IAAL,CAAUc,OAAO,CAACI,EAAR,CAAWoB,QAArB;;AACA,kBAAIxB,OAAO,CAACI,EAAR,CAAWwB,SAAf,EAA0B;AACtB5C,gBAAAA,IAAI,CAACE,IAAL,CAAUc,OAAO,CAACI,EAAR,CAAWwB,SAArB;AACH;AACJ;AACJ;AACJ,SAdD;AAeA;AACH;;AACD,SAAKpD,wBAAwB,CAACqD,aAA9B;AACI7C,MAAAA,IAAI,CAACE,IAAL,CAAU,GAAV,EAAec,OAAO,CAACwB,QAAvB,EAAiCxB,OAAO,CAAC8B,UAAR,CAAmBxB,QAAnB,EAAjC;AACA;AArCR;;AAuCA,MAAIN,OAAO,CAACS,EAAZ,EAAgB;AACZzB,IAAAA,IAAI,CAACE,IAAL,CAAU,IAAV,EAAgBc,OAAO,CAACS,EAAxB;AACH;AACJ;;AACD,SAASpC,cAAT,CAAwB0D,QAAxB,EAAkC;AAC9B,QAAMC,OAAO,GAAG,EAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtCD,IAAAA,OAAO,CAAC9C,IAAR,CAAa,CAAC,GAAGR,sBAAsB,CAACyD,oBAA3B,EAAiDJ,QAAQ,CAACE,CAAD,CAAzD,CAAb;AACH;;AACD,SAAO;AACHG,IAAAA,KAAK,EAAEL,QAAQ,CAAC,CAAD,CADZ;AAEHC,IAAAA;AAFG,GAAP;AAIH;;AACD7D,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transformReply = exports.pushAggregatehOptions = exports.transformArguments = exports.AggregateGroupByReducers = exports.AggregateSteps = void 0;\nconst generic_transformers_1 = require(\"@node-redis/client/dist/lib/commands/generic-transformers\");\nconst _1 = require(\".\");\nvar AggregateSteps;\n(function (AggregateSteps) {\n    AggregateSteps[\"GROUPBY\"] = \"GROUPBY\";\n    AggregateSteps[\"SORTBY\"] = \"SORTBY\";\n    AggregateSteps[\"APPLY\"] = \"APPLY\";\n    AggregateSteps[\"LIMIT\"] = \"LIMIT\";\n    AggregateSteps[\"FILTER\"] = \"FILTER\";\n})(AggregateSteps = exports.AggregateSteps || (exports.AggregateSteps = {}));\nvar AggregateGroupByReducers;\n(function (AggregateGroupByReducers) {\n    AggregateGroupByReducers[\"COUNT\"] = \"COUNT\";\n    AggregateGroupByReducers[\"COUNT_DISTINCT\"] = \"COUNT_DISTINCT\";\n    AggregateGroupByReducers[\"COUNT_DISTINCTISH\"] = \"COUNT_DISTINCTISH\";\n    AggregateGroupByReducers[\"SUM\"] = \"SUM\";\n    AggregateGroupByReducers[\"MIN\"] = \"MIN\";\n    AggregateGroupByReducers[\"MAX\"] = \"MAX\";\n    AggregateGroupByReducers[\"AVG\"] = \"AVG\";\n    AggregateGroupByReducers[\"STDDEV\"] = \"STDDEV\";\n    AggregateGroupByReducers[\"QUANTILE\"] = \"QUANTILE\";\n    AggregateGroupByReducers[\"TOLIST\"] = \"TOLIST\";\n    AggregateGroupByReducers[\"TO_LIST\"] = \"TOLIST\";\n    AggregateGroupByReducers[\"FIRST_VALUE\"] = \"FIRST_VALUE\";\n    AggregateGroupByReducers[\"RANDOM_SAMPLE\"] = \"RANDOM_SAMPLE\";\n})(AggregateGroupByReducers = exports.AggregateGroupByReducers || (exports.AggregateGroupByReducers = {}));\nfunction transformArguments(index, query, options) {\n    const args = ['FT.AGGREGATE', index, query];\n    pushAggregatehOptions(args, options);\n    return args;\n}\nexports.transformArguments = transformArguments;\nfunction pushAggregatehOptions(args, options) {\n    if (options === null || options === void 0 ? void 0 : options.VERBATIM) {\n        args.push('VERBATIM');\n    }\n    if (options === null || options === void 0 ? void 0 : options.LOAD) {\n        args.push('LOAD');\n        (0, _1.pushArgumentsWithLength)(args, () => {\n            if (Array.isArray(options.LOAD)) {\n                for (const load of options.LOAD) {\n                    pushLoadField(args, load);\n                }\n            }\n            else {\n                pushLoadField(args, options.LOAD);\n            }\n        });\n    }\n    if (options === null || options === void 0 ? void 0 : options.STEPS) {\n        for (const step of options.STEPS) {\n            switch (step.type) {\n                case AggregateSteps.GROUPBY:\n                    args.push('GROUPBY');\n                    if (!step.properties) {\n                        args.push('0');\n                    }\n                    else {\n                        (0, generic_transformers_1.pushVerdictArgument)(args, step.properties);\n                    }\n                    if (Array.isArray(step.REDUCE)) {\n                        for (const reducer of step.REDUCE) {\n                            pushGroupByReducer(args, reducer);\n                        }\n                    }\n                    else {\n                        pushGroupByReducer(args, step.REDUCE);\n                    }\n                    break;\n                case AggregateSteps.SORTBY:\n                    (0, _1.pushSortByArguments)(args, 'SORTBY', step.BY);\n                    if (step.MAX) {\n                        args.push('MAX', step.MAX.toString());\n                    }\n                    break;\n                case AggregateSteps.APPLY:\n                    args.push('APPLY', step.expression, 'AS', step.AS);\n                    break;\n                case AggregateSteps.LIMIT:\n                    args.push('LIMIT', step.from.toString(), step.size.toString());\n                    break;\n                case AggregateSteps.FILTER:\n                    args.push('FILTER', step.expression);\n                    break;\n            }\n        }\n    }\n    return args;\n}\nexports.pushAggregatehOptions = pushAggregatehOptions;\nfunction pushLoadField(args, toLoad) {\n    if (typeof toLoad === 'string') {\n        args.push(toLoad);\n    }\n    else {\n        args.push(toLoad.identifier);\n        if (toLoad.AS) {\n            args.push('AS', toLoad.AS);\n        }\n    }\n}\nfunction pushGroupByReducer(args, reducer) {\n    args.push('REDUCE', reducer.type);\n    switch (reducer.type) {\n        case AggregateGroupByReducers.COUNT:\n            args.push('0');\n            break;\n        case AggregateGroupByReducers.COUNT_DISTINCT:\n        case AggregateGroupByReducers.COUNT_DISTINCTISH:\n        case AggregateGroupByReducers.SUM:\n        case AggregateGroupByReducers.MIN:\n        case AggregateGroupByReducers.MAX:\n        case AggregateGroupByReducers.AVG:\n        case AggregateGroupByReducers.STDDEV:\n        case AggregateGroupByReducers.TOLIST:\n            args.push('1', reducer.property);\n            break;\n        case AggregateGroupByReducers.QUANTILE:\n            args.push('2', reducer.property, reducer.quantile.toString());\n            break;\n        case AggregateGroupByReducers.FIRST_VALUE: {\n            (0, _1.pushArgumentsWithLength)(args, () => {\n                args.push(reducer.property);\n                if (reducer.BY) {\n                    args.push('BY');\n                    if (typeof reducer.BY === 'string') {\n                        args.push(reducer.BY);\n                    }\n                    else {\n                        args.push(reducer.BY.property);\n                        if (reducer.BY.direction) {\n                            args.push(reducer.BY.direction);\n                        }\n                    }\n                }\n            });\n            break;\n        }\n        case AggregateGroupByReducers.RANDOM_SAMPLE:\n            args.push('2', reducer.property, reducer.sampleSize.toString());\n            break;\n    }\n    if (reducer.AS) {\n        args.push('AS', reducer.AS);\n    }\n}\nfunction transformReply(rawReply) {\n    const results = [];\n    for (let i = 1; i < rawReply.length; i++) {\n        results.push((0, generic_transformers_1.transformTuplesReply)(rawReply[i]));\n    }\n    return {\n        total: rawReply[0],\n        results\n    };\n}\nexports.transformReply = transformReply;\n"]},"metadata":{},"sourceType":"script"}