{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _RedisClusterSlots_instances, _RedisClusterSlots_options, _RedisClusterSlots_Client, _RedisClusterSlots_onError, _RedisClusterSlots_nodeByAddress, _RedisClusterSlots_slots, _RedisClusterSlots_discoverNodes, _RedisClusterSlots_runningRediscoverPromise, _RedisClusterSlots_rediscover, _RedisClusterSlots_reset, _RedisClusterSlots_clientOptionsDefaults, _RedisClusterSlots_initiateClient, _RedisClusterSlots_getNodeAddress, _RedisClusterSlots_initiateClientForNode, _RedisClusterSlots_slotClientIterator, _RedisClusterSlots_getSlotClient, _RedisClusterSlots_randomClientIterator, _RedisClusterSlots_getRandomClient, _RedisClusterSlots_destroy;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst client_1 = require(\"../client\");\n\nconst errors_1 = require(\"../errors\"); // We need to use 'require', because it's not possible with Typescript to import\n// function that are exported as 'module.exports = function`, without esModuleInterop\n// set to true.\n\n\nconst calculateSlot = require('cluster-key-slot');\n\nclass RedisClusterSlots {\n  constructor(options, onError) {\n    _RedisClusterSlots_instances.add(this);\n\n    _RedisClusterSlots_options.set(this, void 0);\n\n    _RedisClusterSlots_Client.set(this, void 0);\n\n    _RedisClusterSlots_onError.set(this, void 0);\n\n    _RedisClusterSlots_nodeByAddress.set(this, new Map());\n\n    _RedisClusterSlots_slots.set(this, []);\n\n    _RedisClusterSlots_runningRediscoverPromise.set(this, void 0);\n\n    _RedisClusterSlots_randomClientIterator.set(this, void 0);\n\n    __classPrivateFieldSet(this, _RedisClusterSlots_options, options, \"f\");\n\n    __classPrivateFieldSet(this, _RedisClusterSlots_Client, client_1.default.extend(options), \"f\");\n\n    __classPrivateFieldSet(this, _RedisClusterSlots_onError, onError, \"f\");\n  }\n\n  async connect() {\n    for (const rootNode of __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").rootNodes) {\n      if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discoverNodes).call(this, rootNode)) return;\n    }\n\n    throw new errors_1.RootNodesUnavailableError();\n  }\n\n  async rediscover(startWith) {\n    if (!__classPrivateFieldGet(this, _RedisClusterSlots_runningRediscoverPromise, \"f\")) {\n      __classPrivateFieldSet(this, _RedisClusterSlots_runningRediscoverPromise, __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_rediscover).call(this, startWith).finally(() => __classPrivateFieldSet(this, _RedisClusterSlots_runningRediscoverPromise, undefined, \"f\")), \"f\");\n    }\n\n    return __classPrivateFieldGet(this, _RedisClusterSlots_runningRediscoverPromise, \"f\");\n  }\n\n  getSlotMaster(slot) {\n    return __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\")[slot].master;\n  }\n\n  getClient(firstKey, isReadonly) {\n    if (!firstKey) {\n      return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getRandomClient).call(this);\n    }\n\n    const slot = calculateSlot(firstKey);\n\n    if (!isReadonly || !__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").useReplicas) {\n      return this.getSlotMaster(slot).client;\n    }\n\n    return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getSlotClient).call(this, slot);\n  }\n\n  getMasters() {\n    var _a;\n\n    const masters = [];\n\n    for (const node of __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").values()) {\n      if ((_a = node.client.options) === null || _a === void 0 ? void 0 : _a.readonly) continue;\n      masters.push(node);\n    }\n\n    return masters;\n  }\n\n  getNodeByAddress(address) {\n    const mappedAddress = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getNodeAddress).call(this, address);\n\n    return __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").get(mappedAddress ? `${mappedAddress.host}:${mappedAddress.port}` : address);\n  }\n\n  quit() {\n    return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_destroy).call(this, client => client.quit());\n  }\n\n  disconnect() {\n    return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_destroy).call(this, client => client.disconnect());\n  }\n\n}\n\nexports.default = RedisClusterSlots;\n_RedisClusterSlots_options = new WeakMap(), _RedisClusterSlots_Client = new WeakMap(), _RedisClusterSlots_onError = new WeakMap(), _RedisClusterSlots_nodeByAddress = new WeakMap(), _RedisClusterSlots_slots = new WeakMap(), _RedisClusterSlots_runningRediscoverPromise = new WeakMap(), _RedisClusterSlots_randomClientIterator = new WeakMap(), _RedisClusterSlots_instances = new WeakSet(), _RedisClusterSlots_discoverNodes = async function _RedisClusterSlots_discoverNodes(clientOptions) {\n  const client = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateClient).call(this, clientOptions);\n\n  await client.connect();\n\n  try {\n    await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_reset).call(this, await client.clusterNodes());\n    return true;\n  } catch (err) {\n    __classPrivateFieldGet(this, _RedisClusterSlots_onError, \"f\").call(this, err);\n\n    return false;\n  } finally {\n    if (client.isOpen) {\n      await client.disconnect();\n    }\n  }\n}, _RedisClusterSlots_rediscover = async function _RedisClusterSlots_rediscover(startWith) {\n  if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discoverNodes).call(this, startWith.options)) return;\n\n  for (const {\n    client\n  } of __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").values()) {\n    if (client === startWith) continue;\n    if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discoverNodes).call(this, client.options)) return;\n  }\n\n  throw new Error('None of the cluster nodes is available');\n}, _RedisClusterSlots_reset = async function _RedisClusterSlots_reset(masters) {\n  // Override this.#slots and add not existing clients to this.#nodeByAddress\n  const promises = [],\n        clientsInUse = new Set();\n\n  for (const master of masters) {\n    const slot = {\n      master: __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateClientForNode).call(this, master, false, clientsInUse, promises),\n      replicas: __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").useReplicas ? master.replicas.map(replica => __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateClientForNode).call(this, replica, true, clientsInUse, promises)) : [],\n      clientIterator: undefined // will be initiated in use\n\n    };\n\n    for (const {\n      from,\n      to\n    } of master.slots) {\n      for (let i = from; i <= to; i++) {\n        __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\")[i] = slot;\n      }\n    }\n  } // Remove unused clients from this.#nodeByAddress using clientsInUse\n\n\n  for (const [address, {\n    client\n  }] of __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").entries()) {\n    if (clientsInUse.has(address)) continue;\n    promises.push(client.disconnect());\n\n    __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").delete(address);\n  }\n\n  await Promise.all(promises);\n}, _RedisClusterSlots_clientOptionsDefaults = function _RedisClusterSlots_clientOptionsDefaults(options) {\n  var _a;\n\n  if (!__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults) return options;\n  return { ...__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults,\n    ...options,\n    socket: __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults.socket && (options === null || options === void 0 ? void 0 : options.socket) ? { ...__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults.socket,\n      ...options.socket\n    } : (_a = __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults.socket) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.socket\n  };\n}, _RedisClusterSlots_initiateClient = function _RedisClusterSlots_initiateClient(options) {\n  return new (__classPrivateFieldGet(this, _RedisClusterSlots_Client, \"f\"))(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_clientOptionsDefaults).call(this, options)).on('error', __classPrivateFieldGet(this, _RedisClusterSlots_onError, \"f\"));\n}, _RedisClusterSlots_getNodeAddress = function _RedisClusterSlots_getNodeAddress(address) {\n  switch (typeof __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").nodeAddressMap) {\n    case 'object':\n      return __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").nodeAddressMap[address];\n\n    case 'function':\n      return __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").nodeAddressMap(address);\n  }\n}, _RedisClusterSlots_initiateClientForNode = function _RedisClusterSlots_initiateClientForNode(nodeData, readonly, clientsInUse, promises) {\n  var _a;\n\n  const address = `${nodeData.host}:${nodeData.port}`;\n  clientsInUse.add(address);\n\n  let node = __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").get(address);\n\n  if (!node) {\n    node = {\n      id: nodeData.id,\n      client: __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateClient).call(this, {\n        socket: (_a = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getNodeAddress).call(this, address)) !== null && _a !== void 0 ? _a : {\n          host: nodeData.host,\n          port: nodeData.port\n        },\n        readonly\n      })\n    };\n    promises.push(node.client.connect());\n\n    __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").set(address, node);\n  }\n\n  return node;\n}, _RedisClusterSlots_slotClientIterator = function* _RedisClusterSlots_slotClientIterator(slotNumber) {\n  const slot = __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\")[slotNumber];\n\n  yield slot.master.client;\n\n  for (const replica of slot.replicas) {\n    yield replica.client;\n  }\n}, _RedisClusterSlots_getSlotClient = function _RedisClusterSlots_getSlotClient(slotNumber) {\n  const slot = __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\")[slotNumber];\n\n  if (!slot.clientIterator) {\n    slot.clientIterator = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_slotClientIterator).call(this, slotNumber);\n  }\n\n  const {\n    done,\n    value\n  } = slot.clientIterator.next();\n\n  if (done) {\n    slot.clientIterator = undefined;\n    return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getSlotClient).call(this, slotNumber);\n  }\n\n  return value;\n}, _RedisClusterSlots_getRandomClient = function _RedisClusterSlots_getRandomClient() {\n  if (!__classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").size) {\n    throw new Error('Cluster is not connected');\n  }\n\n  if (!__classPrivateFieldGet(this, _RedisClusterSlots_randomClientIterator, \"f\")) {\n    __classPrivateFieldSet(this, _RedisClusterSlots_randomClientIterator, __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").values(), \"f\");\n  }\n\n  const {\n    done,\n    value\n  } = __classPrivateFieldGet(this, _RedisClusterSlots_randomClientIterator, \"f\").next();\n\n  if (done) {\n    __classPrivateFieldSet(this, _RedisClusterSlots_randomClientIterator, undefined, \"f\");\n\n    return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getRandomClient).call(this);\n  }\n\n  return value.client;\n}, _RedisClusterSlots_destroy = async function _RedisClusterSlots_destroy(fn) {\n  const promises = [];\n\n  for (const {\n    client\n  } of __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").values()) {\n    promises.push(fn(client));\n  }\n\n  await Promise.all(promises);\n\n  __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").clear();\n\n  __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\").splice(0);\n};","map":{"version":3,"sources":["/home/maira/Desktop/Developer Projects/system-ping-project/node_modules/@node-redis/client/dist/lib/cluster/cluster-slots.js"],"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_RedisClusterSlots_instances","_RedisClusterSlots_options","_RedisClusterSlots_Client","_RedisClusterSlots_onError","_RedisClusterSlots_nodeByAddress","_RedisClusterSlots_slots","_RedisClusterSlots_discoverNodes","_RedisClusterSlots_runningRediscoverPromise","_RedisClusterSlots_rediscover","_RedisClusterSlots_reset","_RedisClusterSlots_clientOptionsDefaults","_RedisClusterSlots_initiateClient","_RedisClusterSlots_getNodeAddress","_RedisClusterSlots_initiateClientForNode","_RedisClusterSlots_slotClientIterator","_RedisClusterSlots_getSlotClient","_RedisClusterSlots_randomClientIterator","_RedisClusterSlots_getRandomClient","_RedisClusterSlots_destroy","Object","defineProperty","exports","client_1","require","errors_1","calculateSlot","RedisClusterSlots","constructor","options","onError","add","Map","default","extend","connect","rootNode","rootNodes","RootNodesUnavailableError","rediscover","startWith","finally","undefined","getSlotMaster","slot","master","getClient","firstKey","isReadonly","useReplicas","client","getMasters","_a","masters","node","values","readonly","push","getNodeByAddress","address","mappedAddress","host","port","quit","disconnect","WeakMap","WeakSet","clientOptions","clusterNodes","err","isOpen","Error","promises","clientsInUse","Set","replicas","map","replica","clientIterator","from","to","slots","i","entries","delete","Promise","all","defaults","socket","on","nodeAddressMap","nodeData","id","slotNumber","done","next","size","fn","clear","splice"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _RedisClusterSlots_instances, _RedisClusterSlots_options, _RedisClusterSlots_Client, _RedisClusterSlots_onError, _RedisClusterSlots_nodeByAddress, _RedisClusterSlots_slots, _RedisClusterSlots_discoverNodes, _RedisClusterSlots_runningRediscoverPromise, _RedisClusterSlots_rediscover, _RedisClusterSlots_reset, _RedisClusterSlots_clientOptionsDefaults, _RedisClusterSlots_initiateClient, _RedisClusterSlots_getNodeAddress, _RedisClusterSlots_initiateClientForNode, _RedisClusterSlots_slotClientIterator, _RedisClusterSlots_getSlotClient, _RedisClusterSlots_randomClientIterator, _RedisClusterSlots_getRandomClient, _RedisClusterSlots_destroy;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_1 = require(\"../client\");\nconst errors_1 = require(\"../errors\");\n// We need to use 'require', because it's not possible with Typescript to import\n// function that are exported as 'module.exports = function`, without esModuleInterop\n// set to true.\nconst calculateSlot = require('cluster-key-slot');\nclass RedisClusterSlots {\n    constructor(options, onError) {\n        _RedisClusterSlots_instances.add(this);\n        _RedisClusterSlots_options.set(this, void 0);\n        _RedisClusterSlots_Client.set(this, void 0);\n        _RedisClusterSlots_onError.set(this, void 0);\n        _RedisClusterSlots_nodeByAddress.set(this, new Map());\n        _RedisClusterSlots_slots.set(this, []);\n        _RedisClusterSlots_runningRediscoverPromise.set(this, void 0);\n        _RedisClusterSlots_randomClientIterator.set(this, void 0);\n        __classPrivateFieldSet(this, _RedisClusterSlots_options, options, \"f\");\n        __classPrivateFieldSet(this, _RedisClusterSlots_Client, client_1.default.extend(options), \"f\");\n        __classPrivateFieldSet(this, _RedisClusterSlots_onError, onError, \"f\");\n    }\n    async connect() {\n        for (const rootNode of __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").rootNodes) {\n            if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discoverNodes).call(this, rootNode))\n                return;\n        }\n        throw new errors_1.RootNodesUnavailableError();\n    }\n    async rediscover(startWith) {\n        if (!__classPrivateFieldGet(this, _RedisClusterSlots_runningRediscoverPromise, \"f\")) {\n            __classPrivateFieldSet(this, _RedisClusterSlots_runningRediscoverPromise, __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_rediscover).call(this, startWith)\n                .finally(() => __classPrivateFieldSet(this, _RedisClusterSlots_runningRediscoverPromise, undefined, \"f\")), \"f\");\n        }\n        return __classPrivateFieldGet(this, _RedisClusterSlots_runningRediscoverPromise, \"f\");\n    }\n    getSlotMaster(slot) {\n        return __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\")[slot].master;\n    }\n    getClient(firstKey, isReadonly) {\n        if (!firstKey) {\n            return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getRandomClient).call(this);\n        }\n        const slot = calculateSlot(firstKey);\n        if (!isReadonly || !__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").useReplicas) {\n            return this.getSlotMaster(slot).client;\n        }\n        return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getSlotClient).call(this, slot);\n    }\n    getMasters() {\n        var _a;\n        const masters = [];\n        for (const node of __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").values()) {\n            if ((_a = node.client.options) === null || _a === void 0 ? void 0 : _a.readonly)\n                continue;\n            masters.push(node);\n        }\n        return masters;\n    }\n    getNodeByAddress(address) {\n        const mappedAddress = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getNodeAddress).call(this, address);\n        return __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").get(mappedAddress ? `${mappedAddress.host}:${mappedAddress.port}` : address);\n    }\n    quit() {\n        return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_destroy).call(this, client => client.quit());\n    }\n    disconnect() {\n        return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_destroy).call(this, client => client.disconnect());\n    }\n}\nexports.default = RedisClusterSlots;\n_RedisClusterSlots_options = new WeakMap(), _RedisClusterSlots_Client = new WeakMap(), _RedisClusterSlots_onError = new WeakMap(), _RedisClusterSlots_nodeByAddress = new WeakMap(), _RedisClusterSlots_slots = new WeakMap(), _RedisClusterSlots_runningRediscoverPromise = new WeakMap(), _RedisClusterSlots_randomClientIterator = new WeakMap(), _RedisClusterSlots_instances = new WeakSet(), _RedisClusterSlots_discoverNodes = async function _RedisClusterSlots_discoverNodes(clientOptions) {\n    const client = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateClient).call(this, clientOptions);\n    await client.connect();\n    try {\n        await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_reset).call(this, await client.clusterNodes());\n        return true;\n    }\n    catch (err) {\n        __classPrivateFieldGet(this, _RedisClusterSlots_onError, \"f\").call(this, err);\n        return false;\n    }\n    finally {\n        if (client.isOpen) {\n            await client.disconnect();\n        }\n    }\n}, _RedisClusterSlots_rediscover = async function _RedisClusterSlots_rediscover(startWith) {\n    if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discoverNodes).call(this, startWith.options))\n        return;\n    for (const { client } of __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").values()) {\n        if (client === startWith)\n            continue;\n        if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discoverNodes).call(this, client.options))\n            return;\n    }\n    throw new Error('None of the cluster nodes is available');\n}, _RedisClusterSlots_reset = async function _RedisClusterSlots_reset(masters) {\n    // Override this.#slots and add not existing clients to this.#nodeByAddress\n    const promises = [], clientsInUse = new Set();\n    for (const master of masters) {\n        const slot = {\n            master: __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateClientForNode).call(this, master, false, clientsInUse, promises),\n            replicas: __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").useReplicas ?\n                master.replicas.map(replica => __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateClientForNode).call(this, replica, true, clientsInUse, promises)) :\n                [],\n            clientIterator: undefined // will be initiated in use\n        };\n        for (const { from, to } of master.slots) {\n            for (let i = from; i <= to; i++) {\n                __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\")[i] = slot;\n            }\n        }\n    }\n    // Remove unused clients from this.#nodeByAddress using clientsInUse\n    for (const [address, { client }] of __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").entries()) {\n        if (clientsInUse.has(address))\n            continue;\n        promises.push(client.disconnect());\n        __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").delete(address);\n    }\n    await Promise.all(promises);\n}, _RedisClusterSlots_clientOptionsDefaults = function _RedisClusterSlots_clientOptionsDefaults(options) {\n    var _a;\n    if (!__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults)\n        return options;\n    return {\n        ...__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults,\n        ...options,\n        socket: __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults.socket && (options === null || options === void 0 ? void 0 : options.socket) ? {\n            ...__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults.socket,\n            ...options.socket\n        } : (_a = __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults.socket) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.socket\n    };\n}, _RedisClusterSlots_initiateClient = function _RedisClusterSlots_initiateClient(options) {\n    return new (__classPrivateFieldGet(this, _RedisClusterSlots_Client, \"f\"))(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_clientOptionsDefaults).call(this, options))\n        .on('error', __classPrivateFieldGet(this, _RedisClusterSlots_onError, \"f\"));\n}, _RedisClusterSlots_getNodeAddress = function _RedisClusterSlots_getNodeAddress(address) {\n    switch (typeof __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").nodeAddressMap) {\n        case 'object':\n            return __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").nodeAddressMap[address];\n        case 'function':\n            return __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").nodeAddressMap(address);\n    }\n}, _RedisClusterSlots_initiateClientForNode = function _RedisClusterSlots_initiateClientForNode(nodeData, readonly, clientsInUse, promises) {\n    var _a;\n    const address = `${nodeData.host}:${nodeData.port}`;\n    clientsInUse.add(address);\n    let node = __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").get(address);\n    if (!node) {\n        node = {\n            id: nodeData.id,\n            client: __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateClient).call(this, {\n                socket: (_a = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getNodeAddress).call(this, address)) !== null && _a !== void 0 ? _a : {\n                    host: nodeData.host,\n                    port: nodeData.port\n                },\n                readonly\n            })\n        };\n        promises.push(node.client.connect());\n        __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").set(address, node);\n    }\n    return node;\n}, _RedisClusterSlots_slotClientIterator = function* _RedisClusterSlots_slotClientIterator(slotNumber) {\n    const slot = __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\")[slotNumber];\n    yield slot.master.client;\n    for (const replica of slot.replicas) {\n        yield replica.client;\n    }\n}, _RedisClusterSlots_getSlotClient = function _RedisClusterSlots_getSlotClient(slotNumber) {\n    const slot = __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\")[slotNumber];\n    if (!slot.clientIterator) {\n        slot.clientIterator = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_slotClientIterator).call(this, slotNumber);\n    }\n    const { done, value } = slot.clientIterator.next();\n    if (done) {\n        slot.clientIterator = undefined;\n        return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getSlotClient).call(this, slotNumber);\n    }\n    return value;\n}, _RedisClusterSlots_getRandomClient = function _RedisClusterSlots_getRandomClient() {\n    if (!__classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").size) {\n        throw new Error('Cluster is not connected');\n    }\n    if (!__classPrivateFieldGet(this, _RedisClusterSlots_randomClientIterator, \"f\")) {\n        __classPrivateFieldSet(this, _RedisClusterSlots_randomClientIterator, __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").values(), \"f\");\n    }\n    const { done, value } = __classPrivateFieldGet(this, _RedisClusterSlots_randomClientIterator, \"f\").next();\n    if (done) {\n        __classPrivateFieldSet(this, _RedisClusterSlots_randomClientIterator, undefined, \"f\");\n        return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getRandomClient).call(this);\n    }\n    return value.client;\n}, _RedisClusterSlots_destroy = async function _RedisClusterSlots_destroy(fn) {\n    const promises = [];\n    for (const { client } of __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").values()) {\n        promises.push(fn(client));\n    }\n    await Promise.all(promises);\n    __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").clear();\n    __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\").splice(0);\n};\n"]},"metadata":{},"sourceType":"script"}