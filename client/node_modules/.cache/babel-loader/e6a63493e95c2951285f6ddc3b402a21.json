{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformArguments = exports.FIRST_KEY_INDEX = void 0;\nexports.FIRST_KEY_INDEX = 1;\n\nfunction transformArguments(key, items) {\n  const args = ['CMS.INCRBY', key];\n\n  if (Array.isArray(items)) {\n    for (const item of items) {\n      pushIncrByItem(args, item);\n    }\n  } else {\n    pushIncrByItem(args, items);\n  }\n\n  return args;\n}\n\nexports.transformArguments = transformArguments;\n\nfunction pushIncrByItem(args, _ref) {\n  let {\n    item,\n    incrementBy\n  } = _ref;\n  args.push(item, incrementBy.toString());\n}","map":{"version":3,"sources":["/home/maira/Desktop/Developer Projects/system-ping-project/node_modules/@node-redis/bloom/dist/commands/count-min-sketch/INCRBY.js"],"names":["Object","defineProperty","exports","value","transformArguments","FIRST_KEY_INDEX","key","items","args","Array","isArray","item","pushIncrByItem","incrementBy","push","toString"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6BF,OAAO,CAACG,eAAR,GAA0B,KAAK,CAA5D;AACAH,OAAO,CAACG,eAAR,GAA0B,CAA1B;;AACA,SAASD,kBAAT,CAA4BE,GAA5B,EAAiCC,KAAjC,EAAwC;AACpC,QAAMC,IAAI,GAAG,CAAC,YAAD,EAAeF,GAAf,CAAb;;AACA,MAAIG,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACtB,SAAK,MAAMI,IAAX,IAAmBJ,KAAnB,EAA0B;AACtBK,MAAAA,cAAc,CAACJ,IAAD,EAAOG,IAAP,CAAd;AACH;AACJ,GAJD,MAKK;AACDC,IAAAA,cAAc,CAACJ,IAAD,EAAOD,KAAP,CAAd;AACH;;AACD,SAAOC,IAAP;AACH;;AACDN,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B;;AACA,SAASQ,cAAT,CAAwBJ,IAAxB,QAAqD;AAAA,MAAvB;AAAEG,IAAAA,IAAF;AAAQE,IAAAA;AAAR,GAAuB;AACjDL,EAAAA,IAAI,CAACM,IAAL,CAAUH,IAAV,EAAgBE,WAAW,CAACE,QAAZ,EAAhB;AACH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transformArguments = exports.FIRST_KEY_INDEX = void 0;\nexports.FIRST_KEY_INDEX = 1;\nfunction transformArguments(key, items) {\n    const args = ['CMS.INCRBY', key];\n    if (Array.isArray(items)) {\n        for (const item of items) {\n            pushIncrByItem(args, item);\n        }\n    }\n    else {\n        pushIncrByItem(args, items);\n    }\n    return args;\n}\nexports.transformArguments = transformArguments;\nfunction pushIncrByItem(args, { item, incrementBy }) {\n    args.push(item, incrementBy.toString());\n}\n"]},"metadata":{},"sourceType":"script"}