{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _RedisSocket_instances, _a, _RedisSocket_initiateOptions, _RedisSocket_defaultReconnectStrategy, _RedisSocket_isTlsSocket, _RedisSocket_initiator, _RedisSocket_options, _RedisSocket_socket, _RedisSocket_isOpen, _RedisSocket_isReady, _RedisSocket_writableNeedDrain, _RedisSocket_connect, _RedisSocket_retryConnection, _RedisSocket_createSocket, _RedisSocket_createNetSocket, _RedisSocket_createTlsSocket, _RedisSocket_onSocketError, _RedisSocket_isCorked;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst events_1 = require(\"events\");\n\nconst net = require(\"net\");\n\nconst tls = require(\"tls\");\n\nconst commander_1 = require(\"../commander\");\n\nconst errors_1 = require(\"../errors\");\n\nconst utils_1 = require(\"../utils\");\n\nclass RedisSocket extends events_1.EventEmitter {\n  constructor(initiator, options) {\n    super();\n\n    _RedisSocket_instances.add(this);\n\n    _RedisSocket_initiator.set(this, void 0);\n\n    _RedisSocket_options.set(this, void 0);\n\n    _RedisSocket_socket.set(this, void 0);\n\n    _RedisSocket_isOpen.set(this, false);\n\n    _RedisSocket_isReady.set(this, false); // `writable.writableNeedDrain` was added in v15.2.0 and therefore can't be used\n    // https://nodejs.org/api/stream.html#stream_writable_writableneeddrain\n\n\n    _RedisSocket_writableNeedDrain.set(this, false);\n\n    _RedisSocket_isCorked.set(this, false);\n\n    __classPrivateFieldSet(this, _RedisSocket_initiator, initiator, \"f\");\n\n    __classPrivateFieldSet(this, _RedisSocket_options, __classPrivateFieldGet(RedisSocket, _a, \"m\", _RedisSocket_initiateOptions).call(RedisSocket, options), \"f\");\n  }\n\n  get isOpen() {\n    return __classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\");\n  }\n\n  get isReady() {\n    return __classPrivateFieldGet(this, _RedisSocket_isReady, \"f\");\n  }\n\n  get writableNeedDrain() {\n    return __classPrivateFieldGet(this, _RedisSocket_writableNeedDrain, \"f\");\n  }\n\n  async connect() {\n    if (__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\")) {\n      throw new Error('Socket already opened');\n    }\n\n    return __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_connect).call(this);\n  }\n\n  writeCommand(args) {\n    if (!__classPrivateFieldGet(this, _RedisSocket_socket, \"f\")) {\n      throw new errors_1.ClientClosedError();\n    }\n\n    for (const toWrite of (0, commander_1.encodeCommand)(args)) {\n      __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, !__classPrivateFieldGet(this, _RedisSocket_socket, \"f\").write(toWrite), \"f\");\n    }\n  }\n\n  disconnect() {\n    if (!__classPrivateFieldGet(this, _RedisSocket_socket, \"f\")) {\n      throw new errors_1.ClientClosedError();\n    } else {\n      __classPrivateFieldSet(this, _RedisSocket_isOpen, __classPrivateFieldSet(this, _RedisSocket_isReady, false, \"f\"), \"f\");\n    }\n\n    __classPrivateFieldGet(this, _RedisSocket_socket, \"f\").destroy();\n\n    __classPrivateFieldSet(this, _RedisSocket_socket, undefined, \"f\");\n\n    this.emit('end');\n  }\n\n  async quit(fn) {\n    if (!__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\")) {\n      throw new errors_1.ClientClosedError();\n    }\n\n    __classPrivateFieldSet(this, _RedisSocket_isOpen, false, \"f\");\n\n    await fn();\n    this.disconnect();\n  }\n\n  cork() {\n    if (!__classPrivateFieldGet(this, _RedisSocket_socket, \"f\") || __classPrivateFieldGet(this, _RedisSocket_isCorked, \"f\")) {\n      return;\n    }\n\n    __classPrivateFieldGet(this, _RedisSocket_socket, \"f\").cork();\n\n    __classPrivateFieldSet(this, _RedisSocket_isCorked, true, \"f\");\n\n    queueMicrotask(() => {\n      var _b;\n\n      (_b = __classPrivateFieldGet(this, _RedisSocket_socket, \"f\")) === null || _b === void 0 ? void 0 : _b.uncork();\n\n      __classPrivateFieldSet(this, _RedisSocket_isCorked, false, \"f\");\n    });\n  }\n\n}\n\nexports.default = RedisSocket;\n_a = RedisSocket, _RedisSocket_initiator = new WeakMap(), _RedisSocket_options = new WeakMap(), _RedisSocket_socket = new WeakMap(), _RedisSocket_isOpen = new WeakMap(), _RedisSocket_isReady = new WeakMap(), _RedisSocket_writableNeedDrain = new WeakMap(), _RedisSocket_isCorked = new WeakMap(), _RedisSocket_instances = new WeakSet(), _RedisSocket_initiateOptions = function _RedisSocket_initiateOptions(options) {\n  var _b, _c, _d, _e, _f;\n\n  var _g, _h;\n\n  options !== null && options !== void 0 ? options : options = {};\n\n  if (!options.path) {\n    (_b = (_g = options).port) !== null && _b !== void 0 ? _b : _g.port = 6379;\n    (_c = (_h = options).host) !== null && _c !== void 0 ? _c : _h.host = 'localhost';\n  }\n\n  (_d = options.connectTimeout) !== null && _d !== void 0 ? _d : options.connectTimeout = 5000;\n  (_e = options.keepAlive) !== null && _e !== void 0 ? _e : options.keepAlive = 5000;\n  (_f = options.noDelay) !== null && _f !== void 0 ? _f : options.noDelay = true;\n  return options;\n}, _RedisSocket_defaultReconnectStrategy = function _RedisSocket_defaultReconnectStrategy(retries) {\n  return Math.min(retries * 50, 500);\n}, _RedisSocket_isTlsSocket = function _RedisSocket_isTlsSocket(options) {\n  return options.tls === true;\n}, _RedisSocket_connect = async function _RedisSocket_connect(hadError) {\n  try {\n    __classPrivateFieldSet(this, _RedisSocket_isOpen, true, \"f\");\n\n    __classPrivateFieldSet(this, _RedisSocket_socket, await __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_retryConnection).call(this, 0, hadError), \"f\");\n\n    __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, false, \"f\");\n  } catch (err) {\n    __classPrivateFieldSet(this, _RedisSocket_isOpen, false, \"f\");\n\n    this.emit('error', err);\n    this.emit('end');\n    throw err;\n  }\n\n  if (!__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\")) {\n    this.disconnect();\n    return;\n  }\n\n  this.emit('connect');\n\n  if (__classPrivateFieldGet(this, _RedisSocket_initiator, \"f\")) {\n    try {\n      await __classPrivateFieldGet(this, _RedisSocket_initiator, \"f\").call(this);\n    } catch (err) {\n      __classPrivateFieldGet(this, _RedisSocket_socket, \"f\").destroy();\n\n      __classPrivateFieldSet(this, _RedisSocket_socket, undefined, \"f\");\n\n      if (err instanceof errors_1.AuthError) {\n        __classPrivateFieldSet(this, _RedisSocket_isOpen, false, \"f\");\n      }\n\n      throw err;\n    }\n\n    if (!__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\")) return;\n  }\n\n  __classPrivateFieldSet(this, _RedisSocket_isReady, true, \"f\");\n\n  this.emit('ready');\n}, _RedisSocket_retryConnection = async function _RedisSocket_retryConnection(retries, hadError) {\n  var _b, _c;\n\n  if (retries > 0 || hadError) {\n    this.emit('reconnecting');\n  }\n\n  try {\n    return await __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_createSocket).call(this);\n  } catch (err) {\n    if (!__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\")) {\n      throw err;\n    }\n\n    const retryIn = ((_c = (_b = __classPrivateFieldGet(this, _RedisSocket_options, \"f\")) === null || _b === void 0 ? void 0 : _b.reconnectStrategy) !== null && _c !== void 0 ? _c : __classPrivateFieldGet(RedisSocket, _a, \"m\", _RedisSocket_defaultReconnectStrategy))(retries);\n\n    if (retryIn instanceof Error) {\n      throw new errors_1.ReconnectStrategyError(retryIn, err);\n    }\n\n    this.emit('error', err);\n    await (0, utils_1.promiseTimeout)(retryIn);\n    return __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_retryConnection).call(this, retries + 1);\n  }\n}, _RedisSocket_createSocket = function _RedisSocket_createSocket() {\n  return new Promise((resolve, reject) => {\n    const {\n      connectEvent,\n      socket\n    } = __classPrivateFieldGet(RedisSocket, _a, \"m\", _RedisSocket_isTlsSocket).call(RedisSocket, __classPrivateFieldGet(this, _RedisSocket_options, \"f\")) ? __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_createTlsSocket).call(this) : __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_createNetSocket).call(this);\n\n    if (__classPrivateFieldGet(this, _RedisSocket_options, \"f\").connectTimeout) {\n      socket.setTimeout(__classPrivateFieldGet(this, _RedisSocket_options, \"f\").connectTimeout, () => socket.destroy(new errors_1.ConnectionTimeoutError()));\n    }\n\n    socket.setNoDelay(__classPrivateFieldGet(this, _RedisSocket_options, \"f\").noDelay).setKeepAlive(__classPrivateFieldGet(this, _RedisSocket_options, \"f\").keepAlive !== false, __classPrivateFieldGet(this, _RedisSocket_options, \"f\").keepAlive || 0).once('error', reject).once(connectEvent, () => {\n      socket.setTimeout(0).off('error', reject).once('error', err => __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_onSocketError).call(this, err)).once('close', hadError => {\n        if (!hadError && __classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\") && __classPrivateFieldGet(this, _RedisSocket_socket, \"f\") === socket) {\n          __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_onSocketError).call(this, new errors_1.SocketClosedUnexpectedlyError());\n        }\n      }).on('drain', () => {\n        __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, false, \"f\");\n\n        this.emit('drain');\n      }).on('data', data => this.emit('data', data));\n      resolve(socket);\n    });\n  });\n}, _RedisSocket_createNetSocket = function _RedisSocket_createNetSocket() {\n  return {\n    connectEvent: 'connect',\n    socket: net.connect(__classPrivateFieldGet(this, _RedisSocket_options, \"f\")) // TODO\n\n  };\n}, _RedisSocket_createTlsSocket = function _RedisSocket_createTlsSocket() {\n  return {\n    connectEvent: 'secureConnect',\n    socket: tls.connect(__classPrivateFieldGet(this, _RedisSocket_options, \"f\")) // TODO\n\n  };\n}, _RedisSocket_onSocketError = function _RedisSocket_onSocketError(err) {\n  __classPrivateFieldSet(this, _RedisSocket_isReady, false, \"f\");\n\n  this.emit('error', err);\n\n  __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_connect).call(this, true).catch(() => {// the error was already emitted, silently ignore it\n  });\n};","map":{"version":3,"sources":["/home/maira/Desktop/Developer Projects/system-ping-project/node_modules/@node-redis/client/dist/lib/client/socket.js"],"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_RedisSocket_instances","_a","_RedisSocket_initiateOptions","_RedisSocket_defaultReconnectStrategy","_RedisSocket_isTlsSocket","_RedisSocket_initiator","_RedisSocket_options","_RedisSocket_socket","_RedisSocket_isOpen","_RedisSocket_isReady","_RedisSocket_writableNeedDrain","_RedisSocket_connect","_RedisSocket_retryConnection","_RedisSocket_createSocket","_RedisSocket_createNetSocket","_RedisSocket_createTlsSocket","_RedisSocket_onSocketError","_RedisSocket_isCorked","Object","defineProperty","exports","events_1","require","net","tls","commander_1","errors_1","utils_1","RedisSocket","EventEmitter","constructor","initiator","options","add","isOpen","isReady","writableNeedDrain","connect","Error","writeCommand","args","ClientClosedError","toWrite","encodeCommand","write","disconnect","destroy","undefined","emit","quit","fn","cork","queueMicrotask","_b","uncork","default","WeakMap","WeakSet","_c","_d","_e","_f","_g","_h","path","port","host","connectTimeout","keepAlive","noDelay","retries","Math","min","hadError","err","AuthError","retryIn","reconnectStrategy","ReconnectStrategyError","promiseTimeout","Promise","resolve","reject","connectEvent","socket","setTimeout","ConnectionTimeoutError","setNoDelay","setKeepAlive","once","off","SocketClosedUnexpectedlyError","on","data","catch"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _RedisSocket_instances, _a, _RedisSocket_initiateOptions, _RedisSocket_defaultReconnectStrategy, _RedisSocket_isTlsSocket, _RedisSocket_initiator, _RedisSocket_options, _RedisSocket_socket, _RedisSocket_isOpen, _RedisSocket_isReady, _RedisSocket_writableNeedDrain, _RedisSocket_connect, _RedisSocket_retryConnection, _RedisSocket_createSocket, _RedisSocket_createNetSocket, _RedisSocket_createTlsSocket, _RedisSocket_onSocketError, _RedisSocket_isCorked;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nconst net = require(\"net\");\nconst tls = require(\"tls\");\nconst commander_1 = require(\"../commander\");\nconst errors_1 = require(\"../errors\");\nconst utils_1 = require(\"../utils\");\nclass RedisSocket extends events_1.EventEmitter {\n    constructor(initiator, options) {\n        super();\n        _RedisSocket_instances.add(this);\n        _RedisSocket_initiator.set(this, void 0);\n        _RedisSocket_options.set(this, void 0);\n        _RedisSocket_socket.set(this, void 0);\n        _RedisSocket_isOpen.set(this, false);\n        _RedisSocket_isReady.set(this, false);\n        // `writable.writableNeedDrain` was added in v15.2.0 and therefore can't be used\n        // https://nodejs.org/api/stream.html#stream_writable_writableneeddrain\n        _RedisSocket_writableNeedDrain.set(this, false);\n        _RedisSocket_isCorked.set(this, false);\n        __classPrivateFieldSet(this, _RedisSocket_initiator, initiator, \"f\");\n        __classPrivateFieldSet(this, _RedisSocket_options, __classPrivateFieldGet(RedisSocket, _a, \"m\", _RedisSocket_initiateOptions).call(RedisSocket, options), \"f\");\n    }\n    get isOpen() {\n        return __classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\");\n    }\n    get isReady() {\n        return __classPrivateFieldGet(this, _RedisSocket_isReady, \"f\");\n    }\n    get writableNeedDrain() {\n        return __classPrivateFieldGet(this, _RedisSocket_writableNeedDrain, \"f\");\n    }\n    async connect() {\n        if (__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\")) {\n            throw new Error('Socket already opened');\n        }\n        return __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_connect).call(this);\n    }\n    writeCommand(args) {\n        if (!__classPrivateFieldGet(this, _RedisSocket_socket, \"f\")) {\n            throw new errors_1.ClientClosedError();\n        }\n        for (const toWrite of (0, commander_1.encodeCommand)(args)) {\n            __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, !__classPrivateFieldGet(this, _RedisSocket_socket, \"f\").write(toWrite), \"f\");\n        }\n    }\n    disconnect() {\n        if (!__classPrivateFieldGet(this, _RedisSocket_socket, \"f\")) {\n            throw new errors_1.ClientClosedError();\n        }\n        else {\n            __classPrivateFieldSet(this, _RedisSocket_isOpen, __classPrivateFieldSet(this, _RedisSocket_isReady, false, \"f\"), \"f\");\n        }\n        __classPrivateFieldGet(this, _RedisSocket_socket, \"f\").destroy();\n        __classPrivateFieldSet(this, _RedisSocket_socket, undefined, \"f\");\n        this.emit('end');\n    }\n    async quit(fn) {\n        if (!__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\")) {\n            throw new errors_1.ClientClosedError();\n        }\n        __classPrivateFieldSet(this, _RedisSocket_isOpen, false, \"f\");\n        await fn();\n        this.disconnect();\n    }\n    cork() {\n        if (!__classPrivateFieldGet(this, _RedisSocket_socket, \"f\") || __classPrivateFieldGet(this, _RedisSocket_isCorked, \"f\")) {\n            return;\n        }\n        __classPrivateFieldGet(this, _RedisSocket_socket, \"f\").cork();\n        __classPrivateFieldSet(this, _RedisSocket_isCorked, true, \"f\");\n        queueMicrotask(() => {\n            var _b;\n            (_b = __classPrivateFieldGet(this, _RedisSocket_socket, \"f\")) === null || _b === void 0 ? void 0 : _b.uncork();\n            __classPrivateFieldSet(this, _RedisSocket_isCorked, false, \"f\");\n        });\n    }\n}\nexports.default = RedisSocket;\n_a = RedisSocket, _RedisSocket_initiator = new WeakMap(), _RedisSocket_options = new WeakMap(), _RedisSocket_socket = new WeakMap(), _RedisSocket_isOpen = new WeakMap(), _RedisSocket_isReady = new WeakMap(), _RedisSocket_writableNeedDrain = new WeakMap(), _RedisSocket_isCorked = new WeakMap(), _RedisSocket_instances = new WeakSet(), _RedisSocket_initiateOptions = function _RedisSocket_initiateOptions(options) {\n    var _b, _c, _d, _e, _f;\n    var _g, _h;\n    options !== null && options !== void 0 ? options : (options = {});\n    if (!options.path) {\n        (_b = (_g = options).port) !== null && _b !== void 0 ? _b : (_g.port = 6379);\n        (_c = (_h = options).host) !== null && _c !== void 0 ? _c : (_h.host = 'localhost');\n    }\n    (_d = options.connectTimeout) !== null && _d !== void 0 ? _d : (options.connectTimeout = 5000);\n    (_e = options.keepAlive) !== null && _e !== void 0 ? _e : (options.keepAlive = 5000);\n    (_f = options.noDelay) !== null && _f !== void 0 ? _f : (options.noDelay = true);\n    return options;\n}, _RedisSocket_defaultReconnectStrategy = function _RedisSocket_defaultReconnectStrategy(retries) {\n    return Math.min(retries * 50, 500);\n}, _RedisSocket_isTlsSocket = function _RedisSocket_isTlsSocket(options) {\n    return options.tls === true;\n}, _RedisSocket_connect = async function _RedisSocket_connect(hadError) {\n    try {\n        __classPrivateFieldSet(this, _RedisSocket_isOpen, true, \"f\");\n        __classPrivateFieldSet(this, _RedisSocket_socket, await __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_retryConnection).call(this, 0, hadError), \"f\");\n        __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, false, \"f\");\n    }\n    catch (err) {\n        __classPrivateFieldSet(this, _RedisSocket_isOpen, false, \"f\");\n        this.emit('error', err);\n        this.emit('end');\n        throw err;\n    }\n    if (!__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\")) {\n        this.disconnect();\n        return;\n    }\n    this.emit('connect');\n    if (__classPrivateFieldGet(this, _RedisSocket_initiator, \"f\")) {\n        try {\n            await __classPrivateFieldGet(this, _RedisSocket_initiator, \"f\").call(this);\n        }\n        catch (err) {\n            __classPrivateFieldGet(this, _RedisSocket_socket, \"f\").destroy();\n            __classPrivateFieldSet(this, _RedisSocket_socket, undefined, \"f\");\n            if (err instanceof errors_1.AuthError) {\n                __classPrivateFieldSet(this, _RedisSocket_isOpen, false, \"f\");\n            }\n            throw err;\n        }\n        if (!__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\"))\n            return;\n    }\n    __classPrivateFieldSet(this, _RedisSocket_isReady, true, \"f\");\n    this.emit('ready');\n}, _RedisSocket_retryConnection = async function _RedisSocket_retryConnection(retries, hadError) {\n    var _b, _c;\n    if (retries > 0 || hadError) {\n        this.emit('reconnecting');\n    }\n    try {\n        return await __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_createSocket).call(this);\n    }\n    catch (err) {\n        if (!__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\")) {\n            throw err;\n        }\n        const retryIn = ((_c = (_b = __classPrivateFieldGet(this, _RedisSocket_options, \"f\")) === null || _b === void 0 ? void 0 : _b.reconnectStrategy) !== null && _c !== void 0 ? _c : __classPrivateFieldGet(RedisSocket, _a, \"m\", _RedisSocket_defaultReconnectStrategy))(retries);\n        if (retryIn instanceof Error) {\n            throw new errors_1.ReconnectStrategyError(retryIn, err);\n        }\n        this.emit('error', err);\n        await (0, utils_1.promiseTimeout)(retryIn);\n        return __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_retryConnection).call(this, retries + 1);\n    }\n}, _RedisSocket_createSocket = function _RedisSocket_createSocket() {\n    return new Promise((resolve, reject) => {\n        const { connectEvent, socket } = __classPrivateFieldGet(RedisSocket, _a, \"m\", _RedisSocket_isTlsSocket).call(RedisSocket, __classPrivateFieldGet(this, _RedisSocket_options, \"f\")) ?\n            __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_createTlsSocket).call(this) :\n            __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_createNetSocket).call(this);\n        if (__classPrivateFieldGet(this, _RedisSocket_options, \"f\").connectTimeout) {\n            socket.setTimeout(__classPrivateFieldGet(this, _RedisSocket_options, \"f\").connectTimeout, () => socket.destroy(new errors_1.ConnectionTimeoutError()));\n        }\n        socket\n            .setNoDelay(__classPrivateFieldGet(this, _RedisSocket_options, \"f\").noDelay)\n            .setKeepAlive(__classPrivateFieldGet(this, _RedisSocket_options, \"f\").keepAlive !== false, __classPrivateFieldGet(this, _RedisSocket_options, \"f\").keepAlive || 0)\n            .once('error', reject)\n            .once(connectEvent, () => {\n            socket\n                .setTimeout(0)\n                .off('error', reject)\n                .once('error', (err) => __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_onSocketError).call(this, err))\n                .once('close', hadError => {\n                if (!hadError && __classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\") && __classPrivateFieldGet(this, _RedisSocket_socket, \"f\") === socket) {\n                    __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_onSocketError).call(this, new errors_1.SocketClosedUnexpectedlyError());\n                }\n            })\n                .on('drain', () => {\n                __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, false, \"f\");\n                this.emit('drain');\n            })\n                .on('data', (data) => this.emit('data', data));\n            resolve(socket);\n        });\n    });\n}, _RedisSocket_createNetSocket = function _RedisSocket_createNetSocket() {\n    return {\n        connectEvent: 'connect',\n        socket: net.connect(__classPrivateFieldGet(this, _RedisSocket_options, \"f\")) // TODO\n    };\n}, _RedisSocket_createTlsSocket = function _RedisSocket_createTlsSocket() {\n    return {\n        connectEvent: 'secureConnect',\n        socket: tls.connect(__classPrivateFieldGet(this, _RedisSocket_options, \"f\")) // TODO\n    };\n}, _RedisSocket_onSocketError = function _RedisSocket_onSocketError(err) {\n    __classPrivateFieldSet(this, _RedisSocket_isReady, false, \"f\");\n    this.emit('error', err);\n    __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_connect).call(this, true).catch(() => {\n        // the error was already emitted, silently ignore it\n    });\n};\n"]},"metadata":{},"sourceType":"script"}