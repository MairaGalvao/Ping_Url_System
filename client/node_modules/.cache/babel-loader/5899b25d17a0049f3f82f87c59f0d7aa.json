{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar _RedisClient_instances, _RedisClient_options, _RedisClient_socket, _RedisClient_queue, _RedisClient_isolationPool, _RedisClient_v4, _RedisClient_selectedDB, _RedisClient_initiateOptions, _RedisClient_initiateSocket, _RedisClient_initiateQueue, _RedisClient_legacyMode, _RedisClient_defineLegacyCommand, _RedisClient_sendCommand, _RedisClient_subscribe, _RedisClient_unsubscribe, _RedisClient_tick, _RedisClient_destroyIsolationPool;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst commands_1 = require(\"./commands\");\n\nconst socket_1 = require(\"./socket\");\n\nconst commands_queue_1 = require(\"./commands-queue\");\n\nconst multi_command_1 = require(\"./multi-command\");\n\nconst events_1 = require(\"events\");\n\nconst command_options_1 = require(\"../command-options\");\n\nconst commander_1 = require(\"../commander\");\n\nconst generic_pool_1 = require(\"generic-pool\");\n\nconst errors_1 = require(\"../errors\");\n\nconst url_1 = require(\"url\");\n\nclass RedisClient extends events_1.EventEmitter {\n  constructor(options) {\n    super();\n\n    _RedisClient_instances.add(this);\n\n    Object.defineProperty(this, \"commandOptions\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: RedisClient.commandOptions\n    });\n\n    _RedisClient_options.set(this, void 0);\n\n    _RedisClient_socket.set(this, void 0);\n\n    _RedisClient_queue.set(this, void 0);\n\n    _RedisClient_isolationPool.set(this, void 0);\n\n    _RedisClient_v4.set(this, {});\n\n    _RedisClient_selectedDB.set(this, 0);\n\n    Object.defineProperty(this, \"select\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.SELECT\n    });\n    Object.defineProperty(this, \"subscribe\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.SUBSCRIBE\n    });\n    Object.defineProperty(this, \"pSubscribe\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.PSUBSCRIBE\n    });\n    Object.defineProperty(this, \"unsubscribe\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.UNSUBSCRIBE\n    });\n    Object.defineProperty(this, \"pUnsubscribe\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.PUNSUBSCRIBE\n    });\n    Object.defineProperty(this, \"quit\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.QUIT\n    });\n\n    __classPrivateFieldSet(this, _RedisClient_options, __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_initiateOptions).call(this, options), \"f\");\n\n    __classPrivateFieldSet(this, _RedisClient_socket, __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_initiateSocket).call(this), \"f\");\n\n    __classPrivateFieldSet(this, _RedisClient_queue, __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_initiateQueue).call(this), \"f\");\n\n    __classPrivateFieldSet(this, _RedisClient_isolationPool, (0, generic_pool_1.createPool)({\n      create: async () => {\n        const duplicate = this.duplicate({\n          isolationPoolOptions: undefined\n        });\n        await duplicate.connect();\n        return duplicate;\n      },\n      destroy: client => client.disconnect()\n    }, options === null || options === void 0 ? void 0 : options.isolationPoolOptions), \"f\");\n\n    __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_legacyMode).call(this);\n  }\n\n  static commandOptions(options) {\n    return (0, command_options_1.commandOptions)(options);\n  }\n\n  static extend(plugins) {\n    const Client = (0, commander_1.extendWithModulesAndScripts)({\n      BaseClass: RedisClient,\n      modules: plugins === null || plugins === void 0 ? void 0 : plugins.modules,\n      modulesCommandsExecutor: RedisClient.prototype.commandsExecutor,\n      scripts: plugins === null || plugins === void 0 ? void 0 : plugins.scripts,\n      scriptsExecutor: RedisClient.prototype.scriptsExecutor\n    });\n\n    if (Client !== RedisClient) {\n      Client.prototype.Multi = multi_command_1.default.extend(plugins);\n    }\n\n    return Client;\n  }\n\n  static create(options) {\n    return new (RedisClient.extend(options))(options);\n  }\n\n  static parseURL(url) {\n    // https://www.iana.org/assignments/uri-schemes/prov/redis\n    const {\n      hostname,\n      port,\n      protocol,\n      username,\n      password,\n      pathname\n    } = new url_1.URL(url),\n          parsed = {\n      socket: {\n        host: hostname\n      }\n    };\n\n    if (protocol === 'rediss:') {\n      parsed.socket.tls = true;\n    } else if (protocol !== 'redis:') {\n      throw new TypeError('Invalid protocol');\n    }\n\n    if (port) {\n      parsed.socket.port = Number(port);\n    }\n\n    if (username) {\n      parsed.username = decodeURIComponent(username);\n    }\n\n    if (password) {\n      parsed.password = decodeURIComponent(password);\n    }\n\n    if (pathname.length > 1) {\n      const database = Number(pathname.substring(1));\n\n      if (isNaN(database)) {\n        throw new TypeError('Invalid pathname');\n      }\n\n      parsed.database = database;\n    }\n\n    return parsed;\n  }\n\n  get options() {\n    return __classPrivateFieldGet(this, _RedisClient_options, \"f\");\n  }\n\n  get isOpen() {\n    return __classPrivateFieldGet(this, _RedisClient_socket, \"f\").isOpen;\n  }\n\n  get v4() {\n    var _a;\n\n    if (!((_a = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _a === void 0 ? void 0 : _a.legacyMode)) {\n      throw new Error('the client is not in \"legacy mode\"');\n    }\n\n    return __classPrivateFieldGet(this, _RedisClient_v4, \"f\");\n  }\n\n  duplicate(overrides) {\n    return new (Object.getPrototypeOf(this).constructor)({ ...__classPrivateFieldGet(this, _RedisClient_options, \"f\"),\n      ...overrides\n    });\n  }\n\n  async connect() {\n    await __classPrivateFieldGet(this, _RedisClient_socket, \"f\").connect();\n  }\n\n  async commandsExecutor(command, args) {\n    const {\n      args: redisArgs,\n      options\n    } = (0, commander_1.transformCommandArguments)(command, args);\n    return (0, commander_1.transformCommandReply)(command, await __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_sendCommand).call(this, redisArgs, options), redisArgs.preserve);\n  }\n\n  sendCommand(args, options) {\n    return __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_sendCommand).call(this, args, options);\n  }\n\n  async scriptsExecutor(script, args) {\n    const {\n      args: redisArgs,\n      options\n    } = (0, commander_1.transformCommandArguments)(script, args);\n    return (0, commander_1.transformCommandReply)(script, await this.executeScript(script, redisArgs, options), redisArgs.preserve);\n  }\n\n  async executeScript(script, args, options) {\n    var _a, _b;\n\n    try {\n      return await __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_sendCommand).call(this, ['EVALSHA', script.SHA1, script.NUMBER_OF_KEYS.toString(), ...args], options);\n    } catch (err) {\n      if (!((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.startsWith) === null || _b === void 0 ? void 0 : _b.call(_a, 'NOSCRIPT'))) {\n        throw err;\n      }\n\n      return await __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_sendCommand).call(this, ['EVAL', script.SCRIPT, script.NUMBER_OF_KEYS.toString(), ...args], options);\n    }\n  }\n\n  async SELECT(options, db) {\n    if (!(0, command_options_1.isCommandOptions)(options)) {\n      db = options;\n      options = null;\n    }\n\n    await __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_sendCommand).call(this, ['SELECT', db.toString()], options);\n\n    __classPrivateFieldSet(this, _RedisClient_selectedDB, db, \"f\");\n  }\n\n  SUBSCRIBE(channels, listener, bufferMode) {\n    return __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_subscribe).call(this, commands_queue_1.PubSubSubscribeCommands.SUBSCRIBE, channels, listener, bufferMode);\n  }\n\n  PSUBSCRIBE(patterns, listener, bufferMode) {\n    return __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_subscribe).call(this, commands_queue_1.PubSubSubscribeCommands.PSUBSCRIBE, patterns, listener, bufferMode);\n  }\n\n  UNSUBSCRIBE(channels, listener, bufferMode) {\n    return __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_unsubscribe).call(this, commands_queue_1.PubSubUnsubscribeCommands.UNSUBSCRIBE, channels, listener, bufferMode);\n  }\n\n  PUNSUBSCRIBE(patterns, listener, bufferMode) {\n    return __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_unsubscribe).call(this, commands_queue_1.PubSubUnsubscribeCommands.PUNSUBSCRIBE, patterns, listener, bufferMode);\n  }\n\n  QUIT() {\n    return __classPrivateFieldGet(this, _RedisClient_socket, \"f\").quit(() => {\n      const quitPromise = __classPrivateFieldGet(this, _RedisClient_queue, \"f\").addCommand(['QUIT'], {\n        ignorePubSubMode: true\n      });\n\n      __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_tick).call(this);\n\n      return Promise.all([quitPromise, __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_destroyIsolationPool).call(this)]);\n    });\n  }\n\n  executeIsolated(fn) {\n    return __classPrivateFieldGet(this, _RedisClient_isolationPool, \"f\").use(fn);\n  }\n\n  multi() {\n    var _a;\n\n    return new this.Multi(this.multiExecutor.bind(this), (_a = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _a === void 0 ? void 0 : _a.legacyMode);\n  }\n\n  multiExecutor(commands, chainId) {\n    const promise = Promise.all(commands.map(_ref => {\n      let {\n        args\n      } = _ref;\n      return __classPrivateFieldGet(this, _RedisClient_queue, \"f\").addCommand(args, RedisClient.commandOptions({\n        chainId\n      }));\n    }));\n\n    __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_tick).call(this);\n\n    return promise;\n  }\n\n  async *scanIterator(options) {\n    let cursor = 0;\n\n    do {\n      const reply = await this.scan(cursor, options);\n      cursor = reply.cursor;\n\n      for (const key of reply.keys) {\n        yield key;\n      }\n    } while (cursor !== 0);\n  }\n\n  async *hScanIterator(key, options) {\n    let cursor = 0;\n\n    do {\n      const reply = await this.hScan(key, cursor, options);\n      cursor = reply.cursor;\n\n      for (const tuple of reply.tuples) {\n        yield tuple;\n      }\n    } while (cursor !== 0);\n  }\n\n  async *sScanIterator(key, options) {\n    let cursor = 0;\n\n    do {\n      const reply = await this.sScan(key, cursor, options);\n      cursor = reply.cursor;\n\n      for (const member of reply.members) {\n        yield member;\n      }\n    } while (cursor !== 0);\n  }\n\n  async *zScanIterator(key, options) {\n    let cursor = 0;\n\n    do {\n      const reply = await this.zScan(key, cursor, options);\n      cursor = reply.cursor;\n\n      for (const member of reply.members) {\n        yield member;\n      }\n    } while (cursor !== 0);\n  }\n\n  async disconnect() {\n    __classPrivateFieldGet(this, _RedisClient_queue, \"f\").flushAll(new errors_1.DisconnectsClientError());\n\n    __classPrivateFieldGet(this, _RedisClient_socket, \"f\").disconnect();\n\n    await __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_destroyIsolationPool).call(this);\n  }\n\n}\n\nexports.default = RedisClient;\n_RedisClient_options = new WeakMap(), _RedisClient_socket = new WeakMap(), _RedisClient_queue = new WeakMap(), _RedisClient_isolationPool = new WeakMap(), _RedisClient_v4 = new WeakMap(), _RedisClient_selectedDB = new WeakMap(), _RedisClient_instances = new WeakSet(), _RedisClient_initiateOptions = function _RedisClient_initiateOptions(options) {\n  if (options === null || options === void 0 ? void 0 : options.url) {\n    const parsed = RedisClient.parseURL(options.url);\n\n    if (options.socket) {\n      parsed.socket = Object.assign(options.socket, parsed.socket);\n    }\n\n    Object.assign(options, parsed);\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.database) {\n    __classPrivateFieldSet(this, _RedisClient_selectedDB, options.database, \"f\");\n  }\n\n  return options;\n}, _RedisClient_initiateSocket = function _RedisClient_initiateSocket() {\n  var _a;\n\n  const socketInitiator = async () => {\n    var _a, _b, _c, _d, _e;\n\n    const promises = [];\n\n    if (__classPrivateFieldGet(this, _RedisClient_selectedDB, \"f\") !== 0) {\n      promises.push(__classPrivateFieldGet(this, _RedisClient_queue, \"f\").addCommand(['SELECT', __classPrivateFieldGet(this, _RedisClient_selectedDB, \"f\").toString()], {\n        asap: true\n      }));\n    }\n\n    if ((_a = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _a === void 0 ? void 0 : _a.readonly) {\n      promises.push(__classPrivateFieldGet(this, _RedisClient_queue, \"f\").addCommand(commands_1.default.READONLY.transformArguments(), {\n        asap: true\n      }));\n    }\n\n    if ((_b = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _b === void 0 ? void 0 : _b.name) {\n      promises.push(__classPrivateFieldGet(this, _RedisClient_queue, \"f\").addCommand(commands_1.default.CLIENT_SETNAME.transformArguments(__classPrivateFieldGet(this, _RedisClient_options, \"f\").name), {\n        asap: true\n      }));\n    }\n\n    if (((_c = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _c === void 0 ? void 0 : _c.username) || ((_d = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _d === void 0 ? void 0 : _d.password)) {\n      promises.push(__classPrivateFieldGet(this, _RedisClient_queue, \"f\").addCommand(commands_1.default.AUTH.transformArguments({\n        username: __classPrivateFieldGet(this, _RedisClient_options, \"f\").username,\n        password: (_e = __classPrivateFieldGet(this, _RedisClient_options, \"f\").password) !== null && _e !== void 0 ? _e : ''\n      }), {\n        asap: true\n      }).catch(err => {\n        throw new errors_1.AuthError(err.message);\n      }));\n    }\n\n    const resubscribePromise = __classPrivateFieldGet(this, _RedisClient_queue, \"f\").resubscribe();\n\n    if (resubscribePromise) {\n      promises.push(resubscribePromise);\n    }\n\n    if (promises.length) {\n      __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_tick).call(this, true);\n\n      await Promise.all(promises);\n    }\n  };\n\n  return new socket_1.default(socketInitiator, (_a = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _a === void 0 ? void 0 : _a.socket).on('data', data => __classPrivateFieldGet(this, _RedisClient_queue, \"f\").parseResponse(data)).on('error', err => {\n    var _a;\n\n    this.emit('error', err);\n\n    if (__classPrivateFieldGet(this, _RedisClient_socket, \"f\").isOpen && !((_a = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _a === void 0 ? void 0 : _a.disableOfflineQueue)) {\n      __classPrivateFieldGet(this, _RedisClient_queue, \"f\").flushWaitingForReply(err);\n    } else {\n      __classPrivateFieldGet(this, _RedisClient_queue, \"f\").flushAll(err);\n    }\n  }).on('connect', () => this.emit('connect')).on('ready', () => {\n    this.emit('ready');\n\n    __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_tick).call(this);\n  }).on('reconnecting', () => this.emit('reconnecting')).on('drain', () => __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_tick).call(this)).on('end', () => this.emit('end'));\n}, _RedisClient_initiateQueue = function _RedisClient_initiateQueue() {\n  var _a;\n\n  return new commands_queue_1.default((_a = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _a === void 0 ? void 0 : _a.commandsQueueMaxLength);\n}, _RedisClient_legacyMode = function _RedisClient_legacyMode() {\n  var _this = this;\n\n  var _a;\n\n  if (!((_a = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _a === void 0 ? void 0 : _a.legacyMode)) return;\n  __classPrivateFieldGet(this, _RedisClient_v4, \"f\").sendCommand = __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_sendCommand).bind(this);\n\n  this.sendCommand = function () {\n    let callback;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (typeof args[args.length - 1] === 'function') {\n      callback = args.pop();\n    }\n\n    __classPrivateFieldGet(_this, _RedisClient_instances, \"m\", _RedisClient_sendCommand).call(_this, args.flat()).then(reply => {\n      if (!callback) return; // https://github.com/NodeRedis/node-redis#commands:~:text=minimal%20parsing\n\n      callback(null, reply);\n    }).catch(err => {\n      if (!callback) {\n        _this.emit('error', err);\n\n        return;\n      }\n\n      callback(err);\n    });\n  };\n\n  for (const name of Object.keys(commands_1.default)) {\n    __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, name);\n  }\n\n  for (const name of Object.keys(commands_1.default)) {\n    this[name.toLowerCase()] = this[name];\n  } // hard coded commands\n\n\n  __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'SELECT');\n\n  __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'select');\n\n  __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'SUBSCRIBE');\n\n  __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'subscribe');\n\n  __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'PSUBSCRIBE');\n\n  __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'pSubscribe');\n\n  __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'UNSUBSCRIBE');\n\n  __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'unsubscribe');\n\n  __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'PUNSUBSCRIBE');\n\n  __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'pUnsubscribe');\n\n  __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'QUIT');\n\n  __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'quit');\n}, _RedisClient_defineLegacyCommand = function _RedisClient_defineLegacyCommand(name) {\n  var _this2 = this;\n\n  __classPrivateFieldGet(this, _RedisClient_v4, \"f\")[name] = this[name].bind(this);\n\n  this[name] = function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return _this2.sendCommand(name, ...args);\n  };\n}, _RedisClient_sendCommand = function _RedisClient_sendCommand(args, options) {\n  if (!__classPrivateFieldGet(this, _RedisClient_socket, \"f\").isOpen) {\n    return Promise.reject(new errors_1.ClientClosedError());\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.isolated) {\n    return this.executeIsolated(isolatedClient => isolatedClient.sendCommand(args, { ...options,\n      isolated: false\n    }));\n  }\n\n  const promise = __classPrivateFieldGet(this, _RedisClient_queue, \"f\").addCommand(args, options);\n\n  __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_tick).call(this);\n\n  return promise;\n}, _RedisClient_subscribe = function _RedisClient_subscribe(command, channels, listener, bufferMode) {\n  const promise = __classPrivateFieldGet(this, _RedisClient_queue, \"f\").subscribe(command, channels, listener, bufferMode);\n\n  __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_tick).call(this);\n\n  return promise;\n}, _RedisClient_unsubscribe = function _RedisClient_unsubscribe(command, channels, listener, bufferMode) {\n  const promise = __classPrivateFieldGet(this, _RedisClient_queue, \"f\").unsubscribe(command, channels, listener, bufferMode);\n\n  __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_tick).call(this);\n\n  return promise;\n}, _RedisClient_tick = function _RedisClient_tick() {\n  let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  if (__classPrivateFieldGet(this, _RedisClient_socket, \"f\").writableNeedDrain || !force && !__classPrivateFieldGet(this, _RedisClient_socket, \"f\").isReady) {\n    return;\n  }\n\n  __classPrivateFieldGet(this, _RedisClient_socket, \"f\").cork();\n\n  while (!__classPrivateFieldGet(this, _RedisClient_socket, \"f\").writableNeedDrain) {\n    const args = __classPrivateFieldGet(this, _RedisClient_queue, \"f\").getCommandToSend();\n\n    if (args === undefined) break;\n\n    __classPrivateFieldGet(this, _RedisClient_socket, \"f\").writeCommand(args);\n  }\n}, _RedisClient_destroyIsolationPool = async function _RedisClient_destroyIsolationPool() {\n  await __classPrivateFieldGet(this, _RedisClient_isolationPool, \"f\").drain();\n  await __classPrivateFieldGet(this, _RedisClient_isolationPool, \"f\").clear();\n};\n(0, commander_1.extendWithCommands)({\n  BaseClass: RedisClient,\n  commands: commands_1.default,\n  executor: RedisClient.prototype.commandsExecutor\n});\nRedisClient.prototype.Multi = multi_command_1.default;","map":{"version":3,"sources":["/home/maira/Desktop/Developer Projects/system-ping-project/node_modules/@node-redis/client/dist/lib/client/index.js"],"names":["__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","__classPrivateFieldSet","set","_RedisClient_instances","_RedisClient_options","_RedisClient_socket","_RedisClient_queue","_RedisClient_isolationPool","_RedisClient_v4","_RedisClient_selectedDB","_RedisClient_initiateOptions","_RedisClient_initiateSocket","_RedisClient_initiateQueue","_RedisClient_legacyMode","_RedisClient_defineLegacyCommand","_RedisClient_sendCommand","_RedisClient_subscribe","_RedisClient_unsubscribe","_RedisClient_tick","_RedisClient_destroyIsolationPool","Object","defineProperty","exports","commands_1","require","socket_1","commands_queue_1","multi_command_1","events_1","command_options_1","commander_1","generic_pool_1","errors_1","url_1","RedisClient","EventEmitter","constructor","options","add","enumerable","configurable","writable","commandOptions","SELECT","SUBSCRIBE","PSUBSCRIBE","UNSUBSCRIBE","PUNSUBSCRIBE","QUIT","createPool","create","duplicate","isolationPoolOptions","undefined","connect","destroy","client","disconnect","extend","plugins","Client","extendWithModulesAndScripts","BaseClass","modules","modulesCommandsExecutor","prototype","commandsExecutor","scripts","scriptsExecutor","Multi","default","parseURL","url","hostname","port","protocol","username","password","pathname","URL","parsed","socket","host","tls","Number","decodeURIComponent","length","database","substring","isNaN","isOpen","v4","_a","legacyMode","Error","overrides","getPrototypeOf","command","args","redisArgs","transformCommandArguments","transformCommandReply","preserve","sendCommand","script","executeScript","_b","SHA1","NUMBER_OF_KEYS","toString","err","message","startsWith","SCRIPT","db","isCommandOptions","channels","listener","bufferMode","PubSubSubscribeCommands","patterns","PubSubUnsubscribeCommands","quit","quitPromise","addCommand","ignorePubSubMode","Promise","all","executeIsolated","fn","use","multi","multiExecutor","bind","commands","chainId","promise","map","scanIterator","cursor","reply","scan","key","keys","hScanIterator","hScan","tuple","tuples","sScanIterator","sScan","member","members","zScanIterator","zScan","flushAll","DisconnectsClientError","WeakMap","WeakSet","assign","socketInitiator","_c","_d","_e","promises","push","asap","readonly","READONLY","transformArguments","name","CLIENT_SETNAME","AUTH","catch","AuthError","resubscribePromise","resubscribe","on","data","parseResponse","emit","disableOfflineQueue","flushWaitingForReply","commandsQueueMaxLength","callback","pop","flat","then","toLowerCase","reject","ClientClosedError","isolated","isolatedClient","subscribe","unsubscribe","force","writableNeedDrain","isReady","cork","getCommandToSend","writeCommand","drain","clear","extendWithCommands","executor"],"mappings":"AAAA;;AACA,IAAIA,sBAAsB,GAAI,QAAQ,KAAKA,sBAAd,IAAyC,UAAUC,QAAV,EAAoBC,KAApB,EAA2BC,IAA3B,EAAiCC,CAAjC,EAAoC;AACtG,MAAID,IAAI,KAAK,GAAT,IAAgB,CAACC,CAArB,EAAwB,MAAM,IAAIC,SAAJ,CAAc,+CAAd,CAAN;AACxB,MAAI,OAAOH,KAAP,KAAiB,UAAjB,GAA8BD,QAAQ,KAAKC,KAAb,IAAsB,CAACE,CAArD,GAAyD,CAACF,KAAK,CAACI,GAAN,CAAUL,QAAV,CAA9D,EAAmF,MAAM,IAAII,SAAJ,CAAc,0EAAd,CAAN;AACnF,SAAOF,IAAI,KAAK,GAAT,GAAeC,CAAf,GAAmBD,IAAI,KAAK,GAAT,GAAeC,CAAC,CAACG,IAAF,CAAON,QAAP,CAAf,GAAkCG,CAAC,GAAGA,CAAC,CAACI,KAAL,GAAaN,KAAK,CAACO,GAAN,CAAUR,QAAV,CAA1E;AACH,CAJD;;AAKA,IAAIS,sBAAsB,GAAI,QAAQ,KAAKA,sBAAd,IAAyC,UAAUT,QAAV,EAAoBC,KAApB,EAA2BM,KAA3B,EAAkCL,IAAlC,EAAwCC,CAAxC,EAA2C;AAC7G,MAAID,IAAI,KAAK,GAAb,EAAkB,MAAM,IAAIE,SAAJ,CAAc,gCAAd,CAAN;AAClB,MAAIF,IAAI,KAAK,GAAT,IAAgB,CAACC,CAArB,EAAwB,MAAM,IAAIC,SAAJ,CAAc,+CAAd,CAAN;AACxB,MAAI,OAAOH,KAAP,KAAiB,UAAjB,GAA8BD,QAAQ,KAAKC,KAAb,IAAsB,CAACE,CAArD,GAAyD,CAACF,KAAK,CAACI,GAAN,CAAUL,QAAV,CAA9D,EAAmF,MAAM,IAAII,SAAJ,CAAc,yEAAd,CAAN;AACnF,SAAQF,IAAI,KAAK,GAAT,GAAeC,CAAC,CAACG,IAAF,CAAON,QAAP,EAAiBO,KAAjB,CAAf,GAAyCJ,CAAC,GAAGA,CAAC,CAACI,KAAF,GAAUA,KAAb,GAAqBN,KAAK,CAACS,GAAN,CAAUV,QAAV,EAAoBO,KAApB,CAAhE,EAA6FA,KAApG;AACH,CALD;;AAMA,IAAII,sBAAJ,EAA4BC,oBAA5B,EAAkDC,mBAAlD,EAAuEC,kBAAvE,EAA2FC,0BAA3F,EAAuHC,eAAvH,EAAwIC,uBAAxI,EAAiKC,4BAAjK,EAA+LC,2BAA/L,EAA4NC,0BAA5N,EAAwPC,uBAAxP,EAAiRC,gCAAjR,EAAmTC,wBAAnT,EAA6UC,sBAA7U,EAAqWC,wBAArW,EAA+XC,iBAA/X,EAAkZC,iCAAlZ;;AACAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEvB,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMwB,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,kBAAD,CAAhC;;AACA,MAAMG,eAAe,GAAGH,OAAO,CAAC,iBAAD,CAA/B;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMK,iBAAiB,GAAGL,OAAO,CAAC,oBAAD,CAAjC;;AACA,MAAMM,WAAW,GAAGN,OAAO,CAAC,cAAD,CAA3B;;AACA,MAAMO,cAAc,GAAGP,OAAO,CAAC,cAAD,CAA9B;;AACA,MAAMQ,QAAQ,GAAGR,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMS,KAAK,GAAGT,OAAO,CAAC,KAAD,CAArB;;AACA,MAAMU,WAAN,SAA0BN,QAAQ,CAACO,YAAnC,CAAgD;AAC5CC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB;;AACAlC,IAAAA,sBAAsB,CAACmC,GAAvB,CAA2B,IAA3B;;AACAlB,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,gBAA5B,EAA8C;AAC1CkB,MAAAA,UAAU,EAAE,IAD8B;AAE1CC,MAAAA,YAAY,EAAE,IAF4B;AAG1CC,MAAAA,QAAQ,EAAE,IAHgC;AAI1C1C,MAAAA,KAAK,EAAEmC,WAAW,CAACQ;AAJuB,KAA9C;;AAMAtC,IAAAA,oBAAoB,CAACF,GAArB,CAAyB,IAAzB,EAA+B,KAAK,CAApC;;AACAG,IAAAA,mBAAmB,CAACH,GAApB,CAAwB,IAAxB,EAA8B,KAAK,CAAnC;;AACAI,IAAAA,kBAAkB,CAACJ,GAAnB,CAAuB,IAAvB,EAA6B,KAAK,CAAlC;;AACAK,IAAAA,0BAA0B,CAACL,GAA3B,CAA+B,IAA/B,EAAqC,KAAK,CAA1C;;AACAM,IAAAA,eAAe,CAACN,GAAhB,CAAoB,IAApB,EAA0B,EAA1B;;AACAO,IAAAA,uBAAuB,CAACP,GAAxB,CAA4B,IAA5B,EAAkC,CAAlC;;AACAkB,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC;AAClCkB,MAAAA,UAAU,EAAE,IADsB;AAElCC,MAAAA,YAAY,EAAE,IAFoB;AAGlCC,MAAAA,QAAQ,EAAE,IAHwB;AAIlC1C,MAAAA,KAAK,EAAE,KAAK4C;AAJsB,KAAtC;AAMAvB,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,WAA5B,EAAyC;AACrCkB,MAAAA,UAAU,EAAE,IADyB;AAErCC,MAAAA,YAAY,EAAE,IAFuB;AAGrCC,MAAAA,QAAQ,EAAE,IAH2B;AAIrC1C,MAAAA,KAAK,EAAE,KAAK6C;AAJyB,KAAzC;AAMAxB,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,YAA5B,EAA0C;AACtCkB,MAAAA,UAAU,EAAE,IAD0B;AAEtCC,MAAAA,YAAY,EAAE,IAFwB;AAGtCC,MAAAA,QAAQ,EAAE,IAH4B;AAItC1C,MAAAA,KAAK,EAAE,KAAK8C;AAJ0B,KAA1C;AAMAzB,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,aAA5B,EAA2C;AACvCkB,MAAAA,UAAU,EAAE,IAD2B;AAEvCC,MAAAA,YAAY,EAAE,IAFyB;AAGvCC,MAAAA,QAAQ,EAAE,IAH6B;AAIvC1C,MAAAA,KAAK,EAAE,KAAK+C;AAJ2B,KAA3C;AAMA1B,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,cAA5B,EAA4C;AACxCkB,MAAAA,UAAU,EAAE,IAD4B;AAExCC,MAAAA,YAAY,EAAE,IAF0B;AAGxCC,MAAAA,QAAQ,EAAE,IAH8B;AAIxC1C,MAAAA,KAAK,EAAE,KAAKgD;AAJ4B,KAA5C;AAMA3B,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,MAA5B,EAAoC;AAChCkB,MAAAA,UAAU,EAAE,IADoB;AAEhCC,MAAAA,YAAY,EAAE,IAFkB;AAGhCC,MAAAA,QAAQ,EAAE,IAHsB;AAIhC1C,MAAAA,KAAK,EAAE,KAAKiD;AAJoB,KAApC;;AAMA/C,IAAAA,sBAAsB,CAAC,IAAD,EAAOG,oBAAP,EAA6Bb,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCO,4BAApC,CAAtB,CAAwFZ,IAAxF,CAA6F,IAA7F,EAAmGuC,OAAnG,CAA7B,EAA0I,GAA1I,CAAtB;;AACApC,IAAAA,sBAAsB,CAAC,IAAD,EAAOI,mBAAP,EAA4Bd,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCQ,2BAApC,CAAtB,CAAuFb,IAAvF,CAA4F,IAA5F,CAA5B,EAA+H,GAA/H,CAAtB;;AACAG,IAAAA,sBAAsB,CAAC,IAAD,EAAOK,kBAAP,EAA2Bf,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCS,0BAApC,CAAtB,CAAsFd,IAAtF,CAA2F,IAA3F,CAA3B,EAA6H,GAA7H,CAAtB;;AACAG,IAAAA,sBAAsB,CAAC,IAAD,EAAOM,0BAAP,EAAmC,CAAC,GAAGwB,cAAc,CAACkB,UAAnB,EAA+B;AACpFC,MAAAA,MAAM,EAAE,YAAY;AAChB,cAAMC,SAAS,GAAG,KAAKA,SAAL,CAAe;AAC7BC,UAAAA,oBAAoB,EAAEC;AADO,SAAf,CAAlB;AAGA,cAAMF,SAAS,CAACG,OAAV,EAAN;AACA,eAAOH,SAAP;AACH,OAPmF;AAQpFI,MAAAA,OAAO,EAAEC,MAAM,IAAIA,MAAM,CAACC,UAAP;AARiE,KAA/B,EAStDpB,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACe,oBATJ,CAAnC,EAS8D,GAT9D,CAAtB;;AAUA7D,IAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCU,uBAApC,CAAtB,CAAmFf,IAAnF,CAAwF,IAAxF;AACH;;AACoB,SAAd4C,cAAc,CAACL,OAAD,EAAU;AAC3B,WAAO,CAAC,GAAGR,iBAAiB,CAACa,cAAtB,EAAsCL,OAAtC,CAAP;AACH;;AACY,SAANqB,MAAM,CAACC,OAAD,EAAU;AACnB,UAAMC,MAAM,GAAG,CAAC,GAAG9B,WAAW,CAAC+B,2BAAhB,EAA6C;AACxDC,MAAAA,SAAS,EAAE5B,WAD6C;AAExD6B,MAAAA,OAAO,EAAEJ,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACI,OAFX;AAGxDC,MAAAA,uBAAuB,EAAE9B,WAAW,CAAC+B,SAAZ,CAAsBC,gBAHS;AAIxDC,MAAAA,OAAO,EAAER,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACQ,OAJX;AAKxDC,MAAAA,eAAe,EAAElC,WAAW,CAAC+B,SAAZ,CAAsBG;AALiB,KAA7C,CAAf;;AAOA,QAAIR,MAAM,KAAK1B,WAAf,EAA4B;AACxB0B,MAAAA,MAAM,CAACK,SAAP,CAAiBI,KAAjB,GAAyB1C,eAAe,CAAC2C,OAAhB,CAAwBZ,MAAxB,CAA+BC,OAA/B,CAAzB;AACH;;AACD,WAAOC,MAAP;AACH;;AACY,SAANV,MAAM,CAACb,OAAD,EAAU;AACnB,WAAO,KAAKH,WAAW,CAACwB,MAAZ,CAAmBrB,OAAnB,CAAL,EAAkCA,OAAlC,CAAP;AACH;;AACc,SAARkC,QAAQ,CAACC,GAAD,EAAM;AACjB;AACA,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,IAAZ;AAAkBC,MAAAA,QAAlB;AAA4BC,MAAAA,QAA5B;AAAsCC,MAAAA,QAAtC;AAAgDC,MAAAA;AAAhD,QAA6D,IAAI7C,KAAK,CAAC8C,GAAV,CAAcP,GAAd,CAAnE;AAAA,UAAuFQ,MAAM,GAAG;AAC5FC,MAAAA,MAAM,EAAE;AACJC,QAAAA,IAAI,EAAET;AADF;AADoF,KAAhG;;AAKA,QAAIE,QAAQ,KAAK,SAAjB,EAA4B;AACxBK,MAAAA,MAAM,CAACC,MAAP,CAAcE,GAAd,GAAoB,IAApB;AACH,KAFD,MAGK,IAAIR,QAAQ,KAAK,QAAjB,EAA2B;AAC5B,YAAM,IAAI/E,SAAJ,CAAc,kBAAd,CAAN;AACH;;AACD,QAAI8E,IAAJ,EAAU;AACNM,MAAAA,MAAM,CAACC,MAAP,CAAcP,IAAd,GAAqBU,MAAM,CAACV,IAAD,CAA3B;AACH;;AACD,QAAIE,QAAJ,EAAc;AACVI,MAAAA,MAAM,CAACJ,QAAP,GAAkBS,kBAAkB,CAACT,QAAD,CAApC;AACH;;AACD,QAAIC,QAAJ,EAAc;AACVG,MAAAA,MAAM,CAACH,QAAP,GAAkBQ,kBAAkB,CAACR,QAAD,CAApC;AACH;;AACD,QAAIC,QAAQ,CAACQ,MAAT,GAAkB,CAAtB,EAAyB;AACrB,YAAMC,QAAQ,GAAGH,MAAM,CAACN,QAAQ,CAACU,SAAT,CAAmB,CAAnB,CAAD,CAAvB;;AACA,UAAIC,KAAK,CAACF,QAAD,CAAT,EAAqB;AACjB,cAAM,IAAI3F,SAAJ,CAAc,kBAAd,CAAN;AACH;;AACDoF,MAAAA,MAAM,CAACO,QAAP,GAAkBA,QAAlB;AACH;;AACD,WAAOP,MAAP;AACH;;AACU,MAAP3C,OAAO,GAAG;AACV,WAAO9C,sBAAsB,CAAC,IAAD,EAAOa,oBAAP,EAA6B,GAA7B,CAA7B;AACH;;AACS,MAANsF,MAAM,GAAG;AACT,WAAOnG,sBAAsB,CAAC,IAAD,EAAOc,mBAAP,EAA4B,GAA5B,CAAtB,CAAuDqF,MAA9D;AACH;;AACK,MAAFC,EAAE,GAAG;AACL,QAAIC,EAAJ;;AACA,QAAI,EAAE,CAACA,EAAE,GAAGrG,sBAAsB,CAAC,IAAD,EAAOa,oBAAP,EAA6B,GAA7B,CAA5B,MAAmE,IAAnE,IAA2EwF,EAAE,KAAK,KAAK,CAAvF,GAA2F,KAAK,CAAhG,GAAoGA,EAAE,CAACC,UAAzG,CAAJ,EAA0H;AACtH,YAAM,IAAIC,KAAJ,CAAU,oCAAV,CAAN;AACH;;AACD,WAAOvG,sBAAsB,CAAC,IAAD,EAAOiB,eAAP,EAAwB,GAAxB,CAA7B;AACH;;AACD2C,EAAAA,SAAS,CAAC4C,SAAD,EAAY;AACjB,WAAO,KAAK3E,MAAM,CAAC4E,cAAP,CAAsB,IAAtB,EAA4B5D,WAAjC,EAA8C,EACjD,GAAG7C,sBAAsB,CAAC,IAAD,EAAOa,oBAAP,EAA6B,GAA7B,CADwB;AAEjD,SAAG2F;AAF8C,KAA9C,CAAP;AAIH;;AACY,QAAPzC,OAAO,GAAG;AACZ,UAAM/D,sBAAsB,CAAC,IAAD,EAAOc,mBAAP,EAA4B,GAA5B,CAAtB,CAAuDiD,OAAvD,EAAN;AACH;;AACqB,QAAhBY,gBAAgB,CAAC+B,OAAD,EAAUC,IAAV,EAAgB;AAClC,UAAM;AAAEA,MAAAA,IAAI,EAAEC,SAAR;AAAmB9D,MAAAA;AAAnB,QAA+B,CAAC,GAAGP,WAAW,CAACsE,yBAAhB,EAA2CH,OAA3C,EAAoDC,IAApD,CAArC;AACA,WAAO,CAAC,GAAGpE,WAAW,CAACuE,qBAAhB,EAAuCJ,OAAvC,EAAgD,MAAM1G,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCY,wBAApC,CAAtB,CAAoFjB,IAApF,CAAyF,IAAzF,EAA+FqG,SAA/F,EAA0G9D,OAA1G,CAAtD,EAA0K8D,SAAS,CAACG,QAApL,CAAP;AACH;;AACDC,EAAAA,WAAW,CAACL,IAAD,EAAO7D,OAAP,EAAgB;AACvB,WAAO9C,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCY,wBAApC,CAAtB,CAAoFjB,IAApF,CAAyF,IAAzF,EAA+FoG,IAA/F,EAAqG7D,OAArG,CAAP;AACH;;AACoB,QAAf+B,eAAe,CAACoC,MAAD,EAASN,IAAT,EAAe;AAChC,UAAM;AAAEA,MAAAA,IAAI,EAAEC,SAAR;AAAmB9D,MAAAA;AAAnB,QAA+B,CAAC,GAAGP,WAAW,CAACsE,yBAAhB,EAA2CI,MAA3C,EAAmDN,IAAnD,CAArC;AACA,WAAO,CAAC,GAAGpE,WAAW,CAACuE,qBAAhB,EAAuCG,MAAvC,EAA+C,MAAM,KAAKC,aAAL,CAAmBD,MAAnB,EAA2BL,SAA3B,EAAsC9D,OAAtC,CAArD,EAAqG8D,SAAS,CAACG,QAA/G,CAAP;AACH;;AACkB,QAAbG,aAAa,CAACD,MAAD,EAASN,IAAT,EAAe7D,OAAf,EAAwB;AACvC,QAAIuD,EAAJ,EAAQc,EAAR;;AACA,QAAI;AACA,aAAO,MAAMnH,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCY,wBAApC,CAAtB,CAAoFjB,IAApF,CAAyF,IAAzF,EAA+F,CACxG,SADwG,EAExG0G,MAAM,CAACG,IAFiG,EAGxGH,MAAM,CAACI,cAAP,CAAsBC,QAAtB,EAHwG,EAIxG,GAAGX,IAJqG,CAA/F,EAKV7D,OALU,CAAb;AAMH,KAPD,CAQA,OAAOyE,GAAP,EAAY;AACR,UAAI,EAAE,CAACJ,EAAE,GAAG,CAACd,EAAE,GAAGkB,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,KAAK,CAA7B,GAAiC,KAAK,CAAtC,GAA0CA,GAAG,CAACC,OAApD,MAAiE,IAAjE,IAAyEnB,EAAE,KAAK,KAAK,CAArF,GAAyF,KAAK,CAA9F,GAAkGA,EAAE,CAACoB,UAA3G,MAA2H,IAA3H,IAAmIN,EAAE,KAAK,KAAK,CAA/I,GAAmJ,KAAK,CAAxJ,GAA4JA,EAAE,CAAC5G,IAAH,CAAQ8F,EAAR,EAAY,UAAZ,CAA9J,CAAJ,EAA4L;AACxL,cAAMkB,GAAN;AACH;;AACD,aAAO,MAAMvH,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCY,wBAApC,CAAtB,CAAoFjB,IAApF,CAAyF,IAAzF,EAA+F,CACxG,MADwG,EAExG0G,MAAM,CAACS,MAFiG,EAGxGT,MAAM,CAACI,cAAP,CAAsBC,QAAtB,EAHwG,EAIxG,GAAGX,IAJqG,CAA/F,EAKV7D,OALU,CAAb;AAMH;AACJ;;AACW,QAANM,MAAM,CAACN,OAAD,EAAU6E,EAAV,EAAc;AACtB,QAAI,CAAC,CAAC,GAAGrF,iBAAiB,CAACsF,gBAAtB,EAAwC9E,OAAxC,CAAL,EAAuD;AACnD6E,MAAAA,EAAE,GAAG7E,OAAL;AACAA,MAAAA,OAAO,GAAG,IAAV;AACH;;AACD,UAAM9C,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCY,wBAApC,CAAtB,CAAoFjB,IAApF,CAAyF,IAAzF,EAA+F,CAAC,QAAD,EAAWoH,EAAE,CAACL,QAAH,EAAX,CAA/F,EAA0HxE,OAA1H,CAAN;;AACApC,IAAAA,sBAAsB,CAAC,IAAD,EAAOQ,uBAAP,EAAgCyG,EAAhC,EAAoC,GAApC,CAAtB;AACH;;AACDtE,EAAAA,SAAS,CAACwE,QAAD,EAAWC,QAAX,EAAqBC,UAArB,EAAiC;AACtC,WAAO/H,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCa,sBAApC,CAAtB,CAAkFlB,IAAlF,CAAuF,IAAvF,EAA6F4B,gBAAgB,CAAC6F,uBAAjB,CAAyC3E,SAAtI,EAAiJwE,QAAjJ,EAA2JC,QAA3J,EAAqKC,UAArK,CAAP;AACH;;AACDzE,EAAAA,UAAU,CAAC2E,QAAD,EAAWH,QAAX,EAAqBC,UAArB,EAAiC;AACvC,WAAO/H,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCa,sBAApC,CAAtB,CAAkFlB,IAAlF,CAAuF,IAAvF,EAA6F4B,gBAAgB,CAAC6F,uBAAjB,CAAyC1E,UAAtI,EAAkJ2E,QAAlJ,EAA4JH,QAA5J,EAAsKC,UAAtK,CAAP;AACH;;AACDxE,EAAAA,WAAW,CAACsE,QAAD,EAAWC,QAAX,EAAqBC,UAArB,EAAiC;AACxC,WAAO/H,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCc,wBAApC,CAAtB,CAAoFnB,IAApF,CAAyF,IAAzF,EAA+F4B,gBAAgB,CAAC+F,yBAAjB,CAA2C3E,WAA1I,EAAuJsE,QAAvJ,EAAiKC,QAAjK,EAA2KC,UAA3K,CAAP;AACH;;AACDvE,EAAAA,YAAY,CAACyE,QAAD,EAAWH,QAAX,EAAqBC,UAArB,EAAiC;AACzC,WAAO/H,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCc,wBAApC,CAAtB,CAAoFnB,IAApF,CAAyF,IAAzF,EAA+F4B,gBAAgB,CAAC+F,yBAAjB,CAA2C1E,YAA1I,EAAwJyE,QAAxJ,EAAkKH,QAAlK,EAA4KC,UAA5K,CAAP;AACH;;AACDtE,EAAAA,IAAI,GAAG;AACH,WAAOzD,sBAAsB,CAAC,IAAD,EAAOc,mBAAP,EAA4B,GAA5B,CAAtB,CAAuDqH,IAAvD,CAA4D,MAAM;AACrE,YAAMC,WAAW,GAAGpI,sBAAsB,CAAC,IAAD,EAAOe,kBAAP,EAA2B,GAA3B,CAAtB,CAAsDsH,UAAtD,CAAiE,CAAC,MAAD,CAAjE,EAA2E;AAC3FC,QAAAA,gBAAgB,EAAE;AADyE,OAA3E,CAApB;;AAGAtI,MAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCe,iBAApC,CAAtB,CAA6EpB,IAA7E,CAAkF,IAAlF;;AACA,aAAOgI,OAAO,CAACC,GAAR,CAAY,CACfJ,WADe,EAEfpI,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCgB,iCAApC,CAAtB,CAA6FrB,IAA7F,CAAkG,IAAlG,CAFe,CAAZ,CAAP;AAIH,KATM,CAAP;AAUH;;AACDkI,EAAAA,eAAe,CAACC,EAAD,EAAK;AAChB,WAAO1I,sBAAsB,CAAC,IAAD,EAAOgB,0BAAP,EAAmC,GAAnC,CAAtB,CAA8D2H,GAA9D,CAAkED,EAAlE,CAAP;AACH;;AACDE,EAAAA,KAAK,GAAG;AACJ,QAAIvC,EAAJ;;AACA,WAAO,IAAI,KAAKvB,KAAT,CAAe,KAAK+D,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAAf,EAA8C,CAACzC,EAAE,GAAGrG,sBAAsB,CAAC,IAAD,EAAOa,oBAAP,EAA6B,GAA7B,CAA5B,MAAmE,IAAnE,IAA2EwF,EAAE,KAAK,KAAK,CAAvF,GAA2F,KAAK,CAAhG,GAAoGA,EAAE,CAACC,UAArJ,CAAP;AACH;;AACDuC,EAAAA,aAAa,CAACE,QAAD,EAAWC,OAAX,EAAoB;AAC7B,UAAMC,OAAO,GAAGV,OAAO,CAACC,GAAR,CAAYO,QAAQ,CAACG,GAAT,CAAa,QAAc;AAAA,UAAb;AAAEvC,QAAAA;AAAF,OAAa;AACnD,aAAO3G,sBAAsB,CAAC,IAAD,EAAOe,kBAAP,EAA2B,GAA3B,CAAtB,CAAsDsH,UAAtD,CAAiE1B,IAAjE,EAAuEhE,WAAW,CAACQ,cAAZ,CAA2B;AACrG6F,QAAAA;AADqG,OAA3B,CAAvE,CAAP;AAGH,KAJ2B,CAAZ,CAAhB;;AAKAhJ,IAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCe,iBAApC,CAAtB,CAA6EpB,IAA7E,CAAkF,IAAlF;;AACA,WAAO0I,OAAP;AACH;;AACkB,SAAZE,YAAY,CAACrG,OAAD,EAAU;AACzB,QAAIsG,MAAM,GAAG,CAAb;;AACA,OAAG;AACC,YAAMC,KAAK,GAAG,MAAM,KAAKC,IAAL,CAAUF,MAAV,EAAkBtG,OAAlB,CAApB;AACAsG,MAAAA,MAAM,GAAGC,KAAK,CAACD,MAAf;;AACA,WAAK,MAAMG,GAAX,IAAkBF,KAAK,CAACG,IAAxB,EAA8B;AAC1B,cAAMD,GAAN;AACH;AACJ,KAND,QAMSH,MAAM,KAAK,CANpB;AAOH;;AACmB,SAAbK,aAAa,CAACF,GAAD,EAAMzG,OAAN,EAAe;AAC/B,QAAIsG,MAAM,GAAG,CAAb;;AACA,OAAG;AACC,YAAMC,KAAK,GAAG,MAAM,KAAKK,KAAL,CAAWH,GAAX,EAAgBH,MAAhB,EAAwBtG,OAAxB,CAApB;AACAsG,MAAAA,MAAM,GAAGC,KAAK,CAACD,MAAf;;AACA,WAAK,MAAMO,KAAX,IAAoBN,KAAK,CAACO,MAA1B,EAAkC;AAC9B,cAAMD,KAAN;AACH;AACJ,KAND,QAMSP,MAAM,KAAK,CANpB;AAOH;;AACmB,SAAbS,aAAa,CAACN,GAAD,EAAMzG,OAAN,EAAe;AAC/B,QAAIsG,MAAM,GAAG,CAAb;;AACA,OAAG;AACC,YAAMC,KAAK,GAAG,MAAM,KAAKS,KAAL,CAAWP,GAAX,EAAgBH,MAAhB,EAAwBtG,OAAxB,CAApB;AACAsG,MAAAA,MAAM,GAAGC,KAAK,CAACD,MAAf;;AACA,WAAK,MAAMW,MAAX,IAAqBV,KAAK,CAACW,OAA3B,EAAoC;AAChC,cAAMD,MAAN;AACH;AACJ,KAND,QAMSX,MAAM,KAAK,CANpB;AAOH;;AACmB,SAAba,aAAa,CAACV,GAAD,EAAMzG,OAAN,EAAe;AAC/B,QAAIsG,MAAM,GAAG,CAAb;;AACA,OAAG;AACC,YAAMC,KAAK,GAAG,MAAM,KAAKa,KAAL,CAAWX,GAAX,EAAgBH,MAAhB,EAAwBtG,OAAxB,CAApB;AACAsG,MAAAA,MAAM,GAAGC,KAAK,CAACD,MAAf;;AACA,WAAK,MAAMW,MAAX,IAAqBV,KAAK,CAACW,OAA3B,EAAoC;AAChC,cAAMD,MAAN;AACH;AACJ,KAND,QAMSX,MAAM,KAAK,CANpB;AAOH;;AACe,QAAVlF,UAAU,GAAG;AACflE,IAAAA,sBAAsB,CAAC,IAAD,EAAOe,kBAAP,EAA2B,GAA3B,CAAtB,CAAsDoJ,QAAtD,CAA+D,IAAI1H,QAAQ,CAAC2H,sBAAb,EAA/D;;AACApK,IAAAA,sBAAsB,CAAC,IAAD,EAAOc,mBAAP,EAA4B,GAA5B,CAAtB,CAAuDoD,UAAvD;;AACA,UAAMlE,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCgB,iCAApC,CAAtB,CAA6FrB,IAA7F,CAAkG,IAAlG,CAAN;AACH;;AAxQ2C;;AA0QhDwB,OAAO,CAACgD,OAAR,GAAkBpC,WAAlB;AACA9B,oBAAoB,GAAG,IAAIwJ,OAAJ,EAAvB,EAAsCvJ,mBAAmB,GAAG,IAAIuJ,OAAJ,EAA5D,EAA2EtJ,kBAAkB,GAAG,IAAIsJ,OAAJ,EAAhG,EAA+GrJ,0BAA0B,GAAG,IAAIqJ,OAAJ,EAA5I,EAA2JpJ,eAAe,GAAG,IAAIoJ,OAAJ,EAA7K,EAA4LnJ,uBAAuB,GAAG,IAAImJ,OAAJ,EAAtN,EAAqOzJ,sBAAsB,GAAG,IAAI0J,OAAJ,EAA9P,EAA6QnJ,4BAA4B,GAAG,SAASA,4BAAT,CAAsC2B,OAAtC,EAA+C;AACvV,MAAIA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACmC,GAA9D,EAAmE;AAC/D,UAAMQ,MAAM,GAAG9C,WAAW,CAACqC,QAAZ,CAAqBlC,OAAO,CAACmC,GAA7B,CAAf;;AACA,QAAInC,OAAO,CAAC4C,MAAZ,EAAoB;AAChBD,MAAAA,MAAM,CAACC,MAAP,GAAgB7D,MAAM,CAAC0I,MAAP,CAAczH,OAAO,CAAC4C,MAAtB,EAA8BD,MAAM,CAACC,MAArC,CAAhB;AACH;;AACD7D,IAAAA,MAAM,CAAC0I,MAAP,CAAczH,OAAd,EAAuB2C,MAAvB;AACH;;AACD,MAAI3C,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACkD,QAA9D,EAAwE;AACpEtF,IAAAA,sBAAsB,CAAC,IAAD,EAAOQ,uBAAP,EAAgC4B,OAAO,CAACkD,QAAxC,EAAkD,GAAlD,CAAtB;AACH;;AACD,SAAOlD,OAAP;AACH,CAZD,EAYG1B,2BAA2B,GAAG,SAASA,2BAAT,GAAuC;AACpE,MAAIiF,EAAJ;;AACA,QAAMmE,eAAe,GAAG,YAAY;AAChC,QAAInE,EAAJ,EAAQc,EAAR,EAAYsD,EAAZ,EAAgBC,EAAhB,EAAoBC,EAApB;;AACA,UAAMC,QAAQ,GAAG,EAAjB;;AACA,QAAI5K,sBAAsB,CAAC,IAAD,EAAOkB,uBAAP,EAAgC,GAAhC,CAAtB,KAA+D,CAAnE,EAAsE;AAClE0J,MAAAA,QAAQ,CAACC,IAAT,CAAc7K,sBAAsB,CAAC,IAAD,EAAOe,kBAAP,EAA2B,GAA3B,CAAtB,CAAsDsH,UAAtD,CAAiE,CAAC,QAAD,EAAWrI,sBAAsB,CAAC,IAAD,EAAOkB,uBAAP,EAAgC,GAAhC,CAAtB,CAA2DoG,QAA3D,EAAX,CAAjE,EAAoJ;AAAEwD,QAAAA,IAAI,EAAE;AAAR,OAApJ,CAAd;AACH;;AACD,QAAI,CAACzE,EAAE,GAAGrG,sBAAsB,CAAC,IAAD,EAAOa,oBAAP,EAA6B,GAA7B,CAA5B,MAAmE,IAAnE,IAA2EwF,EAAE,KAAK,KAAK,CAAvF,GAA2F,KAAK,CAAhG,GAAoGA,EAAE,CAAC0E,QAA3G,EAAqH;AACjHH,MAAAA,QAAQ,CAACC,IAAT,CAAc7K,sBAAsB,CAAC,IAAD,EAAOe,kBAAP,EAA2B,GAA3B,CAAtB,CAAsDsH,UAAtD,CAAiErG,UAAU,CAAC+C,OAAX,CAAmBiG,QAAnB,CAA4BC,kBAA5B,EAAjE,EAAmH;AAAEH,QAAAA,IAAI,EAAE;AAAR,OAAnH,CAAd;AACH;;AACD,QAAI,CAAC3D,EAAE,GAAGnH,sBAAsB,CAAC,IAAD,EAAOa,oBAAP,EAA6B,GAA7B,CAA5B,MAAmE,IAAnE,IAA2EsG,EAAE,KAAK,KAAK,CAAvF,GAA2F,KAAK,CAAhG,GAAoGA,EAAE,CAAC+D,IAA3G,EAAiH;AAC7GN,MAAAA,QAAQ,CAACC,IAAT,CAAc7K,sBAAsB,CAAC,IAAD,EAAOe,kBAAP,EAA2B,GAA3B,CAAtB,CAAsDsH,UAAtD,CAAiErG,UAAU,CAAC+C,OAAX,CAAmBoG,cAAnB,CAAkCF,kBAAlC,CAAqDjL,sBAAsB,CAAC,IAAD,EAAOa,oBAAP,EAA6B,GAA7B,CAAtB,CAAwDqK,IAA7G,CAAjE,EAAqL;AAAEJ,QAAAA,IAAI,EAAE;AAAR,OAArL,CAAd;AACH;;AACD,QAAI,CAAC,CAACL,EAAE,GAAGzK,sBAAsB,CAAC,IAAD,EAAOa,oBAAP,EAA6B,GAA7B,CAA5B,MAAmE,IAAnE,IAA2E4J,EAAE,KAAK,KAAK,CAAvF,GAA2F,KAAK,CAAhG,GAAoGA,EAAE,CAACpF,QAAxG,MAAsH,CAACqF,EAAE,GAAG1K,sBAAsB,CAAC,IAAD,EAAOa,oBAAP,EAA6B,GAA7B,CAA5B,MAAmE,IAAnE,IAA2E6J,EAAE,KAAK,KAAK,CAAvF,GAA2F,KAAK,CAAhG,GAAoGA,EAAE,CAACpF,QAA7N,CAAJ,EAA4O;AACxOsF,MAAAA,QAAQ,CAACC,IAAT,CAAc7K,sBAAsB,CAAC,IAAD,EAAOe,kBAAP,EAA2B,GAA3B,CAAtB,CAAsDsH,UAAtD,CAAiErG,UAAU,CAAC+C,OAAX,CAAmBqG,IAAnB,CAAwBH,kBAAxB,CAA2C;AACtH5F,QAAAA,QAAQ,EAAErF,sBAAsB,CAAC,IAAD,EAAOa,oBAAP,EAA6B,GAA7B,CAAtB,CAAwDwE,QADoD;AAEtHC,QAAAA,QAAQ,EAAE,CAACqF,EAAE,GAAG3K,sBAAsB,CAAC,IAAD,EAAOa,oBAAP,EAA6B,GAA7B,CAAtB,CAAwDyE,QAA9D,MAA4E,IAA5E,IAAoFqF,EAAE,KAAK,KAAK,CAAhG,GAAoGA,EAApG,GAAyG;AAFG,OAA3C,CAAjE,EAGV;AAAEG,QAAAA,IAAI,EAAE;AAAR,OAHU,EAGMO,KAHN,CAGY9D,GAAG,IAAI;AAC7B,cAAM,IAAI9E,QAAQ,CAAC6I,SAAb,CAAuB/D,GAAG,CAACC,OAA3B,CAAN;AACH,OALa,CAAd;AAMH;;AACD,UAAM+D,kBAAkB,GAAGvL,sBAAsB,CAAC,IAAD,EAAOe,kBAAP,EAA2B,GAA3B,CAAtB,CAAsDyK,WAAtD,EAA3B;;AACA,QAAID,kBAAJ,EAAwB;AACpBX,MAAAA,QAAQ,CAACC,IAAT,CAAcU,kBAAd;AACH;;AACD,QAAIX,QAAQ,CAAC7E,MAAb,EAAqB;AACjB/F,MAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCe,iBAApC,CAAtB,CAA6EpB,IAA7E,CAAkF,IAAlF,EAAwF,IAAxF;;AACA,YAAMgI,OAAO,CAACC,GAAR,CAAYoC,QAAZ,CAAN;AACH;AACJ,GA5BD;;AA6BA,SAAO,IAAI1I,QAAQ,CAAC6C,OAAb,CAAqByF,eAArB,EAAsC,CAACnE,EAAE,GAAGrG,sBAAsB,CAAC,IAAD,EAAOa,oBAAP,EAA6B,GAA7B,CAA5B,MAAmE,IAAnE,IAA2EwF,EAAE,KAAK,KAAK,CAAvF,GAA2F,KAAK,CAAhG,GAAoGA,EAAE,CAACX,MAA7I,EACF+F,EADE,CACC,MADD,EACSC,IAAI,IAAI1L,sBAAsB,CAAC,IAAD,EAAOe,kBAAP,EAA2B,GAA3B,CAAtB,CAAsD4K,aAAtD,CAAoED,IAApE,CADjB,EAEFD,EAFE,CAEC,OAFD,EAEUlE,GAAG,IAAI;AACpB,QAAIlB,EAAJ;;AACA,SAAKuF,IAAL,CAAU,OAAV,EAAmBrE,GAAnB;;AACA,QAAIvH,sBAAsB,CAAC,IAAD,EAAOc,mBAAP,EAA4B,GAA5B,CAAtB,CAAuDqF,MAAvD,IAAiE,EAAE,CAACE,EAAE,GAAGrG,sBAAsB,CAAC,IAAD,EAAOa,oBAAP,EAA6B,GAA7B,CAA5B,MAAmE,IAAnE,IAA2EwF,EAAE,KAAK,KAAK,CAAvF,GAA2F,KAAK,CAAhG,GAAoGA,EAAE,CAACwF,mBAAzG,CAArE,EAAoM;AAChM7L,MAAAA,sBAAsB,CAAC,IAAD,EAAOe,kBAAP,EAA2B,GAA3B,CAAtB,CAAsD+K,oBAAtD,CAA2EvE,GAA3E;AACH,KAFD,MAGK;AACDvH,MAAAA,sBAAsB,CAAC,IAAD,EAAOe,kBAAP,EAA2B,GAA3B,CAAtB,CAAsDoJ,QAAtD,CAA+D5C,GAA/D;AACH;AACJ,GAXM,EAYFkE,EAZE,CAYC,SAZD,EAYY,MAAM,KAAKG,IAAL,CAAU,SAAV,CAZlB,EAaFH,EAbE,CAaC,OAbD,EAaU,MAAM;AACnB,SAAKG,IAAL,CAAU,OAAV;;AACA5L,IAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCe,iBAApC,CAAtB,CAA6EpB,IAA7E,CAAkF,IAAlF;AACH,GAhBM,EAiBFkL,EAjBE,CAiBC,cAjBD,EAiBiB,MAAM,KAAKG,IAAL,CAAU,cAAV,CAjBvB,EAkBFH,EAlBE,CAkBC,OAlBD,EAkBU,MAAMzL,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCe,iBAApC,CAAtB,CAA6EpB,IAA7E,CAAkF,IAAlF,CAlBhB,EAmBFkL,EAnBE,CAmBC,KAnBD,EAmBQ,MAAM,KAAKG,IAAL,CAAU,KAAV,CAnBd,CAAP;AAoBH,CA/DD,EA+DGvK,0BAA0B,GAAG,SAASA,0BAAT,GAAsC;AAClE,MAAIgF,EAAJ;;AACA,SAAO,IAAIlE,gBAAgB,CAAC4C,OAArB,CAA6B,CAACsB,EAAE,GAAGrG,sBAAsB,CAAC,IAAD,EAAOa,oBAAP,EAA6B,GAA7B,CAA5B,MAAmE,IAAnE,IAA2EwF,EAAE,KAAK,KAAK,CAAvF,GAA2F,KAAK,CAAhG,GAAoGA,EAAE,CAAC0F,sBAApI,CAAP;AACH,CAlED,EAkEGzK,uBAAuB,GAAG,SAASA,uBAAT,GAAmC;AAAA;;AAC5D,MAAI+E,EAAJ;;AACA,MAAI,EAAE,CAACA,EAAE,GAAGrG,sBAAsB,CAAC,IAAD,EAAOa,oBAAP,EAA6B,GAA7B,CAA5B,MAAmE,IAAnE,IAA2EwF,EAAE,KAAK,KAAK,CAAvF,GAA2F,KAAK,CAAhG,GAAoGA,EAAE,CAACC,UAAzG,CAAJ,EACI;AACJtG,EAAAA,sBAAsB,CAAC,IAAD,EAAOiB,eAAP,EAAwB,GAAxB,CAAtB,CAAmD+F,WAAnD,GAAiEhH,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCY,wBAApC,CAAtB,CAAoFsH,IAApF,CAAyF,IAAzF,CAAjE;;AACA,OAAK9B,WAAL,GAAmB,YAAa;AAC5B,QAAIgF,QAAJ;;AAD4B,sCAATrF,IAAS;AAATA,MAAAA,IAAS;AAAA;;AAE5B,QAAI,OAAOA,IAAI,CAACA,IAAI,CAACZ,MAAL,GAAc,CAAf,CAAX,KAAiC,UAArC,EAAiD;AAC7CiG,MAAAA,QAAQ,GAAGrF,IAAI,CAACsF,GAAL,EAAX;AACH;;AACDjM,IAAAA,sBAAsB,CAAC,KAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCY,wBAApC,CAAtB,CAAoFjB,IAApF,CAAyF,KAAzF,EAA+FoG,IAAI,CAACuF,IAAL,EAA/F,EACKC,IADL,CACW9C,KAAD,IAAW;AACjB,UAAI,CAAC2C,QAAL,EACI,OAFa,CAGjB;;AACAA,MAAAA,QAAQ,CAAC,IAAD,EAAO3C,KAAP,CAAR;AACH,KAND,EAOKgC,KAPL,CAOY9D,GAAD,IAAS;AAChB,UAAI,CAACyE,QAAL,EAAe;AACX,QAAA,KAAI,CAACJ,IAAL,CAAU,OAAV,EAAmBrE,GAAnB;;AACA;AACH;;AACDyE,MAAAA,QAAQ,CAACzE,GAAD,CAAR;AACH,KAbD;AAcH,GAnBD;;AAoBA,OAAK,MAAM2D,IAAX,IAAmBrJ,MAAM,CAAC2H,IAAP,CAAYxH,UAAU,CAAC+C,OAAvB,CAAnB,EAAoD;AAChD/E,IAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCW,gCAApC,CAAtB,CAA4FhB,IAA5F,CAAiG,IAAjG,EAAuG2K,IAAvG;AACH;;AACD,OAAK,MAAMA,IAAX,IAAmBrJ,MAAM,CAAC2H,IAAP,CAAYxH,UAAU,CAAC+C,OAAvB,CAAnB,EAAoD;AAChD,SAAKmG,IAAI,CAACkB,WAAL,EAAL,IAA2B,KAAKlB,IAAL,CAA3B;AACH,GA9B2D,CA+B5D;;;AACAlL,EAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCW,gCAApC,CAAtB,CAA4FhB,IAA5F,CAAiG,IAAjG,EAAuG,QAAvG;;AACAP,EAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCW,gCAApC,CAAtB,CAA4FhB,IAA5F,CAAiG,IAAjG,EAAuG,QAAvG;;AACAP,EAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCW,gCAApC,CAAtB,CAA4FhB,IAA5F,CAAiG,IAAjG,EAAuG,WAAvG;;AACAP,EAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCW,gCAApC,CAAtB,CAA4FhB,IAA5F,CAAiG,IAAjG,EAAuG,WAAvG;;AACAP,EAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCW,gCAApC,CAAtB,CAA4FhB,IAA5F,CAAiG,IAAjG,EAAuG,YAAvG;;AACAP,EAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCW,gCAApC,CAAtB,CAA4FhB,IAA5F,CAAiG,IAAjG,EAAuG,YAAvG;;AACAP,EAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCW,gCAApC,CAAtB,CAA4FhB,IAA5F,CAAiG,IAAjG,EAAuG,aAAvG;;AACAP,EAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCW,gCAApC,CAAtB,CAA4FhB,IAA5F,CAAiG,IAAjG,EAAuG,aAAvG;;AACAP,EAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCW,gCAApC,CAAtB,CAA4FhB,IAA5F,CAAiG,IAAjG,EAAuG,cAAvG;;AACAP,EAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCW,gCAApC,CAAtB,CAA4FhB,IAA5F,CAAiG,IAAjG,EAAuG,cAAvG;;AACAP,EAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCW,gCAApC,CAAtB,CAA4FhB,IAA5F,CAAiG,IAAjG,EAAuG,MAAvG;;AACAP,EAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCW,gCAApC,CAAtB,CAA4FhB,IAA5F,CAAiG,IAAjG,EAAuG,MAAvG;AACH,CA9GD,EA8GGgB,gCAAgC,GAAG,SAASA,gCAAT,CAA0C2J,IAA1C,EAAgD;AAAA;;AAClFlL,EAAAA,sBAAsB,CAAC,IAAD,EAAOiB,eAAP,EAAwB,GAAxB,CAAtB,CAAmDiK,IAAnD,IAA2D,KAAKA,IAAL,EAAWpC,IAAX,CAAgB,IAAhB,CAA3D;;AACA,OAAKoC,IAAL,IACI;AAAA,uCAAIvE,IAAJ;AAAIA,MAAAA,IAAJ;AAAA;;AAAA,WAAa,MAAI,CAACK,WAAL,CAAiBkE,IAAjB,EAAuB,GAAGvE,IAA1B,CAAb;AAAA,GADJ;AAEH,CAlHD,EAkHGnF,wBAAwB,GAAG,SAASA,wBAAT,CAAkCmF,IAAlC,EAAwC7D,OAAxC,EAAiD;AAC3E,MAAI,CAAC9C,sBAAsB,CAAC,IAAD,EAAOc,mBAAP,EAA4B,GAA5B,CAAtB,CAAuDqF,MAA5D,EAAoE;AAChE,WAAOoC,OAAO,CAAC8D,MAAR,CAAe,IAAI5J,QAAQ,CAAC6J,iBAAb,EAAf,CAAP;AACH;;AACD,MAAIxJ,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACyJ,QAA9D,EAAwE;AACpE,WAAO,KAAK9D,eAAL,CAAqB+D,cAAc,IAAIA,cAAc,CAACxF,WAAf,CAA2BL,IAA3B,EAAiC,EAC3E,GAAG7D,OADwE;AAE3EyJ,MAAAA,QAAQ,EAAE;AAFiE,KAAjC,CAAvC,CAAP;AAIH;;AACD,QAAMtD,OAAO,GAAGjJ,sBAAsB,CAAC,IAAD,EAAOe,kBAAP,EAA2B,GAA3B,CAAtB,CAAsDsH,UAAtD,CAAiE1B,IAAjE,EAAuE7D,OAAvE,CAAhB;;AACA9C,EAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCe,iBAApC,CAAtB,CAA6EpB,IAA7E,CAAkF,IAAlF;;AACA,SAAO0I,OAAP;AACH,CA/HD,EA+HGxH,sBAAsB,GAAG,SAASA,sBAAT,CAAgCiF,OAAhC,EAAyCmB,QAAzC,EAAmDC,QAAnD,EAA6DC,UAA7D,EAAyE;AACjG,QAAMkB,OAAO,GAAGjJ,sBAAsB,CAAC,IAAD,EAAOe,kBAAP,EAA2B,GAA3B,CAAtB,CAAsD0L,SAAtD,CAAgE/F,OAAhE,EAAyEmB,QAAzE,EAAmFC,QAAnF,EAA6FC,UAA7F,CAAhB;;AACA/H,EAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCe,iBAApC,CAAtB,CAA6EpB,IAA7E,CAAkF,IAAlF;;AACA,SAAO0I,OAAP;AACH,CAnID,EAmIGvH,wBAAwB,GAAG,SAASA,wBAAT,CAAkCgF,OAAlC,EAA2CmB,QAA3C,EAAqDC,QAArD,EAA+DC,UAA/D,EAA2E;AACrG,QAAMkB,OAAO,GAAGjJ,sBAAsB,CAAC,IAAD,EAAOe,kBAAP,EAA2B,GAA3B,CAAtB,CAAsD2L,WAAtD,CAAkEhG,OAAlE,EAA2EmB,QAA3E,EAAqFC,QAArF,EAA+FC,UAA/F,CAAhB;;AACA/H,EAAAA,sBAAsB,CAAC,IAAD,EAAOY,sBAAP,EAA+B,GAA/B,EAAoCe,iBAApC,CAAtB,CAA6EpB,IAA7E,CAAkF,IAAlF;;AACA,SAAO0I,OAAP;AACH,CAvID,EAuIGtH,iBAAiB,GAAG,SAASA,iBAAT,GAA0C;AAAA,MAAfgL,KAAe,uEAAP,KAAO;;AAC7D,MAAI3M,sBAAsB,CAAC,IAAD,EAAOc,mBAAP,EAA4B,GAA5B,CAAtB,CAAuD8L,iBAAvD,IAA6E,CAACD,KAAD,IAAU,CAAC3M,sBAAsB,CAAC,IAAD,EAAOc,mBAAP,EAA4B,GAA5B,CAAtB,CAAuD+L,OAAnJ,EAA6J;AACzJ;AACH;;AACD7M,EAAAA,sBAAsB,CAAC,IAAD,EAAOc,mBAAP,EAA4B,GAA5B,CAAtB,CAAuDgM,IAAvD;;AACA,SAAO,CAAC9M,sBAAsB,CAAC,IAAD,EAAOc,mBAAP,EAA4B,GAA5B,CAAtB,CAAuD8L,iBAA/D,EAAkF;AAC9E,UAAMjG,IAAI,GAAG3G,sBAAsB,CAAC,IAAD,EAAOe,kBAAP,EAA2B,GAA3B,CAAtB,CAAsDgM,gBAAtD,EAAb;;AACA,QAAIpG,IAAI,KAAK7C,SAAb,EACI;;AACJ9D,IAAAA,sBAAsB,CAAC,IAAD,EAAOc,mBAAP,EAA4B,GAA5B,CAAtB,CAAuDkM,YAAvD,CAAoErG,IAApE;AACH;AACJ,CAlJD,EAkJG/E,iCAAiC,GAAG,eAAeA,iCAAf,GAAmD;AACtF,QAAM5B,sBAAsB,CAAC,IAAD,EAAOgB,0BAAP,EAAmC,GAAnC,CAAtB,CAA8DiM,KAA9D,EAAN;AACA,QAAMjN,sBAAsB,CAAC,IAAD,EAAOgB,0BAAP,EAAmC,GAAnC,CAAtB,CAA8DkM,KAA9D,EAAN;AACH,CArJD;AAsJA,CAAC,GAAG3K,WAAW,CAAC4K,kBAAhB,EAAoC;AAChC5I,EAAAA,SAAS,EAAE5B,WADqB;AAEhCoG,EAAAA,QAAQ,EAAE/G,UAAU,CAAC+C,OAFW;AAGhCqI,EAAAA,QAAQ,EAAEzK,WAAW,CAAC+B,SAAZ,CAAsBC;AAHA,CAApC;AAKAhC,WAAW,CAAC+B,SAAZ,CAAsBI,KAAtB,GAA8B1C,eAAe,CAAC2C,OAA9C","sourcesContent":["\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _RedisClient_instances, _RedisClient_options, _RedisClient_socket, _RedisClient_queue, _RedisClient_isolationPool, _RedisClient_v4, _RedisClient_selectedDB, _RedisClient_initiateOptions, _RedisClient_initiateSocket, _RedisClient_initiateQueue, _RedisClient_legacyMode, _RedisClient_defineLegacyCommand, _RedisClient_sendCommand, _RedisClient_subscribe, _RedisClient_unsubscribe, _RedisClient_tick, _RedisClient_destroyIsolationPool;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst commands_1 = require(\"./commands\");\nconst socket_1 = require(\"./socket\");\nconst commands_queue_1 = require(\"./commands-queue\");\nconst multi_command_1 = require(\"./multi-command\");\nconst events_1 = require(\"events\");\nconst command_options_1 = require(\"../command-options\");\nconst commander_1 = require(\"../commander\");\nconst generic_pool_1 = require(\"generic-pool\");\nconst errors_1 = require(\"../errors\");\nconst url_1 = require(\"url\");\nclass RedisClient extends events_1.EventEmitter {\n    constructor(options) {\n        super();\n        _RedisClient_instances.add(this);\n        Object.defineProperty(this, \"commandOptions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: RedisClient.commandOptions\n        });\n        _RedisClient_options.set(this, void 0);\n        _RedisClient_socket.set(this, void 0);\n        _RedisClient_queue.set(this, void 0);\n        _RedisClient_isolationPool.set(this, void 0);\n        _RedisClient_v4.set(this, {});\n        _RedisClient_selectedDB.set(this, 0);\n        Object.defineProperty(this, \"select\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: this.SELECT\n        });\n        Object.defineProperty(this, \"subscribe\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: this.SUBSCRIBE\n        });\n        Object.defineProperty(this, \"pSubscribe\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: this.PSUBSCRIBE\n        });\n        Object.defineProperty(this, \"unsubscribe\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: this.UNSUBSCRIBE\n        });\n        Object.defineProperty(this, \"pUnsubscribe\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: this.PUNSUBSCRIBE\n        });\n        Object.defineProperty(this, \"quit\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: this.QUIT\n        });\n        __classPrivateFieldSet(this, _RedisClient_options, __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_initiateOptions).call(this, options), \"f\");\n        __classPrivateFieldSet(this, _RedisClient_socket, __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_initiateSocket).call(this), \"f\");\n        __classPrivateFieldSet(this, _RedisClient_queue, __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_initiateQueue).call(this), \"f\");\n        __classPrivateFieldSet(this, _RedisClient_isolationPool, (0, generic_pool_1.createPool)({\n            create: async () => {\n                const duplicate = this.duplicate({\n                    isolationPoolOptions: undefined\n                });\n                await duplicate.connect();\n                return duplicate;\n            },\n            destroy: client => client.disconnect()\n        }, options === null || options === void 0 ? void 0 : options.isolationPoolOptions), \"f\");\n        __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_legacyMode).call(this);\n    }\n    static commandOptions(options) {\n        return (0, command_options_1.commandOptions)(options);\n    }\n    static extend(plugins) {\n        const Client = (0, commander_1.extendWithModulesAndScripts)({\n            BaseClass: RedisClient,\n            modules: plugins === null || plugins === void 0 ? void 0 : plugins.modules,\n            modulesCommandsExecutor: RedisClient.prototype.commandsExecutor,\n            scripts: plugins === null || plugins === void 0 ? void 0 : plugins.scripts,\n            scriptsExecutor: RedisClient.prototype.scriptsExecutor\n        });\n        if (Client !== RedisClient) {\n            Client.prototype.Multi = multi_command_1.default.extend(plugins);\n        }\n        return Client;\n    }\n    static create(options) {\n        return new (RedisClient.extend(options))(options);\n    }\n    static parseURL(url) {\n        // https://www.iana.org/assignments/uri-schemes/prov/redis\n        const { hostname, port, protocol, username, password, pathname } = new url_1.URL(url), parsed = {\n            socket: {\n                host: hostname\n            }\n        };\n        if (protocol === 'rediss:') {\n            parsed.socket.tls = true;\n        }\n        else if (protocol !== 'redis:') {\n            throw new TypeError('Invalid protocol');\n        }\n        if (port) {\n            parsed.socket.port = Number(port);\n        }\n        if (username) {\n            parsed.username = decodeURIComponent(username);\n        }\n        if (password) {\n            parsed.password = decodeURIComponent(password);\n        }\n        if (pathname.length > 1) {\n            const database = Number(pathname.substring(1));\n            if (isNaN(database)) {\n                throw new TypeError('Invalid pathname');\n            }\n            parsed.database = database;\n        }\n        return parsed;\n    }\n    get options() {\n        return __classPrivateFieldGet(this, _RedisClient_options, \"f\");\n    }\n    get isOpen() {\n        return __classPrivateFieldGet(this, _RedisClient_socket, \"f\").isOpen;\n    }\n    get v4() {\n        var _a;\n        if (!((_a = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _a === void 0 ? void 0 : _a.legacyMode)) {\n            throw new Error('the client is not in \"legacy mode\"');\n        }\n        return __classPrivateFieldGet(this, _RedisClient_v4, \"f\");\n    }\n    duplicate(overrides) {\n        return new (Object.getPrototypeOf(this).constructor)({\n            ...__classPrivateFieldGet(this, _RedisClient_options, \"f\"),\n            ...overrides\n        });\n    }\n    async connect() {\n        await __classPrivateFieldGet(this, _RedisClient_socket, \"f\").connect();\n    }\n    async commandsExecutor(command, args) {\n        const { args: redisArgs, options } = (0, commander_1.transformCommandArguments)(command, args);\n        return (0, commander_1.transformCommandReply)(command, await __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_sendCommand).call(this, redisArgs, options), redisArgs.preserve);\n    }\n    sendCommand(args, options) {\n        return __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_sendCommand).call(this, args, options);\n    }\n    async scriptsExecutor(script, args) {\n        const { args: redisArgs, options } = (0, commander_1.transformCommandArguments)(script, args);\n        return (0, commander_1.transformCommandReply)(script, await this.executeScript(script, redisArgs, options), redisArgs.preserve);\n    }\n    async executeScript(script, args, options) {\n        var _a, _b;\n        try {\n            return await __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_sendCommand).call(this, [\n                'EVALSHA',\n                script.SHA1,\n                script.NUMBER_OF_KEYS.toString(),\n                ...args\n            ], options);\n        }\n        catch (err) {\n            if (!((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.startsWith) === null || _b === void 0 ? void 0 : _b.call(_a, 'NOSCRIPT'))) {\n                throw err;\n            }\n            return await __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_sendCommand).call(this, [\n                'EVAL',\n                script.SCRIPT,\n                script.NUMBER_OF_KEYS.toString(),\n                ...args\n            ], options);\n        }\n    }\n    async SELECT(options, db) {\n        if (!(0, command_options_1.isCommandOptions)(options)) {\n            db = options;\n            options = null;\n        }\n        await __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_sendCommand).call(this, ['SELECT', db.toString()], options);\n        __classPrivateFieldSet(this, _RedisClient_selectedDB, db, \"f\");\n    }\n    SUBSCRIBE(channels, listener, bufferMode) {\n        return __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_subscribe).call(this, commands_queue_1.PubSubSubscribeCommands.SUBSCRIBE, channels, listener, bufferMode);\n    }\n    PSUBSCRIBE(patterns, listener, bufferMode) {\n        return __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_subscribe).call(this, commands_queue_1.PubSubSubscribeCommands.PSUBSCRIBE, patterns, listener, bufferMode);\n    }\n    UNSUBSCRIBE(channels, listener, bufferMode) {\n        return __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_unsubscribe).call(this, commands_queue_1.PubSubUnsubscribeCommands.UNSUBSCRIBE, channels, listener, bufferMode);\n    }\n    PUNSUBSCRIBE(patterns, listener, bufferMode) {\n        return __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_unsubscribe).call(this, commands_queue_1.PubSubUnsubscribeCommands.PUNSUBSCRIBE, patterns, listener, bufferMode);\n    }\n    QUIT() {\n        return __classPrivateFieldGet(this, _RedisClient_socket, \"f\").quit(() => {\n            const quitPromise = __classPrivateFieldGet(this, _RedisClient_queue, \"f\").addCommand(['QUIT'], {\n                ignorePubSubMode: true\n            });\n            __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_tick).call(this);\n            return Promise.all([\n                quitPromise,\n                __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_destroyIsolationPool).call(this)\n            ]);\n        });\n    }\n    executeIsolated(fn) {\n        return __classPrivateFieldGet(this, _RedisClient_isolationPool, \"f\").use(fn);\n    }\n    multi() {\n        var _a;\n        return new this.Multi(this.multiExecutor.bind(this), (_a = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _a === void 0 ? void 0 : _a.legacyMode);\n    }\n    multiExecutor(commands, chainId) {\n        const promise = Promise.all(commands.map(({ args }) => {\n            return __classPrivateFieldGet(this, _RedisClient_queue, \"f\").addCommand(args, RedisClient.commandOptions({\n                chainId\n            }));\n        }));\n        __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_tick).call(this);\n        return promise;\n    }\n    async *scanIterator(options) {\n        let cursor = 0;\n        do {\n            const reply = await this.scan(cursor, options);\n            cursor = reply.cursor;\n            for (const key of reply.keys) {\n                yield key;\n            }\n        } while (cursor !== 0);\n    }\n    async *hScanIterator(key, options) {\n        let cursor = 0;\n        do {\n            const reply = await this.hScan(key, cursor, options);\n            cursor = reply.cursor;\n            for (const tuple of reply.tuples) {\n                yield tuple;\n            }\n        } while (cursor !== 0);\n    }\n    async *sScanIterator(key, options) {\n        let cursor = 0;\n        do {\n            const reply = await this.sScan(key, cursor, options);\n            cursor = reply.cursor;\n            for (const member of reply.members) {\n                yield member;\n            }\n        } while (cursor !== 0);\n    }\n    async *zScanIterator(key, options) {\n        let cursor = 0;\n        do {\n            const reply = await this.zScan(key, cursor, options);\n            cursor = reply.cursor;\n            for (const member of reply.members) {\n                yield member;\n            }\n        } while (cursor !== 0);\n    }\n    async disconnect() {\n        __classPrivateFieldGet(this, _RedisClient_queue, \"f\").flushAll(new errors_1.DisconnectsClientError());\n        __classPrivateFieldGet(this, _RedisClient_socket, \"f\").disconnect();\n        await __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_destroyIsolationPool).call(this);\n    }\n}\nexports.default = RedisClient;\n_RedisClient_options = new WeakMap(), _RedisClient_socket = new WeakMap(), _RedisClient_queue = new WeakMap(), _RedisClient_isolationPool = new WeakMap(), _RedisClient_v4 = new WeakMap(), _RedisClient_selectedDB = new WeakMap(), _RedisClient_instances = new WeakSet(), _RedisClient_initiateOptions = function _RedisClient_initiateOptions(options) {\n    if (options === null || options === void 0 ? void 0 : options.url) {\n        const parsed = RedisClient.parseURL(options.url);\n        if (options.socket) {\n            parsed.socket = Object.assign(options.socket, parsed.socket);\n        }\n        Object.assign(options, parsed);\n    }\n    if (options === null || options === void 0 ? void 0 : options.database) {\n        __classPrivateFieldSet(this, _RedisClient_selectedDB, options.database, \"f\");\n    }\n    return options;\n}, _RedisClient_initiateSocket = function _RedisClient_initiateSocket() {\n    var _a;\n    const socketInitiator = async () => {\n        var _a, _b, _c, _d, _e;\n        const promises = [];\n        if (__classPrivateFieldGet(this, _RedisClient_selectedDB, \"f\") !== 0) {\n            promises.push(__classPrivateFieldGet(this, _RedisClient_queue, \"f\").addCommand(['SELECT', __classPrivateFieldGet(this, _RedisClient_selectedDB, \"f\").toString()], { asap: true }));\n        }\n        if ((_a = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _a === void 0 ? void 0 : _a.readonly) {\n            promises.push(__classPrivateFieldGet(this, _RedisClient_queue, \"f\").addCommand(commands_1.default.READONLY.transformArguments(), { asap: true }));\n        }\n        if ((_b = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _b === void 0 ? void 0 : _b.name) {\n            promises.push(__classPrivateFieldGet(this, _RedisClient_queue, \"f\").addCommand(commands_1.default.CLIENT_SETNAME.transformArguments(__classPrivateFieldGet(this, _RedisClient_options, \"f\").name), { asap: true }));\n        }\n        if (((_c = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _c === void 0 ? void 0 : _c.username) || ((_d = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _d === void 0 ? void 0 : _d.password)) {\n            promises.push(__classPrivateFieldGet(this, _RedisClient_queue, \"f\").addCommand(commands_1.default.AUTH.transformArguments({\n                username: __classPrivateFieldGet(this, _RedisClient_options, \"f\").username,\n                password: (_e = __classPrivateFieldGet(this, _RedisClient_options, \"f\").password) !== null && _e !== void 0 ? _e : ''\n            }), { asap: true }).catch(err => {\n                throw new errors_1.AuthError(err.message);\n            }));\n        }\n        const resubscribePromise = __classPrivateFieldGet(this, _RedisClient_queue, \"f\").resubscribe();\n        if (resubscribePromise) {\n            promises.push(resubscribePromise);\n        }\n        if (promises.length) {\n            __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_tick).call(this, true);\n            await Promise.all(promises);\n        }\n    };\n    return new socket_1.default(socketInitiator, (_a = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _a === void 0 ? void 0 : _a.socket)\n        .on('data', data => __classPrivateFieldGet(this, _RedisClient_queue, \"f\").parseResponse(data))\n        .on('error', err => {\n        var _a;\n        this.emit('error', err);\n        if (__classPrivateFieldGet(this, _RedisClient_socket, \"f\").isOpen && !((_a = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _a === void 0 ? void 0 : _a.disableOfflineQueue)) {\n            __classPrivateFieldGet(this, _RedisClient_queue, \"f\").flushWaitingForReply(err);\n        }\n        else {\n            __classPrivateFieldGet(this, _RedisClient_queue, \"f\").flushAll(err);\n        }\n    })\n        .on('connect', () => this.emit('connect'))\n        .on('ready', () => {\n        this.emit('ready');\n        __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_tick).call(this);\n    })\n        .on('reconnecting', () => this.emit('reconnecting'))\n        .on('drain', () => __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_tick).call(this))\n        .on('end', () => this.emit('end'));\n}, _RedisClient_initiateQueue = function _RedisClient_initiateQueue() {\n    var _a;\n    return new commands_queue_1.default((_a = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _a === void 0 ? void 0 : _a.commandsQueueMaxLength);\n}, _RedisClient_legacyMode = function _RedisClient_legacyMode() {\n    var _a;\n    if (!((_a = __classPrivateFieldGet(this, _RedisClient_options, \"f\")) === null || _a === void 0 ? void 0 : _a.legacyMode))\n        return;\n    __classPrivateFieldGet(this, _RedisClient_v4, \"f\").sendCommand = __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_sendCommand).bind(this);\n    this.sendCommand = (...args) => {\n        let callback;\n        if (typeof args[args.length - 1] === 'function') {\n            callback = args.pop();\n        }\n        __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_sendCommand).call(this, args.flat())\n            .then((reply) => {\n            if (!callback)\n                return;\n            // https://github.com/NodeRedis/node-redis#commands:~:text=minimal%20parsing\n            callback(null, reply);\n        })\n            .catch((err) => {\n            if (!callback) {\n                this.emit('error', err);\n                return;\n            }\n            callback(err);\n        });\n    };\n    for (const name of Object.keys(commands_1.default)) {\n        __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, name);\n    }\n    for (const name of Object.keys(commands_1.default)) {\n        this[name.toLowerCase()] = this[name];\n    }\n    // hard coded commands\n    __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'SELECT');\n    __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'select');\n    __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'SUBSCRIBE');\n    __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'subscribe');\n    __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'PSUBSCRIBE');\n    __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'pSubscribe');\n    __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'UNSUBSCRIBE');\n    __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'unsubscribe');\n    __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'PUNSUBSCRIBE');\n    __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'pUnsubscribe');\n    __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'QUIT');\n    __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_defineLegacyCommand).call(this, 'quit');\n}, _RedisClient_defineLegacyCommand = function _RedisClient_defineLegacyCommand(name) {\n    __classPrivateFieldGet(this, _RedisClient_v4, \"f\")[name] = this[name].bind(this);\n    this[name] =\n        (...args) => this.sendCommand(name, ...args);\n}, _RedisClient_sendCommand = function _RedisClient_sendCommand(args, options) {\n    if (!__classPrivateFieldGet(this, _RedisClient_socket, \"f\").isOpen) {\n        return Promise.reject(new errors_1.ClientClosedError());\n    }\n    if (options === null || options === void 0 ? void 0 : options.isolated) {\n        return this.executeIsolated(isolatedClient => isolatedClient.sendCommand(args, {\n            ...options,\n            isolated: false\n        }));\n    }\n    const promise = __classPrivateFieldGet(this, _RedisClient_queue, \"f\").addCommand(args, options);\n    __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_tick).call(this);\n    return promise;\n}, _RedisClient_subscribe = function _RedisClient_subscribe(command, channels, listener, bufferMode) {\n    const promise = __classPrivateFieldGet(this, _RedisClient_queue, \"f\").subscribe(command, channels, listener, bufferMode);\n    __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_tick).call(this);\n    return promise;\n}, _RedisClient_unsubscribe = function _RedisClient_unsubscribe(command, channels, listener, bufferMode) {\n    const promise = __classPrivateFieldGet(this, _RedisClient_queue, \"f\").unsubscribe(command, channels, listener, bufferMode);\n    __classPrivateFieldGet(this, _RedisClient_instances, \"m\", _RedisClient_tick).call(this);\n    return promise;\n}, _RedisClient_tick = function _RedisClient_tick(force = false) {\n    if (__classPrivateFieldGet(this, _RedisClient_socket, \"f\").writableNeedDrain || (!force && !__classPrivateFieldGet(this, _RedisClient_socket, \"f\").isReady)) {\n        return;\n    }\n    __classPrivateFieldGet(this, _RedisClient_socket, \"f\").cork();\n    while (!__classPrivateFieldGet(this, _RedisClient_socket, \"f\").writableNeedDrain) {\n        const args = __classPrivateFieldGet(this, _RedisClient_queue, \"f\").getCommandToSend();\n        if (args === undefined)\n            break;\n        __classPrivateFieldGet(this, _RedisClient_socket, \"f\").writeCommand(args);\n    }\n}, _RedisClient_destroyIsolationPool = async function _RedisClient_destroyIsolationPool() {\n    await __classPrivateFieldGet(this, _RedisClient_isolationPool, \"f\").drain();\n    await __classPrivateFieldGet(this, _RedisClient_isolationPool, \"f\").clear();\n};\n(0, commander_1.extendWithCommands)({\n    BaseClass: RedisClient,\n    commands: commands_1.default,\n    executor: RedisClient.prototype.commandsExecutor\n});\nRedisClient.prototype.Multi = multi_command_1.default;\n"]},"metadata":{},"sourceType":"script"}