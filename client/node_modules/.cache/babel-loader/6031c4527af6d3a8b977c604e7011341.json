{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst errors_1 = require(\"./errors\");\n\nclass RedisMultiCommand {\n  constructor() {\n    Object.defineProperty(this, \"queue\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"scriptsInUse\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new Set()\n    });\n  }\n\n  static generateChainId() {\n    return Symbol('RedisMultiCommand Chain Id');\n  }\n\n  addCommand(args, transformReply) {\n    this.queue.push({\n      args,\n      transformReply\n    });\n  }\n\n  addScript(script, args) {\n    const transformedArguments = [];\n\n    if (this.scriptsInUse.has(script.SHA1)) {\n      transformedArguments.push('EVALSHA', script.SHA1);\n    } else {\n      this.scriptsInUse.add(script.SHA1);\n      transformedArguments.push('EVAL', script.SCRIPT);\n    }\n\n    transformedArguments.push(script.NUMBER_OF_KEYS.toString());\n    const scriptArguments = script.transformArguments(...args);\n    transformedArguments.push(...scriptArguments);\n\n    if (scriptArguments.preserve) {\n      transformedArguments.preserve = scriptArguments.preserve;\n    }\n\n    this.addCommand(transformedArguments, script.transformReply);\n    return transformedArguments;\n  }\n\n  exec() {\n    if (!this.queue.length) {\n      return;\n    }\n\n    return [{\n      args: ['MULTI']\n    }, ...this.queue, {\n      args: ['EXEC']\n    }];\n  }\n\n  handleExecReplies(rawReplies) {\n    const execReply = rawReplies[rawReplies.length - 1];\n\n    if (execReply === null) {\n      throw new errors_1.WatchError();\n    }\n\n    return this.transformReplies(execReply);\n  }\n\n  transformReplies(rawReplies) {\n    return rawReplies.map((reply, i) => {\n      const {\n        transformReply,\n        args\n      } = this.queue[i];\n      return transformReply ? transformReply(reply, args.preserve) : reply;\n    });\n  }\n\n}\n\nexports.default = RedisMultiCommand;","map":{"version":3,"sources":["/home/maira/Desktop/Developer Projects/system-ping-project/node_modules/@node-redis/client/dist/lib/multi-command.js"],"names":["Object","defineProperty","exports","value","errors_1","require","RedisMultiCommand","constructor","enumerable","configurable","writable","Set","generateChainId","Symbol","addCommand","args","transformReply","queue","push","addScript","script","transformedArguments","scriptsInUse","has","SHA1","add","SCRIPT","NUMBER_OF_KEYS","toString","scriptArguments","transformArguments","preserve","exec","length","handleExecReplies","rawReplies","execReply","WatchError","transformReplies","map","reply","i","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst errors_1 = require(\"./errors\");\nclass RedisMultiCommand {\n    constructor() {\n        Object.defineProperty(this, \"queue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"scriptsInUse\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Set()\n        });\n    }\n    static generateChainId() {\n        return Symbol('RedisMultiCommand Chain Id');\n    }\n    addCommand(args, transformReply) {\n        this.queue.push({\n            args,\n            transformReply\n        });\n    }\n    addScript(script, args) {\n        const transformedArguments = [];\n        if (this.scriptsInUse.has(script.SHA1)) {\n            transformedArguments.push('EVALSHA', script.SHA1);\n        }\n        else {\n            this.scriptsInUse.add(script.SHA1);\n            transformedArguments.push('EVAL', script.SCRIPT);\n        }\n        transformedArguments.push(script.NUMBER_OF_KEYS.toString());\n        const scriptArguments = script.transformArguments(...args);\n        transformedArguments.push(...scriptArguments);\n        if (scriptArguments.preserve) {\n            transformedArguments.preserve = scriptArguments.preserve;\n        }\n        this.addCommand(transformedArguments, script.transformReply);\n        return transformedArguments;\n    }\n    exec() {\n        if (!this.queue.length) {\n            return;\n        }\n        return [\n            { args: ['MULTI'] },\n            ...this.queue,\n            { args: ['EXEC'] }\n        ];\n    }\n    handleExecReplies(rawReplies) {\n        const execReply = rawReplies[rawReplies.length - 1];\n        if (execReply === null) {\n            throw new errors_1.WatchError();\n        }\n        return this.transformReplies(execReply);\n    }\n    transformReplies(rawReplies) {\n        return rawReplies.map((reply, i) => {\n            const { transformReply, args } = this.queue[i];\n            return transformReply ? transformReply(reply, args.preserve) : reply;\n        });\n    }\n}\nexports.default = RedisMultiCommand;\n"]},"metadata":{},"sourceType":"script"}