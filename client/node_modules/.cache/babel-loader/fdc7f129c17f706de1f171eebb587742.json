{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformCommandReply = exports.encodeCommand = exports.transformCommandArguments = exports.extendWithModulesAndScripts = exports.extendWithCommands = void 0;\n\nconst command_options_1 = require(\"./command-options\");\n\nfunction extendWithCommands(_ref) {\n  let {\n    BaseClass,\n    commands,\n    executor\n  } = _ref;\n\n  for (const [name, command] of Object.entries(commands)) {\n    BaseClass.prototype[name] = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return executor.call(this, command, args);\n    };\n  }\n}\n\nexports.extendWithCommands = extendWithCommands;\n\nfunction extendWithModulesAndScripts(config) {\n  let Commander;\n\n  if (config.modules) {\n    Commander = class extends config.BaseClass {\n      constructor() {\n        super(...arguments);\n\n        for (const module of Object.keys(config.modules)) {\n          this[module] = new this[module](this);\n        }\n      }\n\n    };\n\n    for (const [moduleName, module] of Object.entries(config.modules)) {\n      Commander.prototype[moduleName] = class {\n        constructor(self) {\n          Object.defineProperty(this, \"self\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n          });\n          this.self = self;\n        }\n\n      };\n\n      for (const [commandName, command] of Object.entries(module)) {\n        Commander.prototype[moduleName].prototype[commandName] = function () {\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          return config.modulesCommandsExecutor.call(this.self, command, args);\n        };\n      }\n    }\n  }\n\n  if (config.scripts) {\n    Commander !== null && Commander !== void 0 ? Commander : Commander = class extends config.BaseClass {};\n\n    for (const [name, script] of Object.entries(config.scripts)) {\n      Commander.prototype[name] = function () {\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        return config.scriptsExecutor.call(this, script, args);\n      };\n    }\n  }\n\n  return Commander !== null && Commander !== void 0 ? Commander : config.BaseClass;\n}\n\nexports.extendWithModulesAndScripts = extendWithModulesAndScripts;\n\nfunction transformCommandArguments(command, args) {\n  let options;\n\n  if ((0, command_options_1.isCommandOptions)(args[0])) {\n    options = args[0];\n    args = args.slice(1);\n  }\n\n  return {\n    args: command.transformArguments(...args),\n    options\n  };\n}\n\nexports.transformCommandArguments = transformCommandArguments;\nconst DELIMITER = '\\r\\n';\n\nfunction* encodeCommand(args) {\n  var _a, _b;\n\n  let strings = `*${args.length}${DELIMITER}`,\n      stringsLength = 0;\n\n  for (const arg of args) {\n    if (Buffer.isBuffer(arg)) {\n      yield `${strings}$${arg.length}${DELIMITER}`;\n      strings = '';\n      stringsLength = 0;\n      yield arg;\n    } else {\n      const string = (_b = (_a = arg === null || arg === void 0 ? void 0 : arg.toString) === null || _a === void 0 ? void 0 : _a.call(arg)) !== null && _b !== void 0 ? _b : '',\n            byteLength = Buffer.byteLength(string);\n      strings += `$${byteLength}${DELIMITER}`;\n      const totalLength = stringsLength + byteLength;\n\n      if (totalLength > 1024) {\n        yield strings;\n        strings = string;\n        stringsLength = byteLength;\n      } else {\n        strings += string;\n        stringsLength = totalLength;\n      }\n    }\n\n    strings += DELIMITER;\n  }\n\n  yield strings;\n}\n\nexports.encodeCommand = encodeCommand;\n\nfunction transformCommandReply(command, rawReply, preserved) {\n  if (!command.transformReply) {\n    return rawReply;\n  }\n\n  return command.transformReply(rawReply, preserved);\n}\n\nexports.transformCommandReply = transformCommandReply;","map":{"version":3,"sources":["/home/maira/Desktop/Developer Projects/system-ping-project/node_modules/@node-redis/client/dist/lib/commander.js"],"names":["Object","defineProperty","exports","value","transformCommandReply","encodeCommand","transformCommandArguments","extendWithModulesAndScripts","extendWithCommands","command_options_1","require","BaseClass","commands","executor","name","command","entries","prototype","args","call","config","Commander","modules","constructor","module","keys","moduleName","self","enumerable","configurable","writable","commandName","modulesCommandsExecutor","scripts","script","scriptsExecutor","options","isCommandOptions","slice","transformArguments","DELIMITER","_a","_b","strings","length","stringsLength","arg","Buffer","isBuffer","string","toString","byteLength","totalLength","rawReply","preserved","transformReply"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transformCommandReply = exports.encodeCommand = exports.transformCommandArguments = exports.extendWithModulesAndScripts = exports.extendWithCommands = void 0;\nconst command_options_1 = require(\"./command-options\");\nfunction extendWithCommands({ BaseClass, commands, executor }) {\n    for (const [name, command] of Object.entries(commands)) {\n        BaseClass.prototype[name] = function (...args) {\n            return executor.call(this, command, args);\n        };\n    }\n}\nexports.extendWithCommands = extendWithCommands;\nfunction extendWithModulesAndScripts(config) {\n    let Commander;\n    if (config.modules) {\n        Commander = class extends config.BaseClass {\n            constructor(...args) {\n                super(...args);\n                for (const module of Object.keys(config.modules)) {\n                    this[module] = new this[module](this);\n                }\n            }\n        };\n        for (const [moduleName, module] of Object.entries(config.modules)) {\n            Commander.prototype[moduleName] = class {\n                constructor(self) {\n                    Object.defineProperty(this, \"self\", {\n                        enumerable: true,\n                        configurable: true,\n                        writable: true,\n                        value: void 0\n                    });\n                    this.self = self;\n                }\n            };\n            for (const [commandName, command] of Object.entries(module)) {\n                Commander.prototype[moduleName].prototype[commandName] = function (...args) {\n                    return config.modulesCommandsExecutor.call(this.self, command, args);\n                };\n            }\n        }\n    }\n    if (config.scripts) {\n        Commander !== null && Commander !== void 0 ? Commander : (Commander = class extends config.BaseClass {\n        });\n        for (const [name, script] of Object.entries(config.scripts)) {\n            Commander.prototype[name] = function (...args) {\n                return config.scriptsExecutor.call(this, script, args);\n            };\n        }\n    }\n    return (Commander !== null && Commander !== void 0 ? Commander : config.BaseClass);\n}\nexports.extendWithModulesAndScripts = extendWithModulesAndScripts;\nfunction transformCommandArguments(command, args) {\n    let options;\n    if ((0, command_options_1.isCommandOptions)(args[0])) {\n        options = args[0];\n        args = args.slice(1);\n    }\n    return {\n        args: command.transformArguments(...args),\n        options\n    };\n}\nexports.transformCommandArguments = transformCommandArguments;\nconst DELIMITER = '\\r\\n';\nfunction* encodeCommand(args) {\n    var _a, _b;\n    let strings = `*${args.length}${DELIMITER}`, stringsLength = 0;\n    for (const arg of args) {\n        if (Buffer.isBuffer(arg)) {\n            yield `${strings}$${arg.length}${DELIMITER}`;\n            strings = '';\n            stringsLength = 0;\n            yield arg;\n        }\n        else {\n            const string = (_b = (_a = arg === null || arg === void 0 ? void 0 : arg.toString) === null || _a === void 0 ? void 0 : _a.call(arg)) !== null && _b !== void 0 ? _b : '', byteLength = Buffer.byteLength(string);\n            strings += `$${byteLength}${DELIMITER}`;\n            const totalLength = stringsLength + byteLength;\n            if (totalLength > 1024) {\n                yield strings;\n                strings = string;\n                stringsLength = byteLength;\n            }\n            else {\n                strings += string;\n                stringsLength = totalLength;\n            }\n        }\n        strings += DELIMITER;\n    }\n    yield strings;\n}\nexports.encodeCommand = encodeCommand;\nfunction transformCommandReply(command, rawReply, preserved) {\n    if (!command.transformReply) {\n        return rawReply;\n    }\n    return command.transformReply(rawReply, preserved);\n}\nexports.transformCommandReply = transformCommandReply;\n"]},"metadata":{},"sourceType":"script"}