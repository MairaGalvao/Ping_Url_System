{"ast":null,"code":"'use strict';\n/**\n* LICENSE MIT\n* (C) Daniel Zelisko\n* http://github.com/danielzzz/node-ping\n*\n* a simple wrapper for ping\n* Now with support of not only english Windows.\n*\n*/\n// System library\n\nvar util = require('util');\n\nvar net = require('net');\n\nvar cp = require('child_process');\n\nvar os = require('os'); // 3rd-party library\n\n\nvar Q = require('q');\n\nvar __ = require('underscore'); // Our library\n\n\nvar builderFactory = require('./builder/factory');\n\nvar parserFactory = require('./parser/factory');\n/**\n * Refer to probe()\n */\n\n\nfunction _probe(addr, config) {\n  // Do not reassign function argument\n  var _config = config || {};\n\n  if (_config.v6 === undefined) {\n    _config.v6 = net.isIPv6(addr);\n  } // Convert callback base system command to promise base\n\n\n  var deferred = Q.defer(); // Spawn a ping process\n\n  var ping = null;\n  var platform = os.platform();\n\n  try {\n    var argumentBuilder = builderFactory.createBuilder(platform);\n    var pingExecutablePath = builderFactory.getExecutablePath(platform, _config.v6);\n    var pingArgs = argumentBuilder.getCommandArguments(addr, _config);\n    var spawnOptions = argumentBuilder.getSpawnOptions();\n    ping = cp.spawn(pingExecutablePath, pingArgs, spawnOptions);\n  } catch (err) {\n    deferred.reject(err);\n    return deferred.promise;\n  } // Initial parser\n\n\n  var parser = parserFactory.createParser(addr, platform, _config); // Register events from system ping\n\n  ping.once('error', function () {\n    var err = new Error(util.format('ping.probe: %s. %s', 'there was an error while executing the ping program. ', 'Check the path or permissions...'));\n    deferred.reject(err);\n  }); // Cache all lines from the system ping\n\n  var outstring = [];\n  ping.stdout.on('data', function (data) {\n    outstring.push(String(data));\n  }); // Parse lines we have on closing system ping\n\n  ping.once('close', function () {\n    // Merge lines we have and split it by \\n\n    var lines = outstring.join('').split('\\n'); // Parse line one by one\n\n    __.each(lines, parser.eat, parser); // Get result\n\n\n    var ret = parser.getResult();\n    deferred.resolve(ret);\n  });\n  return deferred.promise;\n}\n/**\n * Class::PromisePing\n * @param {string} addr - Hostname or ip addres\n * @param {PingConfig} config - Configuration for command ping\n * @return {Promise}\n */\n\n\nfunction probe(addr, config) {\n  try {\n    var probePromise = _probe(addr, config);\n\n    return probePromise;\n  } catch (error) {\n    var errorPromise = Q.reject(error);\n    return errorPromise;\n  }\n}\n\nexports.probe = probe;","map":{"version":3,"sources":["/home/maira/Desktop/system-ping-project/client/node_modules/ping/lib/ping-promise.js"],"names":["util","require","net","cp","os","Q","__","builderFactory","parserFactory","_probe","addr","config","_config","v6","undefined","isIPv6","deferred","defer","ping","platform","argumentBuilder","createBuilder","pingExecutablePath","getExecutablePath","pingArgs","getCommandArguments","spawnOptions","getSpawnOptions","spawn","err","reject","promise","parser","createParser","once","Error","format","outstring","stdout","on","data","push","String","lines","join","split","each","eat","ret","getResult","resolve","probe","probePromise","error","errorPromise","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n* LICENSE MIT\n* (C) Daniel Zelisko\n* http://github.com/danielzzz/node-ping\n*\n* a simple wrapper for ping\n* Now with support of not only english Windows.\n*\n*/\n\n// System library\nvar util = require('util');\nvar net = require('net');\nvar cp = require('child_process');\nvar os = require('os');\n\n// 3rd-party library\nvar Q = require('q');\nvar __ = require('underscore');\n\n// Our library\nvar builderFactory = require('./builder/factory');\nvar parserFactory = require('./parser/factory');\n\n/**\n * Refer to probe()\n */\nfunction _probe(addr, config) {\n    // Do not reassign function argument\n    var _config = config || {};\n    if (_config.v6 === undefined) {\n        _config.v6 = net.isIPv6(addr);\n    }\n\n    // Convert callback base system command to promise base\n    var deferred = Q.defer();\n\n    // Spawn a ping process\n    var ping = null;\n    var platform = os.platform();\n    try {\n        var argumentBuilder = builderFactory.createBuilder(platform);\n        var pingExecutablePath = builderFactory.getExecutablePath(\n            platform, _config.v6\n        );\n        var pingArgs = argumentBuilder.getCommandArguments(addr, _config);\n        var spawnOptions = argumentBuilder.getSpawnOptions();\n        ping = cp.spawn(pingExecutablePath, pingArgs, spawnOptions);\n    } catch (err) {\n        deferred.reject(err);\n        return deferred.promise;\n    }\n\n    // Initial parser\n    var parser = parserFactory.createParser(addr, platform, _config);\n\n    // Register events from system ping\n    ping.once('error', function () {\n        var err = new Error(\n            util.format(\n                'ping.probe: %s. %s',\n                'there was an error while executing the ping program. ',\n                'Check the path or permissions...'\n            )\n        );\n        deferred.reject(err);\n    });\n\n    // Cache all lines from the system ping\n    var outstring = [];\n    ping.stdout.on('data', function (data) {\n        outstring.push(String(data));\n    });\n\n    // Parse lines we have on closing system ping\n    ping.once('close', function () {\n        // Merge lines we have and split it by \\n\n        var lines = outstring.join('').split('\\n');\n\n        // Parse line one by one\n        __.each(lines, parser.eat, parser);\n\n        // Get result\n        var ret = parser.getResult();\n\n        deferred.resolve(ret);\n    });\n\n    return deferred.promise;\n}\n\n\n/**\n * Class::PromisePing\n * @param {string} addr - Hostname or ip addres\n * @param {PingConfig} config - Configuration for command ping\n * @return {Promise}\n */\nfunction probe(addr, config) {\n    try {\n        var probePromise = _probe(addr, config);\n        return probePromise;\n    } catch (error) {\n        var errorPromise = Q.reject(error);\n        return errorPromise;\n    }\n}\n\nexports.probe = probe;\n"]},"metadata":{},"sourceType":"script"}